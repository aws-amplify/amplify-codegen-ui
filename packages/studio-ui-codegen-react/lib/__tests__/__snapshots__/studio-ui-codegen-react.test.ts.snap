// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`amplify render tests basic component tests should generate a simple box component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  View,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type TestProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function Test(props: TestProps): JSX.Element {
  return (
    <View
      fontFamily=\\"Times New Roman\\"
      fontSize=\\"20px\\"
      {...props}
      {...getOverrideProps(props.overrides, \\"Box\\")}
    ></View>
  );
}
"
`;

exports[`amplify render tests basic component tests should generate a simple button component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function CustomButton(props: CustomButtonProps): JSX.Element {
  return (
    <Button
      color=\\"#ff0000\\"
      width=\\"20\\"
      {...props}
      {...getOverrideProps(props.overrides, \\"Button\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests basic component tests should generate a simple text component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  Text,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type CustomTextProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function CustomText(props: CustomTextProps): JSX.Element {
  return (
    <Text
      color=\\"#ff0000\\"
      width=\\"20px\\"
      {...props}
      {...getOverrideProps(props.overrides, \\"Text\\")}
    >
      Text Value
    </Text>
  );
}
"
`;

exports[`amplify render tests collection should render collection with data binding 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User, UserPreferences } from \\"../models\\";
import {
  Button,
  Collection,
  EscapeHatchProps,
  Flex,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type CollectionOfCustomButtonsProps = {
  width?: Number,
  backgroundColor?: String,
  buttonColor?: UserPreferences,
  items?: any[],
} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function CollectionOfCustomButtons(
  props: CollectionOfCustomButtonsProps
): JSX.Element {
  const { width, backgroundColor, buttonColor, items } = props;
  const buttonUserFilter = {
    and: [
      { field: \\"age\\", operand: \\"10\\", operator: \\"gt\\" },
      { field: \\"lastName\\", operand: \\"L\\", operator: \\"beginsWith\\" },
    ],
  };
  const buttonUser =
    items !== undefined
      ? items
      : useDataStoreBinding({
          type: \\"collection\\",
          model: User,
          criteria: buttonUserFilter,
        }).items;
  const buttonColorFilter = {
    field: \\"userID\\",
    operand: \\"user@email.com\\",
    operator: \\"eq\\",
  };
  const { item: buttonColor } = useDataStoreBinding({
    type: \\"record\\",
    model: UserPreferences,
    criteria: buttonColorFilter,
  });
  return (
    <Collection
      type=\\"list\\"
      isPaginated={true}
      gap=\\"1.5rem\\"
      backgroundColor={backgroundColor}
      items={buttonUser}
      {...props}
      {...getOverrideProps(props.overrides, \\"Collection\\")}
    >
      {(item, index) => (
        <Flex {...getOverrideProps(props.overrides, \\"Collection.Flex\\")}>
          <Button
            label={item.username || \\"hspain@gmail.com\\"}
            labelWidth={width}
            backgroundColor={buttonColor.favoriteColor}
            disabled={isDisabled}
            {...getOverrideProps(props.overrides, \\"Collection.Flex.Button\\")}
          ></Button>
        </Flex>
      )}
    </Collection>
  );
}
"
`;

exports[`amplify render tests collection should render collection with data binding with no predicate 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Collection,
  EscapeHatchProps,
  ListingCard,
  findChildOverrides,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";
import { UntitledModel } from \\"../models\\";

export type ListingCardCollectionProps = {
  items?: any[],
} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function ListingCardCollection(
  props: ListingCardCollectionProps
): JSX.Element {
  const { items } = props;
  const bananas =
    items !== undefined
      ? items
      : useDataStoreBinding({
          type: \\"collection\\",
          model: UntitledModel,
        }).items;
  return (
    <Collection
      isPaginated=\\"true\\"
      collectionType=\\"grid\\"
      type=\\"list\\"
      columns=\\"2\\"
      order=\\"left-to-right\\"
      items={bananas}
      {...props}
      {...getOverrideProps(props.overrides, \\"Collection\\")}
    >
      {(item, index) => (
        <ListingCard
          marginRight=\\"0\\"
          marginBottom=\\"0\\"
          marginTop=\\"0\\"
          marginLeft=\\"0\\"
          {...findChildOverrides(props.overrides, \\"ListingCard\\")}
        ></ListingCard>
      )}
    </Collection>
  );
}
"
`;

exports[`amplify render tests collection should render collection without data binding 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Collection,
  EscapeHatchProps,
  ListingCard,
  findChildOverrides,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type ListingCardCollectionProps = {
  items?: any[],
} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function ListingCardCollection(
  props: ListingCardCollectionProps
): JSX.Element {
  const { items } = props;
  return (
    <Collection
      type=\\"list\\"
      isPaginated=\\"true\\"
      items={items}
      {...props}
      {...getOverrideProps(props.overrides, \\"Collection\\")}
    >
      {(item, index) => (
        <ListingCard
          {...findChildOverrides(props.overrides, \\"ListingCard\\")}
        ></ListingCard>
      )}
    </Collection>
  );
}
"
`;

exports[`amplify render tests complex component tests should generate a button within a box component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  View,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type BoxWithButtonProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function BoxWithButton(props: BoxWithButtonProps): JSX.Element {
  return (
    <View {...props} {...getOverrideProps(props.overrides, \\"Box\\")}>
      <Button
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...getOverrideProps(props.overrides, \\"Box.Button\\")}
      ></Button>
    </View>
  );
}
"
`;

exports[`amplify render tests complex component tests should generate a component with custom child 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  CustomButton,
  EscapeHatchProps,
  View,
  findChildOverrides,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type BoxWithCustomButtonProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function BoxWithCustomButton(
  props: BoxWithCustomButtonProps
): JSX.Element {
  return (
    <View {...props} {...getOverrideProps(props.overrides, \\"Box\\")}>
      <CustomButton
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...findChildOverrides(props.overrides, \\"CustomButton\\")}
      ></CustomButton>
    </View>
  );
}
"
`;

exports[`amplify render tests complex component tests should generate a component with exposeAs prop 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  View,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type BoxWithButtonProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function BoxWithButton(props: BoxWithButtonProps): JSX.Element {
  return (
    <View {...props} {...getOverrideProps(props.overrides, \\"Box\\")}>
      <Button
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...getOverrideProps(props.overrides, \\"Box.Button\\")}
      ></Button>
    </View>
  );
}
"
`;

exports[`amplify render tests component with binding should render build property on Text 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  Text,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type TextWithDataBindingProps = {
  textValue?: String,
} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function TextWithDataBinding(
  props: TextWithDataBindingProps
): JSX.Element {
  const { textValue } = props;
  return (
    <Text
      color=\\"#ff0000\\"
      width=\\"20px\\"
      {...props}
      {...getOverrideProps(props.overrides, \\"Text\\")}
    >
      {textValue}
    </Text>
  );
}
"
`;

exports[`amplify render tests component with data binding should add model imports 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User } from \\"../models\\";
import {
  Button,
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type ComponentWithDataBindingProps = {
  width?: Number,
  isDisabled?: Boolean,
  buttonUser?: User,
  buttonColor?: String,
} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function ComponentWithDataBinding(
  props: ComponentWithDataBindingProps
): JSX.Element {
  const { width, isDisabled, buttonUser, buttonColor } = props;
  return (
    <Button
      label={buttonUser.username || \\"hspain@gmail.com\\"}
      labelWidth={width}
      disabled={isDisabled}
      {...props}
      {...getOverrideProps(props.overrides, \\"Button\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests component with data binding should not have useDataStoreBinding when there is no predicate 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { UntitledModel } from \\"../models\\";
import {
  EscapeHatchProps,
  Flex,
  Text,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type SectionHeadingProps = {
  newProp6fd1?: UntitledModel,
} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function SectionHeading(
  props: SectionHeadingProps
): JSX.Element {
  const { newProp6fd1 } = props;
  return (
    <Flex
      padding=\\"0px 0px 10px 0px\\"
      backgroundColor=\\"rgb(255,255,255)\\"
      direction=\\"column\\"
      {...props}
      {...getOverrideProps(props.overrides, \\"Flex\\")}
    >
      <Flex
        tes={newProp6fd1.untitledfield}
        {...getOverrideProps(props.overrides, \\"Flex.Flex\\")}
      >
        <Text
          fontFamily=\\"Inter\\"
          color=\\"rgb(15.539060980081558,29.73937589675188,47.8125)\\"
          textAlign=\\"left\\"
          fontSize=\\"48px\\"
          lineHeight=\\"48px\\"
          fontWeight=\\"300\\"
          {...getOverrideProps(props.overrides, \\"Flex.Flex.Text\\")}
        >
          Heading 2
        </Text>
      </Flex>
      <Text
        fontFamily=\\"Inter\\"
        color=\\"rgb(0,0,0)\\"
        textAlign=\\"left\\"
        fontSize=\\"32px\\"
        lineHeight=\\"48px\\"
        fontWeight=\\"400\\"
        {...getOverrideProps(props.overrides, \\"Flex.Text\\")}
      >
        subtitle
      </Text>
    </Flex>
  );
}
"
`;

exports[`amplify render tests concat and conditional transform should render component with concatenation prop 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User } from \\"../models\\";
import {
  Button,
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = {
  width?: Number,
  buttonUser?: User,
  buttonColor?: String,
} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function CustomButton(props: CustomButtonProps): JSX.Element {
  const { width, buttonUser, buttonColor } = props;
  return (
    <Button
      label={\`\${buttonUser.firstname || \\"Harrison\\"}\${\\" \\"}\${
        buttonUser.lastname || \\"Spain\\"
      }\`}
      labelWidth={width}
      {...props}
      {...getOverrideProps(props.overrides, \\"Button\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests concat and conditional transform should render component with conditional prop 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User } from \\"../models\\";
import {
  Button,
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = {
  width?: Number,
  buttonUser?: User,
  buttonColor?: String,
} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function CustomButton(props: CustomButtonProps): JSX.Element {
  const { width, buttonUser, buttonColor } = props;
  return (
    <Button
      label={\`\${buttonUser.firstname || \\"Harrison\\"}\${\\" \\"}\${
        buttonUser.lastname || \\"Spain\\"
      }\`}
      labelWidth={width}
      disabled={buttonUser.isLoggedIn === true ? true : false}
      prompt={
        buttonUser.age > 18
          ? \`\${buttonUser.firstname}\${\\", cast your vote.\\"}\`
          : \\"Sorry you cannot vote\\"
      }
      backgroundColor={
        buttonUser.isLoggedIn === true
          ? buttonUser.loggedInColor
          : buttonUser.loggedOutColor
      }
      {...props}
      {...getOverrideProps(props.overrides, \\"Button\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests custom render config should render ES5 1`] = `
"var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
/* eslint-disable */
import React from \\"react\\";
import { Button, View, getOverrideProps } from \\"@aws-amplify/ui-react\\";
export default function BoxWithButton(props) {
  return React.createElement(
    View,
    __assign({}, props, getOverrideProps(props.overrides, \\"Box\\")),
    React.createElement(
      Button,
      __assign(
        { color: \\"#ff0000\\", width: \\"20px\\" },
        getOverrideProps(props.overrides, \\"Box.Button\\")
      )
    )
  );
}
"
`;

exports[`amplify render tests custom render config should render JSX 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { Button, View, getOverrideProps } from \\"@aws-amplify/ui-react\\";
export default function BoxWithButton(props) {
  return (
    <View {...props} {...getOverrideProps(props.overrides, \\"Box\\")}>
      <Button
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...getOverrideProps(props.overrides, \\"Box.Button\\")}
      ></Button>
    </View>
  );
}
"
`;

exports[`amplify render tests custom render config should render common JS 1`] = `
"\\"use strict\\";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, \\"__esModule\\", { value: true });
/* eslint-disable */
const react_1 = __importDefault(require(\\"react\\"));
const ui_react_1 = require(\\"@aws-amplify/ui-react\\");
function BoxWithButton(props) {
  return react_1.default.createElement(
    ui_react_1.View,
    Object.assign(
      {},
      props,
      ui_react_1.getOverrideProps(props.overrides, \\"Box\\")
    ),
    react_1.default.createElement(
      ui_react_1.Button,
      Object.assign(
        { color: \\"#ff0000\\", width: \\"20px\\" },
        ui_react_1.getOverrideProps(props.overrides, \\"Box.Button\\")
      )
    )
  );
}
exports.default = BoxWithButton;
"
`;

exports[`amplify render tests sample code snippet tests should generate a sample code snippet for components 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  CustomButton,
  EscapeHatchProps,
  View,
  findChildOverrides,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type BoxWithButtonProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function BoxWithButton(props: BoxWithButtonProps): JSX.Element {
  return (
    <View padding-left {...props} {...getOverrideProps(props.overrides, \\"Box\\")}>
      <CustomButton
        color=\\"#ff0000\\"
        width=\\"20px\\"
        buttonText=\\"Click Me\\"
        {...findChildOverrides(props.overrides, \\"CustomButton\\")}
      ></CustomButton>
    </View>
  );
}
"
`;

exports[`amplify render tests theme should render the theme 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  AmplifyProvider,
  DeepPartial,
  Theme,
  extendTheming,
} from \\"@aws-amplify/ui-react\\";
export default function withTheme<T>(
  WrappedComponent: React.ReactComponent<T>
) {
  const theme = {
    components: {
      alert: {
        backgroundColor: \\"hsl(210, 5%, 90%)\\",
        padding: \\"0.75rem 1rem\\",
        info: { backgroundColor: \\"hsl(220, 85%, 85%)\\" },
        error: { backgroundColor: \\"hsl(0, 75%, 85%)\\" },
        warning: { backgroundColor: \\"hsl(30, 75%, 85%)\\" },
        success: { backgroundColor: \\"hsl(130, 75%, 85%)\\" },
      },
      badge: {
        lineHeight: 1,
        fontWeight: 600,
        fontSize: \\"0.875rem\\",
        textAlign: \\"center\\",
        padding: \\"0.5rem 0.75rem\\",
        backgroundColor: \\"hsl(210, 5%, 90%)\\",
        borderRadius: \\"9999px\\",
        info: { backgroundColor: \\"hsl(220, 85%, 85%)\\" },
        warning: { backgroundColor: \\"hsl(30, 75%, 85%)\\" },
        success: { backgroundColor: \\"hsl(130, 75%, 85%)\\" },
        error: { backgroundColor: \\"hsl(0, 75%, 85%)\\" },
        small: { fontSize: \\"0.75rem\\", padding: \\"0.25rem 0.5rem\\" },
        large: { fontSize: \\"1rem\\", padding: \\"0.75rem 1rem\\" },
      },
      button: {
        fontWeight: \\"bold\\",
        textAlign: \\"center\\",
        borderRadius: \\"0.25rem\\",
        transitionDuration: \\"250ms\\",
        fontSize: \\"1rem\\",
        lineHeight: \\"1rem\\",
        padding: \\"0.75rem 1rem\\",
        borderColor: \\"hsl(190, 75%, 85%)\\",
        borderWidth: \\"1px\\",
        borderStyle: \\"solid\\",
        color: \\"hsl(190, 95%, 30%)\\",
        _hover: {
          color: \\"hsl(190, 100%, 15%)\\",
          backgroundColor: \\"hsl(190, 75%, 95%)\\",
          borderColor: \\"hsl(190, 50%, 50%)\\",
        },
        _focus: {
          color: \\"hsl(190, 100%, 15%)\\",
          borderColor: \\"hsl(190, 100%, 15%)\\",
          boxShadow: \\"hsl(190, 100%, 15%) 0px 0px 0px 1px\\",
        },
        _active: {
          color: \\"#fff\\",
          backgroundColor: \\"hsl(190, 100%, 15%)\\",
          borderColor: \\"hsl(190, 100%, 15%)\\",
        },
        _loading: {
          color: \\"hsl(210, 6%, 70%)\\",
          backgroundColor: \\"transparent\\",
          borderColor: \\"hsl(210, 5%, 90%)\\",
        },
        _disabled: {
          color: \\"hsl(210, 6%, 70%)\\",
          backgroundColor: \\"transparent\\",
          borderColor: \\"hsl(210, 5%, 90%)\\",
        },
        primary: {
          borderWidth: 0,
          backgroundColor: \\"hsl(190, 95%, 30%)\\",
          color: \\"#fff\\",
          _disabled: {
            backgroundColor: \\"hsl(210, 5%, 90%)\\",
            color: \\"hsl(210, 6%, 70%)\\",
          },
          _loading: {
            backgroundColor: \\"hsl(210, 5%, 90%)\\",
            color: \\"hsl(210, 6%, 70%)\\",
          },
          _hover: { backgroundColor: \\"hsl(190, 100%, 20%)\\" },
          _focus: { backgroundColor: \\"hsl(190, 100%, 20%)\\" },
          _active: { backgroundColor: \\"hsl(190, 100%, 15%)\\" },
        },
        link: {
          borderWidth: 0,
          backgroundColor: \\"transparent\\",
          color: \\"hsl(190, 95%, 30%)\\",
          _hover: { color: \\"hsl(190, 100%, 20%)\\" },
          _focus: { color: \\"hsl(190, 100%, 20%)\\" },
          _active: { color: \\"hsl(190, 100%, 15%)\\" },
          _disabled: { color: \\"hsl(210, 6%, 70%)\\" },
          _loading: { color: \\"hsl(210, 6%, 70%)\\" },
        },
        small: {
          fontSize: \\"0.875rem\\",
          lineHeight: \\"0.875rem\\",
          padding: \\"0.5rem 0.75rem\\",
        },
        large: {
          fontSize: \\"1.25rem\\",
          lineHeight: \\"1.25rem\\",
          padding: \\"1rem 1.5rem\\",
        },
      },
      card: {
        backgroundColor: \\"#fff\\",
        borderWidth: \\"1px\\",
        borderStyle: \\"solid\\",
        borderColor: \\"hsl(210, 6%, 70%)\\",
        boxShadow: \\"0 2px 6px hsl(210, 50%, 10%, 0.15)\\",
        padding: \\"1rem\\",
      },
      divider: {
        borderStyle: \\"solid\\",
        borderColor: \\"hsl(210, 6%, 70%)\\",
        borderWidth: \\"2px\\",
        small: { borderWidth: \\"1px\\" },
        large: { borderWidth: \\"3px\\" },
        opacity: \\"0.6\\",
      },
      field: {
        gap: \\"0.5rem\\",
        fontSize: \\"1rem\\",
        small: { gap: \\"0.25rem\\", fontSize: \\"0.875rem\\" },
        large: { gap: \\"0.75rem\\", fontSize: \\"1.25rem\\" },
      },
      fieldcontrol: {
        borderStyle: \\"solid\\",
        borderColor: \\"hsl(210, 6%, 70%)\\",
        borderWidth: \\"1px\\",
        borderRadius: \\"0.25rem\\",
        padding: \\"0.5rem 1rem\\",
        fontSize: \\"1rem\\",
        lineHeight: \\"2.25\\",
        transitionDuration: \\"250ms\\",
        outlineColor: \\"transparent\\",
        outlineStyle: \\"solid\\",
        outlineWidth: \\"2px\\",
        outlineOffset: \\"2px\\",
        small: {
          fontSize: \\"0.875rem\\",
          padding: \\"0.5rem 0.75rem\\",
          lineHeight: \\"2\\",
        },
        large: {
          fontSize: \\"1.25rem\\",
          padding: \\"1rem 1.5rem\\",
          lineHeight: \\"2.5\\",
        },
        quiet: {
          borderStyle: \\"none\\",
          borderBlockEnd: \\"1px solid hsl(210, 6%, 70%)\\",
          borderInlineStart: \\"none\\",
          borderInlineEnd: \\"none\\",
          borderBlockStart: \\"none\\",
          borderRadius: \\"0\\",
          _focus: {
            borderBlockEndColor: \\"hsl(190, 100%, 15%)\\",
            boxShadow: \\"0 1px hsl(190, 100%, 15%)\\",
          },
          _error: {
            borderBlockEndColor: \\"hsl(0, 95%, 30%)\\",
            _focus: { boxShadow: \\"0 1px hsl(0, 95%, 30%)\\" },
          },
        },
        _focus: {
          borderColor: \\"hsl(190, 100%, 15%)\\",
          boxShadow: \\"0px 0px 0px 1px hsl(190, 100%, 15%)\\",
        },
        _disabled: {
          cursor: \\"not-allowed\\",
          borderColor: \\"transparent\\",
          backgroundColor: \\"hsl(210, 5%, 90%)\\",
        },
        _error: {
          borderColor: \\"hsl(0, 95%, 30%)\\",
          _focus: { boxShadow: \\"0px 0px 0px 1px hsl(0, 95%, 30%)\\" },
        },
      },
      fieldgroup: { gap: 0 },
      fieldmessages: {
        error: { color: \\"hsl(0, 95%, 30%)\\", fontSize: \\"0.875rem\\" },
        description: { fontStyle: \\"italic\\", fontSize: \\"0.875rem\\" },
      },
      flex: {
        gap: \\"1rem\\",
        justifyContent: \\"normal\\",
        alignItems: \\"stretch\\",
        alignContent: \\"normal\\",
        flexWrap: \\"nowrap\\",
      },
      heading: {
        1: { fontSize: \\"5rem\\", fontWeight: 300 },
        2: { fontSize: \\"3rem\\", fontWeight: 300 },
        3: { fontSize: \\"2rem\\", fontWeight: 400 },
        4: { fontSize: \\"1.5rem\\", fontWeight: 500 },
        5: { fontSize: \\"1.25rem\\", fontWeight: 600 },
        6: { fontSize: \\"1rem\\", fontWeight: 700 },
        color: \\"hsl(210, 50%, 10%)\\",
        lineHeight: 1.25,
      },
      icon: {
        lineHeight: 1,
        height: \\"1rem\\",
        large: { height: \\"1.25rem\\" },
        small: { height: \\"0.875rem\\" },
      },
      image: {
        maxWidth: \\"100%\\",
        height: \\"auto\\",
        objectFit: \\"initial\\",
        objectPosition: \\"initial\\",
      },
      link: {
        active: { color: \\"hsl(190, 100%, 15%)\\" },
        color: \\"hsl(190, 95%, 30%)\\",
        focus: { color: \\"hsl(190, 100%, 20%)\\" },
        hover: { color: \\"hsl(190, 100%, 20%)\\" },
        large: { fontSize: \\"1.25rem\\" },
        small: { fontSize: \\"0.875rem\\" },
        visited: { color: \\"hsl(210, 6%, 70%)\\" },
      },
      pagination: {
        current: {
          color: \\"#fff\\",
          fontSize: \\"0.875rem\\",
          backgroundColor: \\"rgba(0, 0, 0, 0.4)\\",
        },
        button: {
          color: \\"inherit\\",
          fontWeight: \\"inherit\\",
          paddingTop: \\"0\\",
          paddingRight: \\"6px\\",
          paddingBottom: \\"0\\",
          paddingLeft: \\"6px\\",
          transition: \\"background-color 250ms\\",
          hover: { backgroundColor: \\"rgba(0, 0, 0, 0.1)\\" },
          disabled: { opacity: \\"0.4\\" },
        },
        ellipsis: { paddingRight: \\"8px\\", paddingLeft: \\"8px\\" },
        itemContainer: { marginLeft: \\"4px\\", marginRight: \\"4px\\" },
        itemShared: { height: \\"2rem\\", minWidth: \\"2rem\\", borderRadius: \\"1rem\\" },
      },
      placeholder: {
        borderRadius: \\"0.25rem\\",
        transitionDuration: \\"500ms\\",
        startColor: \\"hsl(210, 5%, 95%)\\",
        endColor: \\"hsl(210, 5%, 90%)\\",
        small: { height: \\"0.75rem\\" },
        default: { height: \\"1rem\\" },
        large: { height: \\"1.5rem\\" },
      },
      radio: {
        alignItems: \\"center\\",
        justifyContent: \\"flex-start\\",
        gap: \\"inherit\\",
        button: {
          alignItems: \\"center\\",
          justifyContent: \\"center\\",
          width: \\"1rem\\",
          height: \\"1rem\\",
          boxSizing: \\"border-box\\",
          borderWidth: \\"2px\\",
          borderStyle: \\"solid\\",
          borderRadius: \\"50%\\",
          borderColor: \\"hsl(210, 6%, 70%)\\",
          color: \\"#fff\\",
          backgroundColor: \\"#fff\\",
          transitionProperty: \\"all\\",
          transitionDuration: \\"250ms\\",
          outlineColor: \\"transparent\\",
          outlineStyle: \\"solid\\",
          outlineWidth: \\"2px\\",
          outlineOffset: \\"2px\\",
          before: {
            content: '\\"\\"',
            display: \\"inline-block\\",
            width: \\"50%\\",
            height: \\"50%\\",
            borderRadius: \\"50%\\",
            backgroundColor: \\"currentColor\\",
          },
          small: { width: \\"0.75rem\\", height: \\"0.75rem\\" },
          large: { width: \\"1.25rem\\", height: \\"1.25rem\\" },
          _checked: {
            color: \\"hsl(0, 50%, 50%)\\",
            _disabled: { color: \\"hsl(210, 5%, 80%)\\" },
          },
          _focus: {
            borderColor: \\"hsl(190, 100%, 15%)\\",
            boxShadow: \\"0 0 0 1px hsl(190, 100%, 15%)\\",
          },
          _disabled: {
            borderColor: \\"#e9ecf0\\",
            backgroundColor: \\"#fff\\",
            color: \\"#fff\\",
          },
        },
        label: { _disabled: { color: \\"#d6dbe2\\" } },
      },
      rating: {
        large: { size: \\"3rem\\" },
        default: { size: \\"1.5rem\\" },
        small: { size: \\"0.875rem\\" },
        filled: { color: \\"hsl(30, 75%, 75%)\\" },
        empty: { color: \\"hsl(210, 6%, 70%)\\" },
      },
      select: {
        paddingInlineEnd: \\"3.0rem\\",
        wrapper: { display: \\"block\\", position: \\"relative\\", cursor: \\"pointer\\" },
        iconWrapper: {
          position: \\"absolute\\",
          height: \\"50%\\",
          top: \\"25%\\",
          right: \\"1rem\\",
          pointerEvents: \\"none\\",
        },
      },
      switchfield: {
        disabled: { opacity: \\"0.3\\" },
        focused: { shadow: \\"0 0 4px #000\\" },
        label: { padding: \\"0.5rem\\" },
        large: { font: { size: \\"1.25rem\\" } },
        small: { font: { size: \\"0.875rem\\" } },
        thumb: {
          background: \\"#fff\\",
          border: { color: \\"hsl(210, 5%, 90%)\\", radius: \\"8rem\\" },
          checked: { transform: \\"translateX(1em)\\" },
          transition: { duration: \\"250ms\\" },
          width: \\"1em\\",
        },
        track: {
          background: \\"hsl(210, 5%, 80%)\\",
          border: { radius: \\"8rem\\" },
          checked: { background: \\"hsl(220, 70%, 70%)\\" },
          height: \\"1em\\",
          padding: \\"2px\\",
          transition: { duration: \\"100ms\\" },
          width: \\"2.0em\\",
        },
      },
      tabs: {
        backgroundColor: \\"transparent\\",
        borderColor: \\"hsl(210, 5%, 80%)\\",
        borderStyle: \\"solid\\",
        borderWidth: \\"2px\\",
        item: {
          backgroundColor: \\"transparent\\",
          borderColor: \\"hsl(210, 5%, 80%)\\",
          borderStyle: \\"solid\\",
          borderWidth: \\"2px\\",
          color: \\"hsl(210, 10%, 40%)\\",
          fontSize: \\"1rem\\",
          fontWeight: 700,
          padding: \\"0.75rem 1rem\\",
          textAlign: \\"center\\",
          transitionDuration: \\"250ms\\",
          _hover: { color: \\"hsl(190, 100%, 20%)\\" },
          _focus: { color: \\"hsl(190, 100%, 20%)\\" },
          _active: {
            color: \\"hsl(190, 95%, 30%)\\",
            borderColor: \\"hsl(190, 95%, 30%)\\",
            backgroundColor: \\"transparent\\",
          },
          _disabled: {
            color: \\"hsl(210, 6%, 70%)\\",
            backgroundColor: \\"transparent\\",
            borderColor: \\"hsl(210, 5%, 90%)\\",
          },
        },
      },
      text: {
        color: \\"hsl(210, 50%, 10%)\\",
        primary: { color: \\"hsl(210, 50%, 10%)\\" },
        secondary: { color: \\"hsl(210, 10%, 40%)\\" },
        tertiary: { color: \\"hsl(210, 6%, 70%)\\" },
        error: { color: \\"hsl(0, 95%, 30%)\\" },
        warning: { color: \\"hsl(30, 95%, 30%)\\" },
        success: { color: \\"hsl(130, 95%, 30%)\\" },
        info: { color: \\"hsl(220, 95%, 30%)\\" },
      },
    },
    borderWidths: { small: \\"1px\\", medium: \\"2px\\", large: \\"3px\\" },
    breakpoints: {
      values: { base: 0, small: 30, medium: 48, large: 62, xl: 80, xxl: 96 },
      unit: \\"em\\",
      defaultBreakpoint: \\"base\\",
    },
    colors: {
      red: {
        10: \\"hsl(0, 75%, 95%)\\",
        20: \\"hsl(0, 75%, 85%)\\",
        40: \\"hsl(0, 75%, 75%)\\",
        60: \\"hsl(0, 50%, 50%)\\",
        80: \\"hsl(0, 95%, 30%)\\",
        90: \\"hsl(0, 100%, 20%)\\",
        100: \\"hsl(0, 100%, 15%)\\",
      },
      orange: {
        10: \\"hsl(30, 75%, 95%)\\",
        20: \\"hsl(30, 75%, 85%)\\",
        40: \\"hsl(30, 75%, 75%)\\",
        60: \\"hsl(30, 50%, 50%)\\",
        80: \\"hsl(30, 95%, 30%)\\",
        90: \\"hsl(30, 100%, 20%)\\",
        100: \\"hsl(30, 100%, 15%)\\",
      },
      yellow: {
        10: \\"hsl(60, 75%, 95%)\\",
        20: \\"hsl(60, 75%, 85%)\\",
        40: \\"hsl(60, 75%, 75%)\\",
        60: \\"hsl(60, 50%, 50%)\\",
        80: \\"hsl(60, 95%, 30%)\\",
        90: \\"hsl(60, 100%, 20%)\\",
        100: \\"hsl(60, 100%, 15%)\\",
      },
      green: {
        10: \\"hsl(130, 75%, 95%)\\",
        20: \\"hsl(130, 75%, 85%)\\",
        40: \\"hsl(130, 75%, 75%)\\",
        60: \\"hsl(130, 50%, 50%)\\",
        80: \\"hsl(130, 95%, 30%)\\",
        90: \\"hsl(130, 100%, 20%)\\",
        100: \\"hsl(130, 100%, 15%)\\",
      },
      teal: {
        10: \\"hsl(190, 75%, 95%)\\",
        20: \\"hsl(190, 75%, 85%)\\",
        40: \\"hsl(190, 70%, 70%)\\",
        60: \\"hsl(190, 50%, 50%)\\",
        80: \\"hsl(190, 95%, 30%)\\",
        90: \\"hsl(190, 100%, 20%)\\",
        100: \\"hsl(190, 100%, 15%)\\",
      },
      blue: {
        10: \\"hsl(220, 95%, 95%)\\",
        20: \\"hsl(220, 85%, 85%)\\",
        40: \\"hsl(220, 70%, 70%)\\",
        60: \\"hsl(220, 50%, 50%)\\",
        80: \\"hsl(220, 95%, 30%)\\",
        90: \\"hsl(220, 100%, 20%)\\",
        100: \\"hsl(220, 100%, 15%)\\",
      },
      purple: {
        10: \\"hsl(300, 95%, 95%)\\",
        20: \\"hsl(300, 85%, 85%)\\",
        40: \\"hsl(300, 70%, 70%)\\",
        60: \\"hsl(300, 50%, 50%)\\",
        80: \\"hsl(300, 95%, 30%)\\",
        90: \\"hsl(300, 100%, 20%)\\",
        100: \\"hsl(300, 100%, 15%)\\",
      },
      pink: {
        10: \\"hsl(340, 95%, 95%)\\",
        20: \\"hsl(340, 90%, 85%)\\",
        40: \\"hsl(340, 70%, 70%)\\",
        60: \\"hsl(340, 50%, 50%)\\",
        80: \\"hsl(340, 95%, 30%)\\",
        90: \\"hsl(340, 100%, 20%)\\",
        100: \\"hsl(340, 100%, 15%)\\",
      },
      neutral: {
        10: \\"hsl(210, 5%, 95%)\\",
        20: \\"hsl(210, 5%, 90%)\\",
        40: \\"hsl(210, 5%, 80%)\\",
        60: \\"hsl(210, 6%, 70%)\\",
        80: \\"hsl(210, 10%, 40%)\\",
        90: \\"hsl(210, 25%, 25%)\\",
        100: \\"hsl(210, 50%, 10%)\\",
      },
      brand: {
        primary: {
          10: \\"hsl(190, 75%, 95%)\\",
          20: \\"hsl(190, 75%, 85%)\\",
          40: \\"hsl(190, 70%, 70%)\\",
          60: \\"hsl(190, 50%, 50%)\\",
          80: \\"hsl(190, 95%, 30%)\\",
          90: \\"hsl(190, 100%, 20%)\\",
          100: \\"hsl(190, 100%, 15%)\\",
        },
        secondary: {
          10: \\"hsl(300, 95%, 95%)\\",
          20: \\"hsl(300, 85%, 85%)\\",
          40: \\"hsl(300, 70%, 70%)\\",
          60: \\"hsl(300, 50%, 50%)\\",
          80: \\"hsl(300, 95%, 30%)\\",
          90: \\"hsl(300, 100%, 20%)\\",
          100: \\"hsl(300, 100%, 15%)\\",
        },
      },
      font: {
        primary: \\"hsl(210, 50%, 10%)\\",
        secondary: \\"hsl(210, 10%, 40%)\\",
        tertiary: \\"hsl(210, 6%, 70%)\\",
        disabled: \\"hsl(210, 6%, 70%)\\",
        inverse: \\"#fff\\",
        interactive: \\"hsl(190, 95%, 30%)\\",
        hover: \\"hsl(190, 100%, 20%)\\",
        focus: \\"hsl(190, 100%, 20%)\\",
        active: \\"hsl(190, 100%, 15%)\\",
        info: \\"hsl(220, 95%, 30%)\\",
        warning: \\"hsl(30, 95%, 30%)\\",
        error: \\"hsl(0, 95%, 30%)\\",
        success: \\"hsl(130, 95%, 30%)\\",
      },
      background: {
        primary: \\"#fff\\",
        secondary: \\"hsl(210, 5%, 95%)\\",
        tertiary: \\"hsl(210, 5%, 90%)\\",
        disabled: \\"hsl(210, 5%, 95%)\\",
        info: \\"hsl(220, 85%, 85%)\\",
        warning: \\"hsl(30, 75%, 85%)\\",
        error: \\"hsl(0, 75%, 85%)\\",
        success: \\"hsl(130, 75%, 85%)\\",
      },
      border: {
        primary: \\"hsl(210, 6%, 70%)\\",
        secondary: \\"hsl(210, 5%, 80%)\\",
        tertiary: \\"hsl(210, 5%, 90%)\\",
      },
      focus: \\"hsl(190, 100%, 15%)\\",
      error: \\"hsl(0, 95%, 30%)\\",
      shadow: {
        primary: \\"hsl(210, 50%, 10%, 0.25)\\",
        secondary: \\"hsl(210, 50%, 10%, 0.15)\\",
        tertiary: \\"hsl(210, 50%, 10%, 0.05)\\",
      },
      black: \\"#000\\",
      white: \\"#fff\\",
      transparent: \\"transparent\\",
      icon: { filled: \\"hsl(30, 75%, 75%)\\", empty: \\"hsl(210, 6%, 70%)\\" },
    },
    fonts: {
      default: {
        variable:
          \\"'InterVariable', -apple-system, BlinkMacSystemFont,\\\\n        'Helvetica Neue', 'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans',\\\\n        sans-serif\\",
        static:
          \\"'Inter', -apple-system, BlinkMacSystemFont, 'Helvetica Neue',\\\\n        'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans', sans-serif\\",
      },
    },
    fontSizes: {
      xs: \\"0.75rem\\",
      small: \\"0.875rem\\",
      medium: \\"1rem\\",
      large: \\"1.25rem\\",
      xl: \\"1.5rem\\",
      xxl: \\"2rem\\",
      xxxl: \\"3rem\\",
      xxxxl: \\"5rem\\",
    },
    fontWeights: {
      hairline: 100,
      thin: 200,
      light: 300,
      normal: 400,
      medium: 500,
      semibold: 600,
      bold: 700,
      extrabold: 800,
      black: 900,
    },
    lineHeights: { small: \\"2\\", medium: \\"2.25\\", large: \\"2.5\\" },
    opacities: {
      0: \\"0\\",
      10: \\"0.1\\",
      20: \\"0.2\\",
      30: \\"0.3\\",
      40: \\"0.4\\",
      50: \\"0.5\\",
      60: \\"0.6\\",
      70: \\"0.7\\",
      80: \\"0.8\\",
      90: \\"0.9\\",
      100: \\"1\\",
    },
    outlineOffsets: { small: \\"1px\\", medium: \\"2px\\", large: \\"3px\\" },
    outlineWidths: { small: \\"1px\\", medium: \\"2px\\", large: \\"3px\\" },
    radii: {
      small: \\"0.125rem\\",
      medium: \\"0.25rem\\",
      large: \\"1rem\\",
      xl: \\"2rem\\",
      xxl: \\"4rem\\",
      xxxl: \\"8rem\\",
    },
    shadows: {
      small: \\"0 2px 4px hsl(210, 50%, 10%, 0.05)\\",
      medium: \\"0 2px 6px hsl(210, 50%, 10%, 0.15)\\",
      large: \\"0 4px 12px hsl(210, 50%, 10%, 0.25)\\",
      switch: \\"0 0 4px #000\\",
    },
    space: {
      xxs: \\"0.25rem\\",
      xs: \\"0.5rem\\",
      small: \\"0.75rem\\",
      medium: \\"1rem\\",
      large: \\"1.5rem\\",
      xl: \\"2.0rem\\",
      xxl: \\"3.0rem\\",
      xxxl: \\"4.5rem\\",
      relative: {
        xxs: \\"0.25em\\",
        xs: \\"0.5em\\",
        small: \\"0.75em\\",
        medium: \\"1em\\",
        large: \\"1.5em\\",
        xl: \\"2.0em\\",
        xxl: \\"3.0em\\",
        xxxl: \\"4.5em\\",
      },
    },
    time: { transition: { short: \\"100ms\\", medium: \\"250ms\\", long: \\"500ms\\" } },
    transforms: {
      slideX: {
        small: \\"translateX(0.5em)\\",
        medium: \\"translateX(1em)\\",
        large: \\"translateX(2em)\\",
      },
    },
    types: {
      null: null,
      string: \\"test\\",
      number: 10,
      boolean: { t: true, false: false },
      object: { object: { test: \\"test\\" }, array: [\\"test\\"] },
    },
  };
  const displayName =
    WrappedComponent.displayName || WrappedComponent.name || \\"Component\\";
  const ComponentWithTheme = (props: T) => {
    const theming = extendTheming(theme);
    return (
      <AmplifyProvider theming={theming}>
        <WrappedComponent {...props} />
      </AmplifyProvider>
    );
  };
  ComponentWithTheme.displayName = displayName;
  return ComponentWithTheme;
}
"
`;

exports[`amplify render tests theme should render the theme with ES5 1`] = `
"var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
/* eslint-disable */
import React from \\"react\\";
import { AmplifyProvider, extendTheming } from \\"@aws-amplify/ui-react\\";
export default function withTheme(WrappedComponent) {
  var theme = {
    components: {
      alert: {
        backgroundColor: \\"hsl(210, 5%, 90%)\\",
        padding: \\"0.75rem 1rem\\",
        info: { backgroundColor: \\"hsl(220, 85%, 85%)\\" },
        error: { backgroundColor: \\"hsl(0, 75%, 85%)\\" },
        warning: { backgroundColor: \\"hsl(30, 75%, 85%)\\" },
        success: { backgroundColor: \\"hsl(130, 75%, 85%)\\" },
      },
      badge: {
        lineHeight: 1,
        fontWeight: 600,
        fontSize: \\"0.875rem\\",
        textAlign: \\"center\\",
        padding: \\"0.5rem 0.75rem\\",
        backgroundColor: \\"hsl(210, 5%, 90%)\\",
        borderRadius: \\"9999px\\",
        info: { backgroundColor: \\"hsl(220, 85%, 85%)\\" },
        warning: { backgroundColor: \\"hsl(30, 75%, 85%)\\" },
        success: { backgroundColor: \\"hsl(130, 75%, 85%)\\" },
        error: { backgroundColor: \\"hsl(0, 75%, 85%)\\" },
        small: { fontSize: \\"0.75rem\\", padding: \\"0.25rem 0.5rem\\" },
        large: { fontSize: \\"1rem\\", padding: \\"0.75rem 1rem\\" },
      },
      button: {
        fontWeight: \\"bold\\",
        textAlign: \\"center\\",
        borderRadius: \\"0.25rem\\",
        transitionDuration: \\"250ms\\",
        fontSize: \\"1rem\\",
        lineHeight: \\"1rem\\",
        padding: \\"0.75rem 1rem\\",
        borderColor: \\"hsl(190, 75%, 85%)\\",
        borderWidth: \\"1px\\",
        borderStyle: \\"solid\\",
        color: \\"hsl(190, 95%, 30%)\\",
        _hover: {
          color: \\"hsl(190, 100%, 15%)\\",
          backgroundColor: \\"hsl(190, 75%, 95%)\\",
          borderColor: \\"hsl(190, 50%, 50%)\\",
        },
        _focus: {
          color: \\"hsl(190, 100%, 15%)\\",
          borderColor: \\"hsl(190, 100%, 15%)\\",
          boxShadow: \\"hsl(190, 100%, 15%) 0px 0px 0px 1px\\",
        },
        _active: {
          color: \\"#fff\\",
          backgroundColor: \\"hsl(190, 100%, 15%)\\",
          borderColor: \\"hsl(190, 100%, 15%)\\",
        },
        _loading: {
          color: \\"hsl(210, 6%, 70%)\\",
          backgroundColor: \\"transparent\\",
          borderColor: \\"hsl(210, 5%, 90%)\\",
        },
        _disabled: {
          color: \\"hsl(210, 6%, 70%)\\",
          backgroundColor: \\"transparent\\",
          borderColor: \\"hsl(210, 5%, 90%)\\",
        },
        primary: {
          borderWidth: 0,
          backgroundColor: \\"hsl(190, 95%, 30%)\\",
          color: \\"#fff\\",
          _disabled: {
            backgroundColor: \\"hsl(210, 5%, 90%)\\",
            color: \\"hsl(210, 6%, 70%)\\",
          },
          _loading: {
            backgroundColor: \\"hsl(210, 5%, 90%)\\",
            color: \\"hsl(210, 6%, 70%)\\",
          },
          _hover: { backgroundColor: \\"hsl(190, 100%, 20%)\\" },
          _focus: { backgroundColor: \\"hsl(190, 100%, 20%)\\" },
          _active: { backgroundColor: \\"hsl(190, 100%, 15%)\\" },
        },
        link: {
          borderWidth: 0,
          backgroundColor: \\"transparent\\",
          color: \\"hsl(190, 95%, 30%)\\",
          _hover: { color: \\"hsl(190, 100%, 20%)\\" },
          _focus: { color: \\"hsl(190, 100%, 20%)\\" },
          _active: { color: \\"hsl(190, 100%, 15%)\\" },
          _disabled: { color: \\"hsl(210, 6%, 70%)\\" },
          _loading: { color: \\"hsl(210, 6%, 70%)\\" },
        },
        small: {
          fontSize: \\"0.875rem\\",
          lineHeight: \\"0.875rem\\",
          padding: \\"0.5rem 0.75rem\\",
        },
        large: {
          fontSize: \\"1.25rem\\",
          lineHeight: \\"1.25rem\\",
          padding: \\"1rem 1.5rem\\",
        },
      },
      card: {
        backgroundColor: \\"#fff\\",
        borderWidth: \\"1px\\",
        borderStyle: \\"solid\\",
        borderColor: \\"hsl(210, 6%, 70%)\\",
        boxShadow: \\"0 2px 6px hsl(210, 50%, 10%, 0.15)\\",
        padding: \\"1rem\\",
      },
      divider: {
        borderStyle: \\"solid\\",
        borderColor: \\"hsl(210, 6%, 70%)\\",
        borderWidth: \\"2px\\",
        small: { borderWidth: \\"1px\\" },
        large: { borderWidth: \\"3px\\" },
        opacity: \\"0.6\\",
      },
      field: {
        gap: \\"0.5rem\\",
        fontSize: \\"1rem\\",
        small: { gap: \\"0.25rem\\", fontSize: \\"0.875rem\\" },
        large: { gap: \\"0.75rem\\", fontSize: \\"1.25rem\\" },
      },
      fieldcontrol: {
        borderStyle: \\"solid\\",
        borderColor: \\"hsl(210, 6%, 70%)\\",
        borderWidth: \\"1px\\",
        borderRadius: \\"0.25rem\\",
        padding: \\"0.5rem 1rem\\",
        fontSize: \\"1rem\\",
        lineHeight: \\"2.25\\",
        transitionDuration: \\"250ms\\",
        outlineColor: \\"transparent\\",
        outlineStyle: \\"solid\\",
        outlineWidth: \\"2px\\",
        outlineOffset: \\"2px\\",
        small: {
          fontSize: \\"0.875rem\\",
          padding: \\"0.5rem 0.75rem\\",
          lineHeight: \\"2\\",
        },
        large: {
          fontSize: \\"1.25rem\\",
          padding: \\"1rem 1.5rem\\",
          lineHeight: \\"2.5\\",
        },
        quiet: {
          borderStyle: \\"none\\",
          borderBlockEnd: \\"1px solid hsl(210, 6%, 70%)\\",
          borderInlineStart: \\"none\\",
          borderInlineEnd: \\"none\\",
          borderBlockStart: \\"none\\",
          borderRadius: \\"0\\",
          _focus: {
            borderBlockEndColor: \\"hsl(190, 100%, 15%)\\",
            boxShadow: \\"0 1px hsl(190, 100%, 15%)\\",
          },
          _error: {
            borderBlockEndColor: \\"hsl(0, 95%, 30%)\\",
            _focus: { boxShadow: \\"0 1px hsl(0, 95%, 30%)\\" },
          },
        },
        _focus: {
          borderColor: \\"hsl(190, 100%, 15%)\\",
          boxShadow: \\"0px 0px 0px 1px hsl(190, 100%, 15%)\\",
        },
        _disabled: {
          cursor: \\"not-allowed\\",
          borderColor: \\"transparent\\",
          backgroundColor: \\"hsl(210, 5%, 90%)\\",
        },
        _error: {
          borderColor: \\"hsl(0, 95%, 30%)\\",
          _focus: { boxShadow: \\"0px 0px 0px 1px hsl(0, 95%, 30%)\\" },
        },
      },
      fieldgroup: { gap: 0 },
      fieldmessages: {
        error: { color: \\"hsl(0, 95%, 30%)\\", fontSize: \\"0.875rem\\" },
        description: { fontStyle: \\"italic\\", fontSize: \\"0.875rem\\" },
      },
      flex: {
        gap: \\"1rem\\",
        justifyContent: \\"normal\\",
        alignItems: \\"stretch\\",
        alignContent: \\"normal\\",
        flexWrap: \\"nowrap\\",
      },
      heading: {
        1: { fontSize: \\"5rem\\", fontWeight: 300 },
        2: { fontSize: \\"3rem\\", fontWeight: 300 },
        3: { fontSize: \\"2rem\\", fontWeight: 400 },
        4: { fontSize: \\"1.5rem\\", fontWeight: 500 },
        5: { fontSize: \\"1.25rem\\", fontWeight: 600 },
        6: { fontSize: \\"1rem\\", fontWeight: 700 },
        color: \\"hsl(210, 50%, 10%)\\",
        lineHeight: 1.25,
      },
      icon: {
        lineHeight: 1,
        height: \\"1rem\\",
        large: { height: \\"1.25rem\\" },
        small: { height: \\"0.875rem\\" },
      },
      image: {
        maxWidth: \\"100%\\",
        height: \\"auto\\",
        objectFit: \\"initial\\",
        objectPosition: \\"initial\\",
      },
      link: {
        active: { color: \\"hsl(190, 100%, 15%)\\" },
        color: \\"hsl(190, 95%, 30%)\\",
        focus: { color: \\"hsl(190, 100%, 20%)\\" },
        hover: { color: \\"hsl(190, 100%, 20%)\\" },
        large: { fontSize: \\"1.25rem\\" },
        small: { fontSize: \\"0.875rem\\" },
        visited: { color: \\"hsl(210, 6%, 70%)\\" },
      },
      pagination: {
        current: {
          color: \\"#fff\\",
          fontSize: \\"0.875rem\\",
          backgroundColor: \\"rgba(0, 0, 0, 0.4)\\",
        },
        button: {
          color: \\"inherit\\",
          fontWeight: \\"inherit\\",
          paddingTop: \\"0\\",
          paddingRight: \\"6px\\",
          paddingBottom: \\"0\\",
          paddingLeft: \\"6px\\",
          transition: \\"background-color 250ms\\",
          hover: { backgroundColor: \\"rgba(0, 0, 0, 0.1)\\" },
          disabled: { opacity: \\"0.4\\" },
        },
        ellipsis: { paddingRight: \\"8px\\", paddingLeft: \\"8px\\" },
        itemContainer: { marginLeft: \\"4px\\", marginRight: \\"4px\\" },
        itemShared: { height: \\"2rem\\", minWidth: \\"2rem\\", borderRadius: \\"1rem\\" },
      },
      placeholder: {
        borderRadius: \\"0.25rem\\",
        transitionDuration: \\"500ms\\",
        startColor: \\"hsl(210, 5%, 95%)\\",
        endColor: \\"hsl(210, 5%, 90%)\\",
        small: { height: \\"0.75rem\\" },
        default: { height: \\"1rem\\" },
        large: { height: \\"1.5rem\\" },
      },
      radio: {
        alignItems: \\"center\\",
        justifyContent: \\"flex-start\\",
        gap: \\"inherit\\",
        button: {
          alignItems: \\"center\\",
          justifyContent: \\"center\\",
          width: \\"1rem\\",
          height: \\"1rem\\",
          boxSizing: \\"border-box\\",
          borderWidth: \\"2px\\",
          borderStyle: \\"solid\\",
          borderRadius: \\"50%\\",
          borderColor: \\"hsl(210, 6%, 70%)\\",
          color: \\"#fff\\",
          backgroundColor: \\"#fff\\",
          transitionProperty: \\"all\\",
          transitionDuration: \\"250ms\\",
          outlineColor: \\"transparent\\",
          outlineStyle: \\"solid\\",
          outlineWidth: \\"2px\\",
          outlineOffset: \\"2px\\",
          before: {
            content: '\\"\\"',
            display: \\"inline-block\\",
            width: \\"50%\\",
            height: \\"50%\\",
            borderRadius: \\"50%\\",
            backgroundColor: \\"currentColor\\",
          },
          small: { width: \\"0.75rem\\", height: \\"0.75rem\\" },
          large: { width: \\"1.25rem\\", height: \\"1.25rem\\" },
          _checked: {
            color: \\"hsl(0, 50%, 50%)\\",
            _disabled: { color: \\"hsl(210, 5%, 80%)\\" },
          },
          _focus: {
            borderColor: \\"hsl(190, 100%, 15%)\\",
            boxShadow: \\"0 0 0 1px hsl(190, 100%, 15%)\\",
          },
          _disabled: {
            borderColor: \\"#e9ecf0\\",
            backgroundColor: \\"#fff\\",
            color: \\"#fff\\",
          },
        },
        label: { _disabled: { color: \\"#d6dbe2\\" } },
      },
      rating: {
        large: { size: \\"3rem\\" },
        default: { size: \\"1.5rem\\" },
        small: { size: \\"0.875rem\\" },
        filled: { color: \\"hsl(30, 75%, 75%)\\" },
        empty: { color: \\"hsl(210, 6%, 70%)\\" },
      },
      select: {
        paddingInlineEnd: \\"3.0rem\\",
        wrapper: { display: \\"block\\", position: \\"relative\\", cursor: \\"pointer\\" },
        iconWrapper: {
          position: \\"absolute\\",
          height: \\"50%\\",
          top: \\"25%\\",
          right: \\"1rem\\",
          pointerEvents: \\"none\\",
        },
      },
      switchfield: {
        disabled: { opacity: \\"0.3\\" },
        focused: { shadow: \\"0 0 4px #000\\" },
        label: { padding: \\"0.5rem\\" },
        large: { font: { size: \\"1.25rem\\" } },
        small: { font: { size: \\"0.875rem\\" } },
        thumb: {
          background: \\"#fff\\",
          border: { color: \\"hsl(210, 5%, 90%)\\", radius: \\"8rem\\" },
          checked: { transform: \\"translateX(1em)\\" },
          transition: { duration: \\"250ms\\" },
          width: \\"1em\\",
        },
        track: {
          background: \\"hsl(210, 5%, 80%)\\",
          border: { radius: \\"8rem\\" },
          checked: { background: \\"hsl(220, 70%, 70%)\\" },
          height: \\"1em\\",
          padding: \\"2px\\",
          transition: { duration: \\"100ms\\" },
          width: \\"2.0em\\",
        },
      },
      tabs: {
        backgroundColor: \\"transparent\\",
        borderColor: \\"hsl(210, 5%, 80%)\\",
        borderStyle: \\"solid\\",
        borderWidth: \\"2px\\",
        item: {
          backgroundColor: \\"transparent\\",
          borderColor: \\"hsl(210, 5%, 80%)\\",
          borderStyle: \\"solid\\",
          borderWidth: \\"2px\\",
          color: \\"hsl(210, 10%, 40%)\\",
          fontSize: \\"1rem\\",
          fontWeight: 700,
          padding: \\"0.75rem 1rem\\",
          textAlign: \\"center\\",
          transitionDuration: \\"250ms\\",
          _hover: { color: \\"hsl(190, 100%, 20%)\\" },
          _focus: { color: \\"hsl(190, 100%, 20%)\\" },
          _active: {
            color: \\"hsl(190, 95%, 30%)\\",
            borderColor: \\"hsl(190, 95%, 30%)\\",
            backgroundColor: \\"transparent\\",
          },
          _disabled: {
            color: \\"hsl(210, 6%, 70%)\\",
            backgroundColor: \\"transparent\\",
            borderColor: \\"hsl(210, 5%, 90%)\\",
          },
        },
      },
      text: {
        color: \\"hsl(210, 50%, 10%)\\",
        primary: { color: \\"hsl(210, 50%, 10%)\\" },
        secondary: { color: \\"hsl(210, 10%, 40%)\\" },
        tertiary: { color: \\"hsl(210, 6%, 70%)\\" },
        error: { color: \\"hsl(0, 95%, 30%)\\" },
        warning: { color: \\"hsl(30, 95%, 30%)\\" },
        success: { color: \\"hsl(130, 95%, 30%)\\" },
        info: { color: \\"hsl(220, 95%, 30%)\\" },
      },
    },
    borderWidths: { small: \\"1px\\", medium: \\"2px\\", large: \\"3px\\" },
    breakpoints: {
      values: { base: 0, small: 30, medium: 48, large: 62, xl: 80, xxl: 96 },
      unit: \\"em\\",
      defaultBreakpoint: \\"base\\",
    },
    colors: {
      red: {
        10: \\"hsl(0, 75%, 95%)\\",
        20: \\"hsl(0, 75%, 85%)\\",
        40: \\"hsl(0, 75%, 75%)\\",
        60: \\"hsl(0, 50%, 50%)\\",
        80: \\"hsl(0, 95%, 30%)\\",
        90: \\"hsl(0, 100%, 20%)\\",
        100: \\"hsl(0, 100%, 15%)\\",
      },
      orange: {
        10: \\"hsl(30, 75%, 95%)\\",
        20: \\"hsl(30, 75%, 85%)\\",
        40: \\"hsl(30, 75%, 75%)\\",
        60: \\"hsl(30, 50%, 50%)\\",
        80: \\"hsl(30, 95%, 30%)\\",
        90: \\"hsl(30, 100%, 20%)\\",
        100: \\"hsl(30, 100%, 15%)\\",
      },
      yellow: {
        10: \\"hsl(60, 75%, 95%)\\",
        20: \\"hsl(60, 75%, 85%)\\",
        40: \\"hsl(60, 75%, 75%)\\",
        60: \\"hsl(60, 50%, 50%)\\",
        80: \\"hsl(60, 95%, 30%)\\",
        90: \\"hsl(60, 100%, 20%)\\",
        100: \\"hsl(60, 100%, 15%)\\",
      },
      green: {
        10: \\"hsl(130, 75%, 95%)\\",
        20: \\"hsl(130, 75%, 85%)\\",
        40: \\"hsl(130, 75%, 75%)\\",
        60: \\"hsl(130, 50%, 50%)\\",
        80: \\"hsl(130, 95%, 30%)\\",
        90: \\"hsl(130, 100%, 20%)\\",
        100: \\"hsl(130, 100%, 15%)\\",
      },
      teal: {
        10: \\"hsl(190, 75%, 95%)\\",
        20: \\"hsl(190, 75%, 85%)\\",
        40: \\"hsl(190, 70%, 70%)\\",
        60: \\"hsl(190, 50%, 50%)\\",
        80: \\"hsl(190, 95%, 30%)\\",
        90: \\"hsl(190, 100%, 20%)\\",
        100: \\"hsl(190, 100%, 15%)\\",
      },
      blue: {
        10: \\"hsl(220, 95%, 95%)\\",
        20: \\"hsl(220, 85%, 85%)\\",
        40: \\"hsl(220, 70%, 70%)\\",
        60: \\"hsl(220, 50%, 50%)\\",
        80: \\"hsl(220, 95%, 30%)\\",
        90: \\"hsl(220, 100%, 20%)\\",
        100: \\"hsl(220, 100%, 15%)\\",
      },
      purple: {
        10: \\"hsl(300, 95%, 95%)\\",
        20: \\"hsl(300, 85%, 85%)\\",
        40: \\"hsl(300, 70%, 70%)\\",
        60: \\"hsl(300, 50%, 50%)\\",
        80: \\"hsl(300, 95%, 30%)\\",
        90: \\"hsl(300, 100%, 20%)\\",
        100: \\"hsl(300, 100%, 15%)\\",
      },
      pink: {
        10: \\"hsl(340, 95%, 95%)\\",
        20: \\"hsl(340, 90%, 85%)\\",
        40: \\"hsl(340, 70%, 70%)\\",
        60: \\"hsl(340, 50%, 50%)\\",
        80: \\"hsl(340, 95%, 30%)\\",
        90: \\"hsl(340, 100%, 20%)\\",
        100: \\"hsl(340, 100%, 15%)\\",
      },
      neutral: {
        10: \\"hsl(210, 5%, 95%)\\",
        20: \\"hsl(210, 5%, 90%)\\",
        40: \\"hsl(210, 5%, 80%)\\",
        60: \\"hsl(210, 6%, 70%)\\",
        80: \\"hsl(210, 10%, 40%)\\",
        90: \\"hsl(210, 25%, 25%)\\",
        100: \\"hsl(210, 50%, 10%)\\",
      },
      brand: {
        primary: {
          10: \\"hsl(190, 75%, 95%)\\",
          20: \\"hsl(190, 75%, 85%)\\",
          40: \\"hsl(190, 70%, 70%)\\",
          60: \\"hsl(190, 50%, 50%)\\",
          80: \\"hsl(190, 95%, 30%)\\",
          90: \\"hsl(190, 100%, 20%)\\",
          100: \\"hsl(190, 100%, 15%)\\",
        },
        secondary: {
          10: \\"hsl(300, 95%, 95%)\\",
          20: \\"hsl(300, 85%, 85%)\\",
          40: \\"hsl(300, 70%, 70%)\\",
          60: \\"hsl(300, 50%, 50%)\\",
          80: \\"hsl(300, 95%, 30%)\\",
          90: \\"hsl(300, 100%, 20%)\\",
          100: \\"hsl(300, 100%, 15%)\\",
        },
      },
      font: {
        primary: \\"hsl(210, 50%, 10%)\\",
        secondary: \\"hsl(210, 10%, 40%)\\",
        tertiary: \\"hsl(210, 6%, 70%)\\",
        disabled: \\"hsl(210, 6%, 70%)\\",
        inverse: \\"#fff\\",
        interactive: \\"hsl(190, 95%, 30%)\\",
        hover: \\"hsl(190, 100%, 20%)\\",
        focus: \\"hsl(190, 100%, 20%)\\",
        active: \\"hsl(190, 100%, 15%)\\",
        info: \\"hsl(220, 95%, 30%)\\",
        warning: \\"hsl(30, 95%, 30%)\\",
        error: \\"hsl(0, 95%, 30%)\\",
        success: \\"hsl(130, 95%, 30%)\\",
      },
      background: {
        primary: \\"#fff\\",
        secondary: \\"hsl(210, 5%, 95%)\\",
        tertiary: \\"hsl(210, 5%, 90%)\\",
        disabled: \\"hsl(210, 5%, 95%)\\",
        info: \\"hsl(220, 85%, 85%)\\",
        warning: \\"hsl(30, 75%, 85%)\\",
        error: \\"hsl(0, 75%, 85%)\\",
        success: \\"hsl(130, 75%, 85%)\\",
      },
      border: {
        primary: \\"hsl(210, 6%, 70%)\\",
        secondary: \\"hsl(210, 5%, 80%)\\",
        tertiary: \\"hsl(210, 5%, 90%)\\",
      },
      focus: \\"hsl(190, 100%, 15%)\\",
      error: \\"hsl(0, 95%, 30%)\\",
      shadow: {
        primary: \\"hsl(210, 50%, 10%, 0.25)\\",
        secondary: \\"hsl(210, 50%, 10%, 0.15)\\",
        tertiary: \\"hsl(210, 50%, 10%, 0.05)\\",
      },
      black: \\"#000\\",
      white: \\"#fff\\",
      transparent: \\"transparent\\",
      icon: { filled: \\"hsl(30, 75%, 75%)\\", empty: \\"hsl(210, 6%, 70%)\\" },
    },
    fonts: {
      default: {
        variable:
          \\"'InterVariable', -apple-system, BlinkMacSystemFont,\\\\n        'Helvetica Neue', 'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans',\\\\n        sans-serif\\",
        static:
          \\"'Inter', -apple-system, BlinkMacSystemFont, 'Helvetica Neue',\\\\n        'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans', sans-serif\\",
      },
    },
    fontSizes: {
      xs: \\"0.75rem\\",
      small: \\"0.875rem\\",
      medium: \\"1rem\\",
      large: \\"1.25rem\\",
      xl: \\"1.5rem\\",
      xxl: \\"2rem\\",
      xxxl: \\"3rem\\",
      xxxxl: \\"5rem\\",
    },
    fontWeights: {
      hairline: 100,
      thin: 200,
      light: 300,
      normal: 400,
      medium: 500,
      semibold: 600,
      bold: 700,
      extrabold: 800,
      black: 900,
    },
    lineHeights: { small: \\"2\\", medium: \\"2.25\\", large: \\"2.5\\" },
    opacities: {
      0: \\"0\\",
      10: \\"0.1\\",
      20: \\"0.2\\",
      30: \\"0.3\\",
      40: \\"0.4\\",
      50: \\"0.5\\",
      60: \\"0.6\\",
      70: \\"0.7\\",
      80: \\"0.8\\",
      90: \\"0.9\\",
      100: \\"1\\",
    },
    outlineOffsets: { small: \\"1px\\", medium: \\"2px\\", large: \\"3px\\" },
    outlineWidths: { small: \\"1px\\", medium: \\"2px\\", large: \\"3px\\" },
    radii: {
      small: \\"0.125rem\\",
      medium: \\"0.25rem\\",
      large: \\"1rem\\",
      xl: \\"2rem\\",
      xxl: \\"4rem\\",
      xxxl: \\"8rem\\",
    },
    shadows: {
      small: \\"0 2px 4px hsl(210, 50%, 10%, 0.05)\\",
      medium: \\"0 2px 6px hsl(210, 50%, 10%, 0.15)\\",
      large: \\"0 4px 12px hsl(210, 50%, 10%, 0.25)\\",
      switch: \\"0 0 4px #000\\",
    },
    space: {
      xxs: \\"0.25rem\\",
      xs: \\"0.5rem\\",
      small: \\"0.75rem\\",
      medium: \\"1rem\\",
      large: \\"1.5rem\\",
      xl: \\"2.0rem\\",
      xxl: \\"3.0rem\\",
      xxxl: \\"4.5rem\\",
      relative: {
        xxs: \\"0.25em\\",
        xs: \\"0.5em\\",
        small: \\"0.75em\\",
        medium: \\"1em\\",
        large: \\"1.5em\\",
        xl: \\"2.0em\\",
        xxl: \\"3.0em\\",
        xxxl: \\"4.5em\\",
      },
    },
    time: { transition: { short: \\"100ms\\", medium: \\"250ms\\", long: \\"500ms\\" } },
    transforms: {
      slideX: {
        small: \\"translateX(0.5em)\\",
        medium: \\"translateX(1em)\\",
        large: \\"translateX(2em)\\",
      },
    },
    types: {
      null: null,
      string: \\"test\\",
      number: 10,
      boolean: { t: true, false: false },
      object: { object: { test: \\"test\\" }, array: [\\"test\\"] },
    },
  };
  var displayName =
    WrappedComponent.displayName || WrappedComponent.name || \\"Component\\";
  var ComponentWithTheme = function (props) {
    var theming = extendTheming(theme);
    return React.createElement(
      AmplifyProvider,
      { theming: theming },
      React.createElement(WrappedComponent, __assign({}, props))
    );
  };
  ComponentWithTheme.displayName = displayName;
  return ComponentWithTheme;
}
"
`;

exports[`amplify render tests theme should render the theme with TSX 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  AmplifyProvider,
  DeepPartial,
  Theme,
  extendTheming,
} from \\"@aws-amplify/ui-react\\";
export default function withTheme<T>(
  WrappedComponent: React.ReactComponent<T>
) {
  const theme = {
    components: {
      alert: {
        backgroundColor: \\"hsl(210, 5%, 90%)\\",
        padding: \\"0.75rem 1rem\\",
        info: { backgroundColor: \\"hsl(220, 85%, 85%)\\" },
        error: { backgroundColor: \\"hsl(0, 75%, 85%)\\" },
        warning: { backgroundColor: \\"hsl(30, 75%, 85%)\\" },
        success: { backgroundColor: \\"hsl(130, 75%, 85%)\\" },
      },
      badge: {
        lineHeight: 1,
        fontWeight: 600,
        fontSize: \\"0.875rem\\",
        textAlign: \\"center\\",
        padding: \\"0.5rem 0.75rem\\",
        backgroundColor: \\"hsl(210, 5%, 90%)\\",
        borderRadius: \\"9999px\\",
        info: { backgroundColor: \\"hsl(220, 85%, 85%)\\" },
        warning: { backgroundColor: \\"hsl(30, 75%, 85%)\\" },
        success: { backgroundColor: \\"hsl(130, 75%, 85%)\\" },
        error: { backgroundColor: \\"hsl(0, 75%, 85%)\\" },
        small: { fontSize: \\"0.75rem\\", padding: \\"0.25rem 0.5rem\\" },
        large: { fontSize: \\"1rem\\", padding: \\"0.75rem 1rem\\" },
      },
      button: {
        fontWeight: \\"bold\\",
        textAlign: \\"center\\",
        borderRadius: \\"0.25rem\\",
        transitionDuration: \\"250ms\\",
        fontSize: \\"1rem\\",
        lineHeight: \\"1rem\\",
        padding: \\"0.75rem 1rem\\",
        borderColor: \\"hsl(190, 75%, 85%)\\",
        borderWidth: \\"1px\\",
        borderStyle: \\"solid\\",
        color: \\"hsl(190, 95%, 30%)\\",
        _hover: {
          color: \\"hsl(190, 100%, 15%)\\",
          backgroundColor: \\"hsl(190, 75%, 95%)\\",
          borderColor: \\"hsl(190, 50%, 50%)\\",
        },
        _focus: {
          color: \\"hsl(190, 100%, 15%)\\",
          borderColor: \\"hsl(190, 100%, 15%)\\",
          boxShadow: \\"hsl(190, 100%, 15%) 0px 0px 0px 1px\\",
        },
        _active: {
          color: \\"#fff\\",
          backgroundColor: \\"hsl(190, 100%, 15%)\\",
          borderColor: \\"hsl(190, 100%, 15%)\\",
        },
        _loading: {
          color: \\"hsl(210, 6%, 70%)\\",
          backgroundColor: \\"transparent\\",
          borderColor: \\"hsl(210, 5%, 90%)\\",
        },
        _disabled: {
          color: \\"hsl(210, 6%, 70%)\\",
          backgroundColor: \\"transparent\\",
          borderColor: \\"hsl(210, 5%, 90%)\\",
        },
        primary: {
          borderWidth: 0,
          backgroundColor: \\"hsl(190, 95%, 30%)\\",
          color: \\"#fff\\",
          _disabled: {
            backgroundColor: \\"hsl(210, 5%, 90%)\\",
            color: \\"hsl(210, 6%, 70%)\\",
          },
          _loading: {
            backgroundColor: \\"hsl(210, 5%, 90%)\\",
            color: \\"hsl(210, 6%, 70%)\\",
          },
          _hover: { backgroundColor: \\"hsl(190, 100%, 20%)\\" },
          _focus: { backgroundColor: \\"hsl(190, 100%, 20%)\\" },
          _active: { backgroundColor: \\"hsl(190, 100%, 15%)\\" },
        },
        link: {
          borderWidth: 0,
          backgroundColor: \\"transparent\\",
          color: \\"hsl(190, 95%, 30%)\\",
          _hover: { color: \\"hsl(190, 100%, 20%)\\" },
          _focus: { color: \\"hsl(190, 100%, 20%)\\" },
          _active: { color: \\"hsl(190, 100%, 15%)\\" },
          _disabled: { color: \\"hsl(210, 6%, 70%)\\" },
          _loading: { color: \\"hsl(210, 6%, 70%)\\" },
        },
        small: {
          fontSize: \\"0.875rem\\",
          lineHeight: \\"0.875rem\\",
          padding: \\"0.5rem 0.75rem\\",
        },
        large: {
          fontSize: \\"1.25rem\\",
          lineHeight: \\"1.25rem\\",
          padding: \\"1rem 1.5rem\\",
        },
      },
      card: {
        backgroundColor: \\"#fff\\",
        borderWidth: \\"1px\\",
        borderStyle: \\"solid\\",
        borderColor: \\"hsl(210, 6%, 70%)\\",
        boxShadow: \\"0 2px 6px hsl(210, 50%, 10%, 0.15)\\",
        padding: \\"1rem\\",
      },
      divider: {
        borderStyle: \\"solid\\",
        borderColor: \\"hsl(210, 6%, 70%)\\",
        borderWidth: \\"2px\\",
        small: { borderWidth: \\"1px\\" },
        large: { borderWidth: \\"3px\\" },
        opacity: \\"0.6\\",
      },
      field: {
        gap: \\"0.5rem\\",
        fontSize: \\"1rem\\",
        small: { gap: \\"0.25rem\\", fontSize: \\"0.875rem\\" },
        large: { gap: \\"0.75rem\\", fontSize: \\"1.25rem\\" },
      },
      fieldcontrol: {
        borderStyle: \\"solid\\",
        borderColor: \\"hsl(210, 6%, 70%)\\",
        borderWidth: \\"1px\\",
        borderRadius: \\"0.25rem\\",
        padding: \\"0.5rem 1rem\\",
        fontSize: \\"1rem\\",
        lineHeight: \\"2.25\\",
        transitionDuration: \\"250ms\\",
        outlineColor: \\"transparent\\",
        outlineStyle: \\"solid\\",
        outlineWidth: \\"2px\\",
        outlineOffset: \\"2px\\",
        small: {
          fontSize: \\"0.875rem\\",
          padding: \\"0.5rem 0.75rem\\",
          lineHeight: \\"2\\",
        },
        large: {
          fontSize: \\"1.25rem\\",
          padding: \\"1rem 1.5rem\\",
          lineHeight: \\"2.5\\",
        },
        quiet: {
          borderStyle: \\"none\\",
          borderBlockEnd: \\"1px solid hsl(210, 6%, 70%)\\",
          borderInlineStart: \\"none\\",
          borderInlineEnd: \\"none\\",
          borderBlockStart: \\"none\\",
          borderRadius: \\"0\\",
          _focus: {
            borderBlockEndColor: \\"hsl(190, 100%, 15%)\\",
            boxShadow: \\"0 1px hsl(190, 100%, 15%)\\",
          },
          _error: {
            borderBlockEndColor: \\"hsl(0, 95%, 30%)\\",
            _focus: { boxShadow: \\"0 1px hsl(0, 95%, 30%)\\" },
          },
        },
        _focus: {
          borderColor: \\"hsl(190, 100%, 15%)\\",
          boxShadow: \\"0px 0px 0px 1px hsl(190, 100%, 15%)\\",
        },
        _disabled: {
          cursor: \\"not-allowed\\",
          borderColor: \\"transparent\\",
          backgroundColor: \\"hsl(210, 5%, 90%)\\",
        },
        _error: {
          borderColor: \\"hsl(0, 95%, 30%)\\",
          _focus: { boxShadow: \\"0px 0px 0px 1px hsl(0, 95%, 30%)\\" },
        },
      },
      fieldgroup: { gap: 0 },
      fieldmessages: {
        error: { color: \\"hsl(0, 95%, 30%)\\", fontSize: \\"0.875rem\\" },
        description: { fontStyle: \\"italic\\", fontSize: \\"0.875rem\\" },
      },
      flex: {
        gap: \\"1rem\\",
        justifyContent: \\"normal\\",
        alignItems: \\"stretch\\",
        alignContent: \\"normal\\",
        flexWrap: \\"nowrap\\",
      },
      heading: {
        1: { fontSize: \\"5rem\\", fontWeight: 300 },
        2: { fontSize: \\"3rem\\", fontWeight: 300 },
        3: { fontSize: \\"2rem\\", fontWeight: 400 },
        4: { fontSize: \\"1.5rem\\", fontWeight: 500 },
        5: { fontSize: \\"1.25rem\\", fontWeight: 600 },
        6: { fontSize: \\"1rem\\", fontWeight: 700 },
        color: \\"hsl(210, 50%, 10%)\\",
        lineHeight: 1.25,
      },
      icon: {
        lineHeight: 1,
        height: \\"1rem\\",
        large: { height: \\"1.25rem\\" },
        small: { height: \\"0.875rem\\" },
      },
      image: {
        maxWidth: \\"100%\\",
        height: \\"auto\\",
        objectFit: \\"initial\\",
        objectPosition: \\"initial\\",
      },
      link: {
        active: { color: \\"hsl(190, 100%, 15%)\\" },
        color: \\"hsl(190, 95%, 30%)\\",
        focus: { color: \\"hsl(190, 100%, 20%)\\" },
        hover: { color: \\"hsl(190, 100%, 20%)\\" },
        large: { fontSize: \\"1.25rem\\" },
        small: { fontSize: \\"0.875rem\\" },
        visited: { color: \\"hsl(210, 6%, 70%)\\" },
      },
      pagination: {
        current: {
          color: \\"#fff\\",
          fontSize: \\"0.875rem\\",
          backgroundColor: \\"rgba(0, 0, 0, 0.4)\\",
        },
        button: {
          color: \\"inherit\\",
          fontWeight: \\"inherit\\",
          paddingTop: \\"0\\",
          paddingRight: \\"6px\\",
          paddingBottom: \\"0\\",
          paddingLeft: \\"6px\\",
          transition: \\"background-color 250ms\\",
          hover: { backgroundColor: \\"rgba(0, 0, 0, 0.1)\\" },
          disabled: { opacity: \\"0.4\\" },
        },
        ellipsis: { paddingRight: \\"8px\\", paddingLeft: \\"8px\\" },
        itemContainer: { marginLeft: \\"4px\\", marginRight: \\"4px\\" },
        itemShared: { height: \\"2rem\\", minWidth: \\"2rem\\", borderRadius: \\"1rem\\" },
      },
      placeholder: {
        borderRadius: \\"0.25rem\\",
        transitionDuration: \\"500ms\\",
        startColor: \\"hsl(210, 5%, 95%)\\",
        endColor: \\"hsl(210, 5%, 90%)\\",
        small: { height: \\"0.75rem\\" },
        default: { height: \\"1rem\\" },
        large: { height: \\"1.5rem\\" },
      },
      radio: {
        alignItems: \\"center\\",
        justifyContent: \\"flex-start\\",
        gap: \\"inherit\\",
        button: {
          alignItems: \\"center\\",
          justifyContent: \\"center\\",
          width: \\"1rem\\",
          height: \\"1rem\\",
          boxSizing: \\"border-box\\",
          borderWidth: \\"2px\\",
          borderStyle: \\"solid\\",
          borderRadius: \\"50%\\",
          borderColor: \\"hsl(210, 6%, 70%)\\",
          color: \\"#fff\\",
          backgroundColor: \\"#fff\\",
          transitionProperty: \\"all\\",
          transitionDuration: \\"250ms\\",
          outlineColor: \\"transparent\\",
          outlineStyle: \\"solid\\",
          outlineWidth: \\"2px\\",
          outlineOffset: \\"2px\\",
          before: {
            content: '\\"\\"',
            display: \\"inline-block\\",
            width: \\"50%\\",
            height: \\"50%\\",
            borderRadius: \\"50%\\",
            backgroundColor: \\"currentColor\\",
          },
          small: { width: \\"0.75rem\\", height: \\"0.75rem\\" },
          large: { width: \\"1.25rem\\", height: \\"1.25rem\\" },
          _checked: {
            color: \\"hsl(0, 50%, 50%)\\",
            _disabled: { color: \\"hsl(210, 5%, 80%)\\" },
          },
          _focus: {
            borderColor: \\"hsl(190, 100%, 15%)\\",
            boxShadow: \\"0 0 0 1px hsl(190, 100%, 15%)\\",
          },
          _disabled: {
            borderColor: \\"#e9ecf0\\",
            backgroundColor: \\"#fff\\",
            color: \\"#fff\\",
          },
        },
        label: { _disabled: { color: \\"#d6dbe2\\" } },
      },
      rating: {
        large: { size: \\"3rem\\" },
        default: { size: \\"1.5rem\\" },
        small: { size: \\"0.875rem\\" },
        filled: { color: \\"hsl(30, 75%, 75%)\\" },
        empty: { color: \\"hsl(210, 6%, 70%)\\" },
      },
      select: {
        paddingInlineEnd: \\"3.0rem\\",
        wrapper: { display: \\"block\\", position: \\"relative\\", cursor: \\"pointer\\" },
        iconWrapper: {
          position: \\"absolute\\",
          height: \\"50%\\",
          top: \\"25%\\",
          right: \\"1rem\\",
          pointerEvents: \\"none\\",
        },
      },
      switchfield: {
        disabled: { opacity: \\"0.3\\" },
        focused: { shadow: \\"0 0 4px #000\\" },
        label: { padding: \\"0.5rem\\" },
        large: { font: { size: \\"1.25rem\\" } },
        small: { font: { size: \\"0.875rem\\" } },
        thumb: {
          background: \\"#fff\\",
          border: { color: \\"hsl(210, 5%, 90%)\\", radius: \\"8rem\\" },
          checked: { transform: \\"translateX(1em)\\" },
          transition: { duration: \\"250ms\\" },
          width: \\"1em\\",
        },
        track: {
          background: \\"hsl(210, 5%, 80%)\\",
          border: { radius: \\"8rem\\" },
          checked: { background: \\"hsl(220, 70%, 70%)\\" },
          height: \\"1em\\",
          padding: \\"2px\\",
          transition: { duration: \\"100ms\\" },
          width: \\"2.0em\\",
        },
      },
      tabs: {
        backgroundColor: \\"transparent\\",
        borderColor: \\"hsl(210, 5%, 80%)\\",
        borderStyle: \\"solid\\",
        borderWidth: \\"2px\\",
        item: {
          backgroundColor: \\"transparent\\",
          borderColor: \\"hsl(210, 5%, 80%)\\",
          borderStyle: \\"solid\\",
          borderWidth: \\"2px\\",
          color: \\"hsl(210, 10%, 40%)\\",
          fontSize: \\"1rem\\",
          fontWeight: 700,
          padding: \\"0.75rem 1rem\\",
          textAlign: \\"center\\",
          transitionDuration: \\"250ms\\",
          _hover: { color: \\"hsl(190, 100%, 20%)\\" },
          _focus: { color: \\"hsl(190, 100%, 20%)\\" },
          _active: {
            color: \\"hsl(190, 95%, 30%)\\",
            borderColor: \\"hsl(190, 95%, 30%)\\",
            backgroundColor: \\"transparent\\",
          },
          _disabled: {
            color: \\"hsl(210, 6%, 70%)\\",
            backgroundColor: \\"transparent\\",
            borderColor: \\"hsl(210, 5%, 90%)\\",
          },
        },
      },
      text: {
        color: \\"hsl(210, 50%, 10%)\\",
        primary: { color: \\"hsl(210, 50%, 10%)\\" },
        secondary: { color: \\"hsl(210, 10%, 40%)\\" },
        tertiary: { color: \\"hsl(210, 6%, 70%)\\" },
        error: { color: \\"hsl(0, 95%, 30%)\\" },
        warning: { color: \\"hsl(30, 95%, 30%)\\" },
        success: { color: \\"hsl(130, 95%, 30%)\\" },
        info: { color: \\"hsl(220, 95%, 30%)\\" },
      },
    },
    borderWidths: { small: \\"1px\\", medium: \\"2px\\", large: \\"3px\\" },
    breakpoints: {
      values: { base: 0, small: 30, medium: 48, large: 62, xl: 80, xxl: 96 },
      unit: \\"em\\",
      defaultBreakpoint: \\"base\\",
    },
    colors: {
      red: {
        10: \\"hsl(0, 75%, 95%)\\",
        20: \\"hsl(0, 75%, 85%)\\",
        40: \\"hsl(0, 75%, 75%)\\",
        60: \\"hsl(0, 50%, 50%)\\",
        80: \\"hsl(0, 95%, 30%)\\",
        90: \\"hsl(0, 100%, 20%)\\",
        100: \\"hsl(0, 100%, 15%)\\",
      },
      orange: {
        10: \\"hsl(30, 75%, 95%)\\",
        20: \\"hsl(30, 75%, 85%)\\",
        40: \\"hsl(30, 75%, 75%)\\",
        60: \\"hsl(30, 50%, 50%)\\",
        80: \\"hsl(30, 95%, 30%)\\",
        90: \\"hsl(30, 100%, 20%)\\",
        100: \\"hsl(30, 100%, 15%)\\",
      },
      yellow: {
        10: \\"hsl(60, 75%, 95%)\\",
        20: \\"hsl(60, 75%, 85%)\\",
        40: \\"hsl(60, 75%, 75%)\\",
        60: \\"hsl(60, 50%, 50%)\\",
        80: \\"hsl(60, 95%, 30%)\\",
        90: \\"hsl(60, 100%, 20%)\\",
        100: \\"hsl(60, 100%, 15%)\\",
      },
      green: {
        10: \\"hsl(130, 75%, 95%)\\",
        20: \\"hsl(130, 75%, 85%)\\",
        40: \\"hsl(130, 75%, 75%)\\",
        60: \\"hsl(130, 50%, 50%)\\",
        80: \\"hsl(130, 95%, 30%)\\",
        90: \\"hsl(130, 100%, 20%)\\",
        100: \\"hsl(130, 100%, 15%)\\",
      },
      teal: {
        10: \\"hsl(190, 75%, 95%)\\",
        20: \\"hsl(190, 75%, 85%)\\",
        40: \\"hsl(190, 70%, 70%)\\",
        60: \\"hsl(190, 50%, 50%)\\",
        80: \\"hsl(190, 95%, 30%)\\",
        90: \\"hsl(190, 100%, 20%)\\",
        100: \\"hsl(190, 100%, 15%)\\",
      },
      blue: {
        10: \\"hsl(220, 95%, 95%)\\",
        20: \\"hsl(220, 85%, 85%)\\",
        40: \\"hsl(220, 70%, 70%)\\",
        60: \\"hsl(220, 50%, 50%)\\",
        80: \\"hsl(220, 95%, 30%)\\",
        90: \\"hsl(220, 100%, 20%)\\",
        100: \\"hsl(220, 100%, 15%)\\",
      },
      purple: {
        10: \\"hsl(300, 95%, 95%)\\",
        20: \\"hsl(300, 85%, 85%)\\",
        40: \\"hsl(300, 70%, 70%)\\",
        60: \\"hsl(300, 50%, 50%)\\",
        80: \\"hsl(300, 95%, 30%)\\",
        90: \\"hsl(300, 100%, 20%)\\",
        100: \\"hsl(300, 100%, 15%)\\",
      },
      pink: {
        10: \\"hsl(340, 95%, 95%)\\",
        20: \\"hsl(340, 90%, 85%)\\",
        40: \\"hsl(340, 70%, 70%)\\",
        60: \\"hsl(340, 50%, 50%)\\",
        80: \\"hsl(340, 95%, 30%)\\",
        90: \\"hsl(340, 100%, 20%)\\",
        100: \\"hsl(340, 100%, 15%)\\",
      },
      neutral: {
        10: \\"hsl(210, 5%, 95%)\\",
        20: \\"hsl(210, 5%, 90%)\\",
        40: \\"hsl(210, 5%, 80%)\\",
        60: \\"hsl(210, 6%, 70%)\\",
        80: \\"hsl(210, 10%, 40%)\\",
        90: \\"hsl(210, 25%, 25%)\\",
        100: \\"hsl(210, 50%, 10%)\\",
      },
      brand: {
        primary: {
          10: \\"hsl(190, 75%, 95%)\\",
          20: \\"hsl(190, 75%, 85%)\\",
          40: \\"hsl(190, 70%, 70%)\\",
          60: \\"hsl(190, 50%, 50%)\\",
          80: \\"hsl(190, 95%, 30%)\\",
          90: \\"hsl(190, 100%, 20%)\\",
          100: \\"hsl(190, 100%, 15%)\\",
        },
        secondary: {
          10: \\"hsl(300, 95%, 95%)\\",
          20: \\"hsl(300, 85%, 85%)\\",
          40: \\"hsl(300, 70%, 70%)\\",
          60: \\"hsl(300, 50%, 50%)\\",
          80: \\"hsl(300, 95%, 30%)\\",
          90: \\"hsl(300, 100%, 20%)\\",
          100: \\"hsl(300, 100%, 15%)\\",
        },
      },
      font: {
        primary: \\"hsl(210, 50%, 10%)\\",
        secondary: \\"hsl(210, 10%, 40%)\\",
        tertiary: \\"hsl(210, 6%, 70%)\\",
        disabled: \\"hsl(210, 6%, 70%)\\",
        inverse: \\"#fff\\",
        interactive: \\"hsl(190, 95%, 30%)\\",
        hover: \\"hsl(190, 100%, 20%)\\",
        focus: \\"hsl(190, 100%, 20%)\\",
        active: \\"hsl(190, 100%, 15%)\\",
        info: \\"hsl(220, 95%, 30%)\\",
        warning: \\"hsl(30, 95%, 30%)\\",
        error: \\"hsl(0, 95%, 30%)\\",
        success: \\"hsl(130, 95%, 30%)\\",
      },
      background: {
        primary: \\"#fff\\",
        secondary: \\"hsl(210, 5%, 95%)\\",
        tertiary: \\"hsl(210, 5%, 90%)\\",
        disabled: \\"hsl(210, 5%, 95%)\\",
        info: \\"hsl(220, 85%, 85%)\\",
        warning: \\"hsl(30, 75%, 85%)\\",
        error: \\"hsl(0, 75%, 85%)\\",
        success: \\"hsl(130, 75%, 85%)\\",
      },
      border: {
        primary: \\"hsl(210, 6%, 70%)\\",
        secondary: \\"hsl(210, 5%, 80%)\\",
        tertiary: \\"hsl(210, 5%, 90%)\\",
      },
      focus: \\"hsl(190, 100%, 15%)\\",
      error: \\"hsl(0, 95%, 30%)\\",
      shadow: {
        primary: \\"hsl(210, 50%, 10%, 0.25)\\",
        secondary: \\"hsl(210, 50%, 10%, 0.15)\\",
        tertiary: \\"hsl(210, 50%, 10%, 0.05)\\",
      },
      black: \\"#000\\",
      white: \\"#fff\\",
      transparent: \\"transparent\\",
      icon: { filled: \\"hsl(30, 75%, 75%)\\", empty: \\"hsl(210, 6%, 70%)\\" },
    },
    fonts: {
      default: {
        variable:
          \\"'InterVariable', -apple-system, BlinkMacSystemFont,\\\\n        'Helvetica Neue', 'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans',\\\\n        sans-serif\\",
        static:
          \\"'Inter', -apple-system, BlinkMacSystemFont, 'Helvetica Neue',\\\\n        'Segoe UI', Oxygen, Ubuntu, Cantarell, 'Open Sans', sans-serif\\",
      },
    },
    fontSizes: {
      xs: \\"0.75rem\\",
      small: \\"0.875rem\\",
      medium: \\"1rem\\",
      large: \\"1.25rem\\",
      xl: \\"1.5rem\\",
      xxl: \\"2rem\\",
      xxxl: \\"3rem\\",
      xxxxl: \\"5rem\\",
    },
    fontWeights: {
      hairline: 100,
      thin: 200,
      light: 300,
      normal: 400,
      medium: 500,
      semibold: 600,
      bold: 700,
      extrabold: 800,
      black: 900,
    },
    lineHeights: { small: \\"2\\", medium: \\"2.25\\", large: \\"2.5\\" },
    opacities: {
      0: \\"0\\",
      10: \\"0.1\\",
      20: \\"0.2\\",
      30: \\"0.3\\",
      40: \\"0.4\\",
      50: \\"0.5\\",
      60: \\"0.6\\",
      70: \\"0.7\\",
      80: \\"0.8\\",
      90: \\"0.9\\",
      100: \\"1\\",
    },
    outlineOffsets: { small: \\"1px\\", medium: \\"2px\\", large: \\"3px\\" },
    outlineWidths: { small: \\"1px\\", medium: \\"2px\\", large: \\"3px\\" },
    radii: {
      small: \\"0.125rem\\",
      medium: \\"0.25rem\\",
      large: \\"1rem\\",
      xl: \\"2rem\\",
      xxl: \\"4rem\\",
      xxxl: \\"8rem\\",
    },
    shadows: {
      small: \\"0 2px 4px hsl(210, 50%, 10%, 0.05)\\",
      medium: \\"0 2px 6px hsl(210, 50%, 10%, 0.15)\\",
      large: \\"0 4px 12px hsl(210, 50%, 10%, 0.25)\\",
      switch: \\"0 0 4px #000\\",
    },
    space: {
      xxs: \\"0.25rem\\",
      xs: \\"0.5rem\\",
      small: \\"0.75rem\\",
      medium: \\"1rem\\",
      large: \\"1.5rem\\",
      xl: \\"2.0rem\\",
      xxl: \\"3.0rem\\",
      xxxl: \\"4.5rem\\",
      relative: {
        xxs: \\"0.25em\\",
        xs: \\"0.5em\\",
        small: \\"0.75em\\",
        medium: \\"1em\\",
        large: \\"1.5em\\",
        xl: \\"2.0em\\",
        xxl: \\"3.0em\\",
        xxxl: \\"4.5em\\",
      },
    },
    time: { transition: { short: \\"100ms\\", medium: \\"250ms\\", long: \\"500ms\\" } },
    transforms: {
      slideX: {
        small: \\"translateX(0.5em)\\",
        medium: \\"translateX(1em)\\",
        large: \\"translateX(2em)\\",
      },
    },
    types: {
      null: null,
      string: \\"test\\",
      number: 10,
      boolean: { t: true, false: false },
      object: { object: { test: \\"test\\" }, array: [\\"test\\"] },
    },
  };
  const displayName =
    WrappedComponent.displayName || WrappedComponent.name || \\"Component\\";
  const ComponentWithTheme = (props: T) => {
    const theming = extendTheming(theme);
    return (
      <AmplifyProvider theming={theming}>
        <WrappedComponent {...props} />
      </AmplifyProvider>
    );
  };
  ComponentWithTheme.displayName = displayName;
  return ComponentWithTheme;
}
"
`;

exports[`amplify render tests user specific attributes should render user specific attributes 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  Flex,
  Image,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type ProfileProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function Profile(props: ProfileProps): JSX.Element {
  const {} = props;
  const {
    attributes: {
      username,
      picture: userImage,
      [\\"custom:favorite_icecream\\"]: customUserAttributeIcecream,
    },
  } = useAuthenticatedUser();
  return (
    <Flex {...props} {...getOverrideProps(props.overrides, \\"Flex\\")}>
      <Image
        src={userImage}
        {...getOverrideProps(props.overrides, \\"Flex.Image\\")}
      ></Image>
      <Button
        label={username}
        {...getOverrideProps(props.overrides, \\"Flex.Button\\")}
      ></Button>
      <Button
        label={customUserAttributeIcecream}
        {...getOverrideProps(props.overrides, \\"Flex.Button\\")}
      ></Button>
    </Flex>
  );
}
"
`;
