// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`amplify render tests basic component tests should generate a simple box component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  View,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type TestProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function Test(props: TestProps): JSX.Element {
  return (
    <View
      fontFamily=\\"Times New Roman\\"
      fontSize=\\"20px\\"
      {...props}
      {...getOverrideProps(props.overrides, \\"Box\\")}
    ></View>
  );
}
"
`;

exports[`amplify render tests basic component tests should generate a simple button component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function CustomButton(props: CustomButtonProps): JSX.Element {
  return (
    <Button
      color=\\"#ff0000\\"
      width=\\"20\\"
      {...props}
      {...getOverrideProps(props.overrides, \\"Button\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests basic component tests should generate a simple text component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  Text,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type CustomTextProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function CustomText(props: CustomTextProps): JSX.Element {
  return (
    <Text
      color=\\"#ff0000\\"
      width=\\"20px\\"
      {...props}
      {...getOverrideProps(props.overrides, \\"Text\\")}
    >
      Text Value
    </Text>
  );
}
"
`;

exports[`amplify render tests complex component tests should generate a button within a box component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  View,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type BoxWithButtonProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function BoxWithButton(props: BoxWithButtonProps): JSX.Element {
  return (
    <View {...props} {...getOverrideProps(props.overrides, \\"Box\\")}>
      <Button
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...getOverrideProps(props.overrides, \\"Box.Button\\")}
      ></Button>
    </View>
  );
}
"
`;

exports[`amplify render tests complex component tests should generate a component with custom child 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  CustomButton,
  EscapeHatchProps,
  View,
  findChildOverrides,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type BoxWithCustomButtonProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function BoxWithCustomButton(
  props: BoxWithCustomButtonProps
): JSX.Element {
  return (
    <View {...props} {...getOverrideProps(props.overrides, \\"Box\\")}>
      <CustomButton
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...findChildOverrides(props.overrides, \\"CustomButton\\")}
      ></CustomButton>
    </View>
  );
}
"
`;

exports[`amplify render tests complex component tests should generate a component with exposeAs prop 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  View,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type BoxWithButtonProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function BoxWithButton(props: BoxWithButtonProps): JSX.Element {
  return (
    <View {...props} {...getOverrideProps(props.overrides, \\"Box\\")}>
      <Button
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...getOverrideProps(props.overrides, \\"Box.Button\\")}
      ></Button>
    </View>
  );
}
"
`;

exports[`amplify render tests component with binding should render build property on Text 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  Text,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type TextWithDataBindingProps = {
  textValue?: String,
} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function TextWithDataBinding(
  props: TextWithDataBindingProps
): JSX.Element {
  const { textValue } = props;
  return (
    <Text
      color=\\"#ff0000\\"
      width=\\"20px\\"
      {...props}
      {...getOverrideProps(props.overrides, \\"Text\\")}
    >
      {textValue}
    </Text>
  );
}
"
`;

exports[`amplify render tests component with data binding should add model imports 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User } from \\"../models\\";
import {
  Button,
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type ComponentWithDataBindingProps = {
  width?: Number,
  isDisabled?: Boolean,
  buttonUser?: User,
  buttonColor?: String,
} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function ComponentWithDataBinding(
  props: ComponentWithDataBindingProps
): JSX.Element {
  const { width, isDisabled, buttonUser, buttonColor } = props;
  const { buttonUser } = useDataStoreBinding({
    type: \\"record\\",
    model: User,
    criteria: buttonUserFilter,
  });
  return (
    <Button
      label={buttonUser.username || \\"hspain@gmail.com\\"}
      labelWidth={width}
      disabled={isDisabled}
      {...props}
      {...getOverrideProps(props.overrides, \\"Button\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests component with data binding should render collection data binding 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User, UserPreferences } from \\"../models\\";
import {
  Button,
  Collection,
  EscapeHatchProps,
  Flex,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type CollectionOfCustomButtonsProps = {
  width?: Number,
  backgroundColor?: String,
  buttonColor?: UserPreferences,
} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function CollectionOfCustomButtons(
  props: CollectionOfCustomButtonsProps
): JSX.Element {
  const { width, backgroundColor, buttonColor } = props;
  const buttonUserFilter = {
    and: [
      { field: \\"age\\", operand: \\"10\\", operator: \\"gt\\" },
      { field: \\"lastName\\", operand: \\"L\\", operator: \\"beginsWith\\" },
    ],
  };
  const { buttonUser } = useDataStoreBinding({
    type: \\"collection\\",
    model: User,
    criteria: buttonUserFilter,
  });
  const buttonColorFilter = {
    field: \\"userID\\",
    operand: \\"user@email.com\\",
    operator: \\"eq\\",
  };
  const { buttonColor } = useDataStoreBinding({
    type: \\"record\\",
    model: UserPreferences,
    criteria: buttonColorFilter,
  });
  return (
    <Collection
      type=\\"list\\"
      isPaginated={true}
      gap=\\"1.5rem\\"
      backgroundColor={backgroundColor}
      items={buttonUser}
      {...props}
      {...getOverrideProps(props.overrides, \\"Collection\\")}
    >
      {(item, index) => (
        <Flex {...getOverrideProps(props.overrides, \\"Collection.Flex\\")}>
          <Button
            label={item.username || \\"hspain@gmail.com\\"}
            labelWidth={width}
            backgroundColor={buttonColor.favoriteColor}
            disabled={isDisabled}
            {...getOverrideProps(props.overrides, \\"Collection.Flex.Button\\")}
          ></Button>
        </Flex>
      )}
    </Collection>
  );
}
"
`;

exports[`amplify render tests custom render config should render ES5 1`] = `
"var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
/* eslint-disable */
import React from \\"react\\";
import { Button, View, getOverrideProps } from \\"@aws-amplify/ui-react\\";
export default function BoxWithButton(props) {
  return React.createElement(
    View,
    __assign({}, props, getOverrideProps(props.overrides, \\"Box\\")),
    React.createElement(
      Button,
      __assign(
        { color: \\"#ff0000\\", width: \\"20px\\" },
        getOverrideProps(props.overrides, \\"Box.Button\\")
      )
    )
  );
}
"
`;

exports[`amplify render tests custom render config should render JSX 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { Button, View, getOverrideProps } from \\"@aws-amplify/ui-react\\";
export default function BoxWithButton(props) {
  return (
    <View {...props} {...getOverrideProps(props.overrides, \\"Box\\")}>
      <Button
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...getOverrideProps(props.overrides, \\"Box.Button\\")}
      ></Button>
    </View>
  );
}
"
`;

exports[`amplify render tests custom render config should render common JS 1`] = `
"\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
/* eslint-disable */
const react_1 = require(\\"react\\");
const ui_react_1 = require(\\"@aws-amplify/ui-react\\");
function BoxWithButton(props) {
  return react_1.default.createElement(
    ui_react_1.View,
    Object.assign(
      {},
      props,
      ui_react_1.getOverrideProps(props.overrides, \\"Box\\")
    ),
    react_1.default.createElement(
      ui_react_1.Button,
      Object.assign(
        { color: \\"#ff0000\\", width: \\"20px\\" },
        ui_react_1.getOverrideProps(props.overrides, \\"Box.Button\\")
      )
    )
  );
}
exports.default = BoxWithButton;
"
`;

exports[`amplify render tests sample code snippet tests should generate a sample code snippet for components 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  CustomButton,
  EscapeHatchProps,
  View,
  findChildOverrides,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type BoxWithButtonProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function BoxWithButton(props: BoxWithButtonProps): JSX.Element {
  return (
    <View padding-left {...props} {...getOverrideProps(props.overrides, \\"Box\\")}>
      <CustomButton
        color=\\"#ff0000\\"
        width=\\"20px\\"
        buttonText=\\"Click Me\\"
        {...findChildOverrides(props.overrides, \\"CustomButton\\")}
      ></CustomButton>
    </View>
  );
}
"
`;
