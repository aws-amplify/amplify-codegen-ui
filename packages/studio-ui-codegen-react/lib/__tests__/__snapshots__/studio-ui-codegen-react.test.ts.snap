// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`amplify render tests basic component tests should generate a simple box component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  View,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type TestProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function Test(props: TestProps): JSX.Element {
  return (
    <View
      fontFamily=\\"Times New Roman\\"
      fontSize=\\"20px\\"
      {...props}
      {...getOverrideProps(props.overrides, \\"Box\\")}
    ></View>
  );
}
"
`;

exports[`amplify render tests basic component tests should generate a simple button component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function CustomButton(props: CustomButtonProps): JSX.Element {
  return (
    <Button
      color=\\"#ff0000\\"
      width=\\"20\\"
      {...props}
      {...getOverrideProps(props.overrides, \\"Button\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests basic component tests should generate a simple text component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  Text,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type CustomTextProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function CustomText(props: CustomTextProps): JSX.Element {
  return (
    <Text
      color=\\"#ff0000\\"
      width=\\"20px\\"
      {...props}
      {...getOverrideProps(props.overrides, \\"Text\\")}
    >
      Text Value
    </Text>
  );
}
"
`;

exports[`amplify render tests collection should render collection with data binding 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User, UserPreferences } from \\"../models\\";
import {
  Button,
  Collection,
  EscapeHatchProps,
  Flex,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type CollectionOfCustomButtonsProps = {
  width?: Number,
  backgroundColor?: String,
  buttonColor?: UserPreferences,
  items?: any[],
} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function CollectionOfCustomButtons(
  props: CollectionOfCustomButtonsProps
): JSX.Element {
  const { width, backgroundColor, buttonColor, items } = props;
  const buttonUserFilter = {
    and: [
      { field: \\"age\\", operand: \\"10\\", operator: \\"gt\\" },
      { field: \\"lastName\\", operand: \\"L\\", operator: \\"beginsWith\\" },
    ],
  };
  const buttonUser =
    items !== undefined
      ? items
      : useDataStoreBinding({
          type: \\"collection\\",
          model: User,
          criteria: buttonUserFilter,
        }).items;
  const buttonColorFilter = {
    field: \\"userID\\",
    operand: \\"user@email.com\\",
    operator: \\"eq\\",
  };
  const { item: buttonColor } = useDataStoreBinding({
    type: \\"record\\",
    model: UserPreferences,
    criteria: buttonColorFilter,
  });
  return (
    <Collection
      type=\\"list\\"
      isPaginated={true}
      gap=\\"1.5rem\\"
      backgroundColor={backgroundColor}
      items={buttonUser}
      {...props}
      {...getOverrideProps(props.overrides, \\"Collection\\")}
    >
      {(item, index) => (
        <Flex {...getOverrideProps(props.overrides, \\"Collection.Flex\\")}>
          <Button
            label={item.username || \\"hspain@gmail.com\\"}
            labelWidth={width}
            backgroundColor={buttonColor.favoriteColor}
            disabled={isDisabled}
            {...getOverrideProps(props.overrides, \\"Collection.Flex.Button\\")}
          ></Button>
        </Flex>
      )}
    </Collection>
  );
}
"
`;

exports[`amplify render tests collection should render collection with data binding with no predicate 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Collection,
  EscapeHatchProps,
  ListingCard,
  findChildOverrides,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";
import { UntitledModel } from \\"../models\\";

export type ListingCardCollectionProps = {
  items?: any[],
} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function ListingCardCollection(
  props: ListingCardCollectionProps
): JSX.Element {
  const { items } = props;
  const bananas =
    items !== undefined
      ? items
      : useDataStoreBinding({
          type: \\"collection\\",
          model: UntitledModel,
        }).items;
  return (
    <Collection
      isPaginated=\\"true\\"
      collectionType=\\"grid\\"
      type=\\"list\\"
      columns=\\"2\\"
      order=\\"left-to-right\\"
      items={bananas}
      {...props}
      {...getOverrideProps(props.overrides, \\"Collection\\")}
    >
      {(item, index) => (
        <ListingCard
          marginRight=\\"0\\"
          marginBottom=\\"0\\"
          marginTop=\\"0\\"
          marginLeft=\\"0\\"
          {...findChildOverrides(props.overrides, \\"ListingCard\\")}
        ></ListingCard>
      )}
    </Collection>
  );
}
"
`;

exports[`amplify render tests collection should render collection without data binding 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Collection,
  EscapeHatchProps,
  ListingCard,
  findChildOverrides,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type ListingCardCollectionProps = {
  items?: any[],
} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function ListingCardCollection(
  props: ListingCardCollectionProps
): JSX.Element {
  const { items } = props;
  return (
    <Collection
      type=\\"list\\"
      isPaginated=\\"true\\"
      items={items}
      {...props}
      {...getOverrideProps(props.overrides, \\"Collection\\")}
    >
      {(item, index) => (
        <ListingCard
          {...findChildOverrides(props.overrides, \\"ListingCard\\")}
        ></ListingCard>
      )}
    </Collection>
  );
}
"
`;

exports[`amplify render tests complex component tests should generate a button within a box component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  View,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type BoxWithButtonProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function BoxWithButton(props: BoxWithButtonProps): JSX.Element {
  return (
    <View {...props} {...getOverrideProps(props.overrides, \\"Box\\")}>
      <Button
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...getOverrideProps(props.overrides, \\"Box.Button\\")}
      ></Button>
    </View>
  );
}
"
`;

exports[`amplify render tests complex component tests should generate a component with custom child 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  CustomButton,
  EscapeHatchProps,
  View,
  findChildOverrides,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type BoxWithCustomButtonProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function BoxWithCustomButton(
  props: BoxWithCustomButtonProps
): JSX.Element {
  return (
    <View {...props} {...getOverrideProps(props.overrides, \\"Box\\")}>
      <CustomButton
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...findChildOverrides(props.overrides, \\"CustomButton\\")}
      ></CustomButton>
    </View>
  );
}
"
`;

exports[`amplify render tests complex component tests should generate a component with exposeAs prop 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  View,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type BoxWithButtonProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function BoxWithButton(props: BoxWithButtonProps): JSX.Element {
  return (
    <View {...props} {...getOverrideProps(props.overrides, \\"Box\\")}>
      <Button
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...getOverrideProps(props.overrides, \\"Box.Button\\")}
      ></Button>
    </View>
  );
}
"
`;

exports[`amplify render tests component with binding should render build property on Text 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  Text,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type TextWithDataBindingProps = {
  textValue?: String,
} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function TextWithDataBinding(
  props: TextWithDataBindingProps
): JSX.Element {
  const { textValue } = props;
  return (
    <Text
      color=\\"#ff0000\\"
      width=\\"20px\\"
      {...props}
      {...getOverrideProps(props.overrides, \\"Text\\")}
    >
      {textValue}
    </Text>
  );
}
"
`;

exports[`amplify render tests component with data binding should add model imports 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User } from \\"../models\\";
import {
  Button,
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type ComponentWithDataBindingProps = {
  width?: Number,
  isDisabled?: Boolean,
  buttonUser?: User,
  buttonColor?: String,
} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function ComponentWithDataBinding(
  props: ComponentWithDataBindingProps
): JSX.Element {
  const { width, isDisabled, buttonUser, buttonColor } = props;
  return (
    <Button
      label={buttonUser.username || \\"hspain@gmail.com\\"}
      labelWidth={width}
      disabled={isDisabled}
      {...props}
      {...getOverrideProps(props.overrides, \\"Button\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests component with data binding should not have useDataStoreBinding when there is no predicate 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { UntitledModel } from \\"../models\\";
import {
  EscapeHatchProps,
  Flex,
  Text,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type SectionHeadingProps = {
  newProp6fd1?: UntitledModel,
} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function SectionHeading(
  props: SectionHeadingProps
): JSX.Element {
  const { newProp6fd1 } = props;
  return (
    <Flex
      padding=\\"0px 0px 10px 0px\\"
      backgroundColor=\\"rgb(255,255,255)\\"
      direction=\\"column\\"
      {...props}
      {...getOverrideProps(props.overrides, \\"Flex\\")}
    >
      <Flex
        tes={newProp6fd1.untitledfield}
        {...getOverrideProps(props.overrides, \\"Flex.Flex\\")}
      >
        <Text
          fontFamily=\\"Inter\\"
          color=\\"rgb(15.539060980081558,29.73937589675188,47.8125)\\"
          textAlign=\\"left\\"
          fontSize=\\"48px\\"
          lineHeight=\\"48px\\"
          fontWeight=\\"300\\"
          {...getOverrideProps(props.overrides, \\"Flex.Flex.Text\\")}
        >
          Heading 2
        </Text>
      </Flex>
      <Text
        fontFamily=\\"Inter\\"
        color=\\"rgb(0,0,0)\\"
        textAlign=\\"left\\"
        fontSize=\\"32px\\"
        lineHeight=\\"48px\\"
        fontWeight=\\"400\\"
        {...getOverrideProps(props.overrides, \\"Flex.Text\\")}
      >
        subtitle
      </Text>
    </Flex>
  );
}
"
`;

exports[`amplify render tests concat and conditional transform should render component with concatenation prop 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User } from \\"../models\\";
import {
  Button,
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = {
  width?: Number,
  buttonUser?: User,
  buttonColor?: String,
} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function CustomButton(props: CustomButtonProps): JSX.Element {
  const { width, buttonUser, buttonColor } = props;
  return (
    <Button
      label={\`\${buttonUser.firstname || \\"Harrison\\"}\${\\" \\"}\${
        buttonUser.lastname || \\"Spain\\"
      }\`}
      labelWidth={width}
      {...props}
      {...getOverrideProps(props.overrides, \\"Button\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests concat and conditional transform should render component with conditional prop 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User } from \\"../models\\";
import {
  Button,
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = {
  width?: Number,
  buttonUser?: User,
  buttonColor?: String,
} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function CustomButton(props: CustomButtonProps): JSX.Element {
  const { width, buttonUser, buttonColor } = props;
  return (
    <Button
      label={\`\${buttonUser.firstname || \\"Harrison\\"}\${\\" \\"}\${
        buttonUser.lastname || \\"Spain\\"
      }\`}
      labelWidth={width}
      disabled={buttonUser.isLoggedIn === true ? true : false}
      prompt={
        buttonUser.age > 18
          ? \`\${buttonUser.firstname}\${\\", cast your vote.\\"}\`
          : \\"Sorry you cannot vote\\"
      }
      backgroundColor={
        buttonUser.isLoggedIn === true
          ? buttonUser.loggedInColor
          : buttonUser.loggedOutColor
      }
      {...props}
      {...getOverrideProps(props.overrides, \\"Button\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests custom render config should render ES5 1`] = `
"var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
/* eslint-disable */
import React from \\"react\\";
import { Button, View, getOverrideProps } from \\"@aws-amplify/ui-react\\";
export default function BoxWithButton(props) {
  return React.createElement(
    View,
    __assign({}, props, getOverrideProps(props.overrides, \\"Box\\")),
    React.createElement(
      Button,
      __assign(
        { color: \\"#ff0000\\", width: \\"20px\\" },
        getOverrideProps(props.overrides, \\"Box.Button\\")
      )
    )
  );
}
"
`;

exports[`amplify render tests custom render config should render JSX 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { Button, View, getOverrideProps } from \\"@aws-amplify/ui-react\\";
export default function BoxWithButton(props) {
  return (
    <View {...props} {...getOverrideProps(props.overrides, \\"Box\\")}>
      <Button
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...getOverrideProps(props.overrides, \\"Box.Button\\")}
      ></Button>
    </View>
  );
}
"
`;

exports[`amplify render tests custom render config should render common JS 1`] = `
"\\"use strict\\";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, \\"__esModule\\", { value: true });
/* eslint-disable */
const react_1 = __importDefault(require(\\"react\\"));
const ui_react_1 = require(\\"@aws-amplify/ui-react\\");
function BoxWithButton(props) {
  return react_1.default.createElement(
    ui_react_1.View,
    Object.assign(
      {},
      props,
      ui_react_1.getOverrideProps(props.overrides, \\"Box\\")
    ),
    react_1.default.createElement(
      ui_react_1.Button,
      Object.assign(
        { color: \\"#ff0000\\", width: \\"20px\\" },
        ui_react_1.getOverrideProps(props.overrides, \\"Box.Button\\")
      )
    )
  );
}
exports.default = BoxWithButton;
"
`;

exports[`amplify render tests sample code snippet tests should generate a sample code snippet for components 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  CustomButton,
  EscapeHatchProps,
  View,
  findChildOverrides,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type BoxWithButtonProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function BoxWithButton(props: BoxWithButtonProps): JSX.Element {
  return (
    <View padding-left {...props} {...getOverrideProps(props.overrides, \\"Box\\")}>
      <CustomButton
        color=\\"#ff0000\\"
        width=\\"20px\\"
        buttonText=\\"Click Me\\"
        {...findChildOverrides(props.overrides, \\"CustomButton\\")}
      ></CustomButton>
    </View>
  );
}
"
`;

exports[`amplify render tests theme should render the theme 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { useEffect } from \\"react\\";
import {
  AmplifyProvider,
  DeepPartial,
  Theme,
  extendTheming,
} from \\"@aws-amplify/ui-react\\";
export default function withTheme<T>(
  WrappedComponent: React.ReactComponent<T>
) {
  const theme = {
    components: {
      alert: {
        backgroundColor: \\"hsl(210, 5%, 90%)\\",
        padding: \\"0.75rem 1rem\\",
        info: { backgroundColor: \\"hsl(220, 85%, 85%)\\" },
        error: { backgroundColor: \\"hsl(0, 75%, 85%)\\" },
        warning: { backgroundColor: \\"hsl(30, 75%, 85%)\\" },
        success: { backgroundColor: \\"hsl(130, 75%, 85%)\\" },
      },
    },
    borderWidths: { small: \\"1px\\", medium: \\"2px\\", large: \\"3px\\" },
    breakpoints: {
      values: { base: 0, small: 30, medium: 48, large: 62, xl: 80, xxl: 96 },
      unit: \\"em\\",
      defaultBreakpoint: \\"base\\",
    },
    testAllTypes: {
      null: null,
      string: \\"test\\",
      number: 10,
      boolean: { t: true, false: false },
      object: { object: { test: \\"test\\" }, array: [\\"test\\"] },
    },
  };
  const displayName =
    WrappedComponent.displayName || WrappedComponent.name || \\"Component\\";
  const ComponentWithTheme = (props: T) => {
    const theming = extendTheming(theme);
    useEffect(() => {
      Object.entries(theming.CSSVariables).forEach(([key, value]) => {
        document.documentElement.style.setProperty(key, value);
      });
    });
    return (
      <AmplifyProvider theming={theming}>
        <WrappedComponent {...props} />
      </AmplifyProvider>
    );
  };
  ComponentWithTheme.displayName = displayName;
  return ComponentWithTheme;
}
"
`;

exports[`amplify render tests theme should render the theme with ES5 1`] = `
"var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
/* eslint-disable */
import React from \\"react\\";
import { useEffect } from \\"react\\";
import { AmplifyProvider, extendTheming } from \\"@aws-amplify/ui-react\\";
export default function withTheme(WrappedComponent) {
  var theme = {
    components: {
      alert: {
        backgroundColor: \\"hsl(210, 5%, 90%)\\",
        padding: \\"0.75rem 1rem\\",
        info: { backgroundColor: \\"hsl(220, 85%, 85%)\\" },
        error: { backgroundColor: \\"hsl(0, 75%, 85%)\\" },
        warning: { backgroundColor: \\"hsl(30, 75%, 85%)\\" },
        success: { backgroundColor: \\"hsl(130, 75%, 85%)\\" },
      },
    },
    borderWidths: { small: \\"1px\\", medium: \\"2px\\", large: \\"3px\\" },
    breakpoints: {
      values: { base: 0, small: 30, medium: 48, large: 62, xl: 80, xxl: 96 },
      unit: \\"em\\",
      defaultBreakpoint: \\"base\\",
    },
    testAllTypes: {
      null: null,
      string: \\"test\\",
      number: 10,
      boolean: { t: true, false: false },
      object: { object: { test: \\"test\\" }, array: [\\"test\\"] },
    },
  };
  var displayName =
    WrappedComponent.displayName || WrappedComponent.name || \\"Component\\";
  var ComponentWithTheme = function (props) {
    var theming = extendTheming(theme);
    useEffect(function () {
      Object.entries(theming.CSSVariables).forEach(function (_a) {
        var key = _a[0],
          value = _a[1];
        document.documentElement.style.setProperty(key, value);
      });
    });
    return React.createElement(
      AmplifyProvider,
      { theming: theming },
      React.createElement(WrappedComponent, __assign({}, props))
    );
  };
  ComponentWithTheme.displayName = displayName;
  return ComponentWithTheme;
}
"
`;

exports[`amplify render tests theme should render the theme with TSX 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { useEffect } from \\"react\\";
import {
  AmplifyProvider,
  DeepPartial,
  Theme,
  extendTheming,
} from \\"@aws-amplify/ui-react\\";
export default function withTheme<T>(
  WrappedComponent: React.ReactComponent<T>
) {
  const theme = {
    components: {
      alert: {
        backgroundColor: \\"hsl(210, 5%, 90%)\\",
        padding: \\"0.75rem 1rem\\",
        info: { backgroundColor: \\"hsl(220, 85%, 85%)\\" },
        error: { backgroundColor: \\"hsl(0, 75%, 85%)\\" },
        warning: { backgroundColor: \\"hsl(30, 75%, 85%)\\" },
        success: { backgroundColor: \\"hsl(130, 75%, 85%)\\" },
      },
    },
    borderWidths: { small: \\"1px\\", medium: \\"2px\\", large: \\"3px\\" },
    breakpoints: {
      values: { base: 0, small: 30, medium: 48, large: 62, xl: 80, xxl: 96 },
      unit: \\"em\\",
      defaultBreakpoint: \\"base\\",
    },
    testAllTypes: {
      null: null,
      string: \\"test\\",
      number: 10,
      boolean: { t: true, false: false },
      object: { object: { test: \\"test\\" }, array: [\\"test\\"] },
    },
  };
  const displayName =
    WrappedComponent.displayName || WrappedComponent.name || \\"Component\\";
  const ComponentWithTheme = (props: T) => {
    const theming = extendTheming(theme);
    useEffect(() => {
      Object.entries(theming.CSSVariables).forEach(([key, value]) => {
        document.documentElement.style.setProperty(key, value);
      });
    });
    return (
      <AmplifyProvider theming={theming}>
        <WrappedComponent {...props} />
      </AmplifyProvider>
    );
  };
  ComponentWithTheme.displayName = displayName;
  return ComponentWithTheme;
}
"
`;

exports[`amplify render tests user specific attributes should render user specific attributes 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  Flex,
  Image,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type ProfileProps = {} & {
  overrides?: EscapeHatchProps | undefined | null,
};
export default function Profile(props: ProfileProps): JSX.Element {
  const {} = props;
  const {
    attributes: {
      username,
      picture: userImage,
      [\\"custom:favorite_icecream\\"]: customUserAttributeIcecream,
    },
  } = useAuthenticatedUser();
  return (
    <Flex {...props} {...getOverrideProps(props.overrides, \\"Flex\\")}>
      <Image
        src={userImage}
        {...getOverrideProps(props.overrides, \\"Flex.Image\\")}
      ></Image>
      <Button
        label={username}
        {...getOverrideProps(props.overrides, \\"Flex.Button\\")}
      ></Button>
      <Button
        label={customUserAttributeIcecream}
        {...getOverrideProps(props.overrides, \\"Flex.Button\\")}
      ></Button>
    </Flex>
  );
}
"
`;
