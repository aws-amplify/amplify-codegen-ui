// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`amplify render tests actions should render sign out action 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  Flex,
  Heading,
  findChildOverrides,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type SiteHeaderProps = {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function SiteHeader(props: SiteHeaderProps): React.ReactElement {
  const overrides = { ...props.overrides };
  const { invokeAction } = useActions({
    signOutAction: {
      type: \\"Amplify.Auth.SignOut\\",
      parameters: { global: true },
    },
  });
  return (
    <Flex
      direction=\\"row\\"
      justifyContent=\\"space-between\\"
      {...props}
      {...getOverrideProps(overrides, \\"Flex\\")}
    >
      <Heading
        level={1}
        children=\\"Title\\"
        {...findChildOverrides(props.overrides, \\"Heading\\")}
      ></Heading>
      <Button
        variation=\\"primary\\"
        children=\\"Log off\\"
        onClick={invokeAction(\\"signOutAction\\")}
        {...getOverrideProps(overrides, \\"Flex.Button\\")}
      ></Button>
    </Flex>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests basic component tests should generate a simple button component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function CustomButton(
  props: CustomButtonProps
): React.ReactElement {
  const overrides = { ...props.overrides };
  return (
    <Button
      color=\\"#ff0000\\"
      width=\\"20\\"
      {...props}
      {...getOverrideProps(overrides, \\"Button\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests basic component tests should generate a simple text component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  Text,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type CustomTextProps = {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function CustomText(props: CustomTextProps): React.ReactElement {
  const overrides = { ...props.overrides };
  return (
    <Text
      color=\\"#ff0000\\"
      width=\\"20px\\"
      {...props}
      {...getOverrideProps(overrides, \\"Text\\")}
    >
      {\\"Text Value\\"}
    </Text>
  );
}
"
`;

exports[`amplify render tests basic component tests should generate a simple view component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  View,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type TestProps = {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function Test(props: TestProps): React.ReactElement {
  const overrides = { ...props.overrides };
  return (
    <View
      fontFamily=\\"Times New Roman\\"
      fontSize=\\"20px\\"
      {...props}
      {...getOverrideProps(overrides, \\"View\\")}
    ></View>
  );
}
"
`;

exports[`amplify render tests collection should render collection with data binding 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User, UserPreferences } from \\"../models\\";
import {
  Button,
  Collection,
  EscapeHatchProps,
  Flex,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type CollectionOfCustomButtonsProps = {
  width?: Number;
  backgroundColor?: String;
  buttonColor?: UserPreferences;
  items?: any[];
} & {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function CollectionOfCustomButtons(
  props: CollectionOfCustomButtonsProps
): React.ReactElement {
  const { width, backgroundColor, buttonColor, items } = props;
  const overrides = { ...props.overrides };
  const buttonUserFilter = {
    and: [
      { field: \\"age\\", operand: \\"10\\", operator: \\"gt\\" },
      { field: \\"lastName\\", operand: \\"L\\", operator: \\"beginsWith\\" },
    ],
  };
  const buttonUser =
    items !== undefined
      ? items
      : useDataStoreBinding({
          type: \\"collection\\",
          model: User,
          criteria: buttonUserFilter,
        }).items;
  const buttonColorFilter = {
    field: \\"userID\\",
    operand: \\"user@email.com\\",
    operator: \\"eq\\",
  };
  const { item: buttonColor } = useDataStoreBinding({
    type: \\"record\\",
    model: UserPreferences,
    criteria: buttonColorFilter,
  });
  return (
    <Collection
      type=\\"list\\"
      isPaginated={true}
      gap=\\"1.5rem\\"
      backgroundColor={backgroundColor}
      items={buttonUser || []}
      {...props}
      {...getOverrideProps(overrides, \\"Collection\\")}
    >
      {(item, index) => (
        <Flex {...getOverrideProps(overrides, \\"Collection.Flex\\")}>
          <Button
            label={item.username || \\"hspain@gmail.com\\"}
            labelWidth={width}
            backgroundColor={buttonColor?.favoriteColor}
            disabled={isDisabled}
            {...getOverrideProps(overrides, \\"Collection.Flex.Button\\")}
          ></Button>
        </Flex>
      )}
    </Collection>
  );
}
"
`;

exports[`amplify render tests collection should render collection with data binding and sort 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import { User, UserPreferences } from \\"../models\\";
import {
  Button,
  Collection,
  EscapeHatchProps,
  Flex,
  SortDirection,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type CollectionOfCustomButtonsProps = {
  width?: Number;
  backgroundColor?: String;
  buttonColor?: UserPreferences;
  items?: any[];
} & {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function CollectionOfCustomButtons(
  props: CollectionOfCustomButtonsProps
): React.ReactElement {
  const { width, backgroundColor, buttonColor, items } = props;
  const overrides = { ...props.overrides };
  const buttonUserFilter = {
    and: [
      { field: \\"age\\", operand: \\"10\\", operator: \\"gt\\" },
      { field: \\"lastName\\", operand: \\"L\\", operator: \\"beginsWith\\" },
    ],
  };
  const buttonUserPagination = {
    sort: (s) =>
      s.firstName(SortDirection.ASCENDING).lastName(SortDirection.DESCENDING),
  };
  const buttonUser =
    items !== undefined
      ? items
      : useDataStoreBinding({
          type: \\"collection\\",
          model: User,
          criteria: buttonUserFilter,
          pagination: buttonUserPagination,
        }).items;
  const buttonColorFilter = {
    field: \\"userID\\",
    operand: \\"user@email.com\\",
    operator: \\"eq\\",
  };
  const { item: buttonColor } = useDataStoreBinding({
    type: \\"record\\",
    model: UserPreferences,
    criteria: buttonColorFilter,
  });
  return (
    <Collection
      type=\\"list\\"
      isPaginated={true}
      gap=\\"1.5rem\\"
      backgroundColor={backgroundColor}
      items={buttonUser || []}
      {...props}
      {...getOverrideProps(overrides, \\"Collection\\")}
    >
      {(item, index) => (
        <Flex {...getOverrideProps(overrides, \\"Collection.Flex\\")}>
          <Button
            label={item.username || \\"hspain@gmail.com\\"}
            labelWidth={width}
            backgroundColor={buttonColor?.favoriteColor}
            disabled={isDisabled}
            {...getOverrideProps(overrides, \\"Collection.Flex.Button\\")}
          ></Button>
        </Flex>
      )}
    </Collection>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests collection should render collection with data binding with no predicate 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Collection,
  EscapeHatchProps,
  ListingCard,
  findChildOverrides,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";
import { UntitledModel } from \\"../models\\";

export type ListingCardCollectionProps = {
  items?: any[];
} & {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function ListingCardCollection(
  props: ListingCardCollectionProps
): React.ReactElement {
  const { items } = props;
  const overrides = { ...props.overrides };
  const bananas =
    items !== undefined
      ? items
      : useDataStoreBinding({
          type: \\"collection\\",
          model: UntitledModel,
        }).items;
  return (
    <Collection
      isPaginated=\\"true\\"
      collectionType=\\"grid\\"
      type=\\"list\\"
      columns=\\"2\\"
      order=\\"left-to-right\\"
      items={bananas || []}
      {...props}
      {...getOverrideProps(overrides, \\"Collection\\")}
    >
      {(item, index) => (
        <ListingCard
          marginRight=\\"0\\"
          marginBottom=\\"0\\"
          marginTop=\\"0\\"
          marginLeft=\\"0\\"
          {...findChildOverrides(props.overrides, \\"ListingCard\\")}
        ></ListingCard>
      )}
    </Collection>
  );
}
"
`;

exports[`amplify render tests collection should render collection without data binding 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Collection,
  EscapeHatchProps,
  ListingCard,
  findChildOverrides,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type ListingCardCollectionProps = {
  items?: any[];
} & {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function ListingCardCollection(
  props: ListingCardCollectionProps
): React.ReactElement {
  const { items } = props;
  const overrides = { ...props.overrides };
  return (
    <Collection
      type=\\"list\\"
      isPaginated=\\"true\\"
      items={items || []}
      {...props}
      {...getOverrideProps(overrides, \\"Collection\\")}
    >
      {(item, index) => (
        <ListingCard
          {...findChildOverrides(props.overrides, \\"ListingCard\\")}
        ></ListingCard>
      )}
    </Collection>
  );
}
"
`;

exports[`amplify render tests complex component tests should generate a button within a view component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  View,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type ViewWithButtonProps = {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function ViewWithButton(
  props: ViewWithButtonProps
): React.ReactElement {
  const overrides = { ...props.overrides };
  return (
    <View {...props} {...getOverrideProps(overrides, \\"View\\")}>
      <Button
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...getOverrideProps(overrides, \\"View.Button\\")}
      ></Button>
    </View>
  );
}
"
`;

exports[`amplify render tests complex component tests should generate a component with custom child 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  CustomButton,
  EscapeHatchProps,
  View,
  findChildOverrides,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type ViewWithCustomButtonProps = {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function ViewWithCustomButton(
  props: ViewWithCustomButtonProps
): React.ReactElement {
  const overrides = { ...props.overrides };
  return (
    <View {...props} {...getOverrideProps(overrides, \\"View\\")}>
      <CustomButton
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...findChildOverrides(props.overrides, \\"CustomButton\\")}
      ></CustomButton>
    </View>
  );
}
"
`;

exports[`amplify render tests complex component tests should generate a component with exposeAs prop 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  View,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type ViewWithButtonProps = {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function ViewWithButton(
  props: ViewWithButtonProps
): React.ReactElement {
  const overrides = { ...props.overrides };
  return (
    <View {...props} {...getOverrideProps(overrides, \\"View\\")}>
      <Button
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...getOverrideProps(overrides, \\"View.Button\\")}
      ></Button>
    </View>
  );
}
"
`;

exports[`amplify render tests component with binding should render build property on Text 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  Text,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type TextWithDataBindingProps = {
  textValue?: String;
} & {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function TextWithDataBinding(
  props: TextWithDataBindingProps
): React.ReactElement {
  const { textValue } = props;
  const overrides = { ...props.overrides };
  return (
    <Text
      color=\\"#ff0000\\"
      width=\\"20px\\"
      {...props}
      {...getOverrideProps(overrides, \\"Text\\")}
    >
      {textValue}
    </Text>
  );
}
"
`;

exports[`amplify render tests component with data binding should add model imports 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User } from \\"../models\\";
import {
  Button,
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type ComponentWithDataBindingProps = {
  width?: Number;
  isDisabled?: Boolean;
  buttonUser?: User;
  buttonColor?: String;
} & {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function ComponentWithDataBinding(
  props: ComponentWithDataBindingProps
): React.ReactElement {
  const { width, isDisabled, buttonUser, buttonColor } = props;
  const overrides = { ...props.overrides };
  return (
    <Button
      label={buttonUser?.username || \\"hspain@gmail.com\\"}
      labelWidth={width}
      disabled={isDisabled}
      {...props}
      {...getOverrideProps(overrides, \\"Button\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests component with data binding should not have useDataStoreBinding when there is no predicate 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { UntitledModel } from \\"../models\\";
import {
  EscapeHatchProps,
  Flex,
  Text,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type SectionHeadingProps = {
  newProp6fd1?: UntitledModel;
} & {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function SectionHeading(
  props: SectionHeadingProps
): React.ReactElement {
  const { newProp6fd1 } = props;
  const overrides = { ...props.overrides };
  return (
    <Flex
      padding=\\"0px 0px 10px 0px\\"
      backgroundColor=\\"rgb(255,255,255)\\"
      direction=\\"column\\"
      {...props}
      {...getOverrideProps(overrides, \\"Flex\\")}
    >
      <Flex
        tes={newProp6fd1.untitledfield}
        {...getOverrideProps(overrides, \\"Flex.Flex\\")}
      >
        <Text
          fontFamily=\\"Inter\\"
          color=\\"rgb(15.539060980081558,29.73937589675188,47.8125)\\"
          textAlign=\\"left\\"
          fontSize=\\"48px\\"
          lineHeight=\\"48px\\"
          fontWeight=\\"300\\"
          {...getOverrideProps(overrides, \\"Flex.Flex.Text\\")}
        >
          {\\"Heading 2\\"}
        </Text>
      </Flex>
      <Text
        fontFamily=\\"Inter\\"
        color=\\"rgb(0,0,0)\\"
        textAlign=\\"left\\"
        fontSize=\\"32px\\"
        lineHeight=\\"48px\\"
        fontWeight=\\"400\\"
        {...getOverrideProps(overrides, \\"Flex.Text\\")}
      >
        {\\"subtitle\\"}
      </Text>
    </Flex>
  );
}
"
`;

exports[`amplify render tests component with data binding should render with data binding in child elements 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  Text,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type ChildComponentWithDataBindingProps = {
  textValue?: String;
} & {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function ChildComponentWithDataBinding(
  props: ChildComponentWithDataBindingProps
): React.ReactElement {
  const { textValue } = props;
  const overrides = { ...props.overrides };
  return (
    <Button {...props} {...getOverrideProps(overrides, \\"Button\\")}>
      <Text {...getOverrideProps(overrides, \\"Button.Text\\")}>{textValue}</Text>
    </Button>
  );
}
"
`;

exports[`amplify render tests component with variants should render variants with options provided 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  getOverrideProps,
  getOverridesFromVariants,
} from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = {
  variant: \\"primary\\" | \\"secondary\\";
  size?: \\"large\\";
} & {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function CustomButton(
  props: CustomButtonProps
): React.ReactElement {
  const {} = props;
  const variants = [
    {
      variantValues: { variant: \\"primary\\" },
      overrides: { Button: { fontSize: \\"12px\\" } },
    },
    {
      variantValues: { variant: \\"secondary\\" },
      overrides: { Button: { fontSize: \\"40px\\" } },
    },
    {
      variantValues: { variant: \\"primary\\", size: \\"large\\" },
      overrides: { Button: { width: \\"500\\" } },
    },
  ];
  const overrides = {
    ...getOverridesFromVariants(variants, props),
    ...props.overrides,
  };
  return (
    <Button {...props} {...getOverrideProps(overrides, \\"Button\\")}></Button>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests concat and conditional transform should render child component with data bound concatenation 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  Text,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type ChildComponentWithDataBoundConcatenationProps = {
  textValue?: String;
} & {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function ChildComponentWithDataBoundConcatenation(
  props: ChildComponentWithDataBoundConcatenationProps
): React.ReactElement {
  const { textValue } = props;
  const overrides = { ...props.overrides };
  return (
    <Button {...props} {...getOverrideProps(overrides, \\"Button\\")}>
      <Text {...getOverrideProps(overrides, \\"Button.Text\\")}>{\`\${
        buttonUser?.firstname || \\"Harrison\\"
      }\${\\" \\"}\${buttonUser?.lastname || \\"Spain\\"}\`}</Text>
    </Button>
  );
}
"
`;

exports[`amplify render tests concat and conditional transform should render child component with static concatenation 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  Text,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type ChildComponentWithStaticConcatenationProps = {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function ChildComponentWithStaticConcatenation(
  props: ChildComponentWithStaticConcatenationProps
): React.ReactElement {
  const {} = props;
  const overrides = { ...props.overrides };
  return (
    <Button {...props} {...getOverrideProps(overrides, \\"Button\\")}>
      <Text
        {...getOverrideProps(overrides, \\"Button.Text\\")}
      >{\`\${\\"Concatenate\\"}\${\\" \\"}\${\\"Me!\\"}\`}</Text>
    </Button>
  );
}
"
`;

exports[`amplify render tests concat and conditional transform should render component with concatenation prop 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User } from \\"../models\\";
import {
  Button,
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = {
  width?: Number;
  buttonUser?: User;
  buttonColor?: String;
} & {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function CustomButton(
  props: CustomButtonProps
): React.ReactElement {
  const { width, buttonUser, buttonColor } = props;
  const overrides = { ...props.overrides };
  return (
    <Button
      label={\`\${buttonUser?.firstname || \\"Harrison\\"}\${\\" \\"}\${
        buttonUser?.lastname || \\"Spain\\"
      }\`}
      labelWidth={width}
      {...props}
      {...getOverrideProps(overrides, \\"Button\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests concat and conditional transform should render component with conditional prop 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User } from \\"../models\\";
import {
  Button,
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = {
  width?: Number;
  buttonUser?: User;
  buttonColor?: String;
} & {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function CustomButton(
  props: CustomButtonProps
): React.ReactElement {
  const { width, buttonUser, buttonColor } = props;
  const overrides = { ...props.overrides };
  return (
    <Button
      label={\`\${buttonUser?.firstname || \\"Harrison\\"}\${\\" \\"}\${
        buttonUser?.lastname || \\"Spain\\"
      }\`}
      labelWidth={width}
      disabled={
        buttonUser?.isLoggedIn && buttonUser?.isLoggedIn === true ? true : false
      }
      prompt={
        buttonUser?.age && buttonUser?.age > 18
          ? \`\${buttonUser?.firstname}\${\\", cast your vote.\\"}\`
          : \\"Sorry you cannot vote\\"
      }
      backgroundColor={
        buttonUser?.isLoggedIn && buttonUser?.isLoggedIn === true
          ? buttonUser?.loggedInColor
          : buttonUser?.loggedOutColor
      }
      {...props}
      {...getOverrideProps(overrides, \\"Button\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests custom render config should render ES5 1`] = `
"var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
/* eslint-disable */
import React from \\"react\\";
import { Button, View, getOverrideProps } from \\"@aws-amplify/ui-react\\";
export default function ViewWithButton(props) {
  var overrides = __assign({}, props.overrides);
  return React.createElement(
    View,
    __assign({}, props, getOverrideProps(overrides, \\"View\\")),
    React.createElement(
      Button,
      __assign(
        { color: \\"#ff0000\\", width: \\"20px\\" },
        getOverrideProps(overrides, \\"View.Button\\")
      )
    )
  );
}
"
`;

exports[`amplify render tests custom render config should render JSX 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { Button, View, getOverrideProps } from \\"@aws-amplify/ui-react\\";
export default function ViewWithButton(props) {
  const overrides = Object.assign({}, props.overrides);
  return (
    <View {...props} {...getOverrideProps(overrides, \\"View\\")}>
      <Button
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...getOverrideProps(overrides, \\"View.Button\\")}
      ></Button>
    </View>
  );
}
"
`;

exports[`amplify render tests custom render config should render common JS 1`] = `
"\\"use strict\\";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, \\"__esModule\\", { value: true });
/* eslint-disable */
const react_1 = __importDefault(require(\\"react\\"));
const ui_react_1 = require(\\"@aws-amplify/ui-react\\");
function ViewWithButton(props) {
  const overrides = Object.assign({}, props.overrides);
  return react_1.default.createElement(
    ui_react_1.View,
    Object.assign(
      {},
      props,
      (0, ui_react_1.getOverrideProps)(overrides, \\"View\\")
    ),
    react_1.default.createElement(
      ui_react_1.Button,
      Object.assign(
        { color: \\"#ff0000\\", width: \\"20px\\" },
        (0, ui_react_1.getOverrideProps)(overrides, \\"View.Button\\")
      )
    )
  );
}
exports.default = ViewWithButton;
"
`;

exports[`amplify render tests declarations should render declarations 1`] = `
"import React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react\\";
export declare type ProfileProps = {
    overrides?: EscapeHatchProps | undefined | null;
};
export default function Profile(props: ProfileProps): React.ReactElement;
"
`;

exports[`amplify render tests sample code snippet tests should generate a sample code snippet for components 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  CustomButton,
  EscapeHatchProps,
  View,
  findChildOverrides,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type ViewWithButtonProps = {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function ViewWithButton(
  props: ViewWithButtonProps
): React.ReactElement {
  const overrides = { ...props.overrides };
  return (
    <View padding-left {...props} {...getOverrideProps(overrides, \\"View\\")}>
      <CustomButton
        color=\\"#ff0000\\"
        width=\\"20px\\"
        buttonText=\\"Click Me\\"
        {...findChildOverrides(props.overrides, \\"CustomButton\\")}
      ></CustomButton>
    </View>
  );
}
"
`;

exports[`amplify render tests should render navigation actions 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  Flex,
  Heading,
  findChildOverrides,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type SiteHeaderProps = {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function SiteHeader(props: SiteHeaderProps): React.ReactElement {
  const overrides = { ...props.overrides };
  const { invokeAction } = useActions({
    openAmplifyDocs: {
      type: \\"Navigation.Open\\",
      parameters: { href: \\"docs.amplify.aws\\" },
    },
    redirectToFooter: {
      type: \\"Navigation.Redirect\\",
      parameters: { href: \\"#footer-id\\", replaceHistory: true },
    },
    navigateToFAQPage: {
      type: \\"Navigation.Redirect\\",
      parameters: { href: \\"/faq\\" },
    },
    reloadPage: { type: \\"Navigation.Refresh\\" },
  });
  return (
    <Flex
      direction=\\"row\\"
      justifyContent=\\"space-between\\"
      {...props}
      {...getOverrideProps(overrides, \\"Flex\\")}
    >
      <Heading
        level={1}
        children=\\"Title\\"
        {...findChildOverrides(props.overrides, \\"Heading\\")}
      ></Heading>
      <Button
        variation=\\"primary\\"
        children=\\"Open Amplify Docs\\"
        onClick={invokeAction(\\"openAmplifyDocs\\")}
        {...getOverrideProps(overrides, \\"Flex.Button\\")}
      ></Button>
      <Button
        variation=\\"primary\\"
        children=\\"Navigate to FAQ Page\\"
        onClick={invokeAction(\\"navigateToFAQPage\\")}
        {...getOverrideProps(overrides, \\"Flex.Button\\")}
      ></Button>
      <Button
        variation=\\"primary\\"
        children=\\"Reload Page\\"
        onClick={invokeAction(\\"reloadPage\\")}
        {...getOverrideProps(overrides, \\"Flex.Button\\")}
      ></Button>
      <Button
        variation=\\"primary\\"
        children=\\"Redirect To Footer (No History Update)\\"
        onClick={invokeAction(\\"redirectToFooter\\")}
        {...getOverrideProps(overrides, \\"Flex.Button\\")}
      ></Button>
    </Flex>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests theme should render the theme 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { useEffect } from \\"react\\";
import {
  AmplifyProvider,
  DeepPartial,
  Theme,
  extendTheming,
} from \\"@aws-amplify/ui-react\\";
export default function withTheme<T>(WrappedComponent: React.ComponentType<T>) {
  const theme = {
    components: {
      alert: {
        backgroundColor: \\"hsl(210, 5%, 90%)\\",
        padding: \\"0.75rem 1rem\\",
        info: { backgroundColor: \\"hsl(220, 85%, 85%)\\" },
        error: { backgroundColor: \\"hsl(0, 75%, 85%)\\" },
        warning: { backgroundColor: \\"hsl(30, 75%, 85%)\\" },
        success: { backgroundColor: \\"hsl(130, 75%, 85%)\\" },
      },
    },
    borderWidths: { small: \\"1px\\", medium: \\"2px\\", large: \\"3px\\" },
    breakpoints: {
      values: { base: 0, small: 30, medium: 48, large: 62, xl: 80, xxl: 96 },
      unit: \\"em\\",
      defaultBreakpoint: \\"base\\",
    },
    testAllTypes: {
      null: null,
      string: \\"test\\",
      number: 10,
      boolean: { t: true, false: false },
      object: { object: { test: \\"test\\" }, array: [\\"test\\"] },
    },
  };
  const displayName =
    WrappedComponent.displayName || WrappedComponent.name || \\"Component\\";
  const ComponentWithTheme = (props: T) => {
    const theming = extendTheming(theme);
    useEffect(() => {
      Object.entries(theming.CSSVariables).forEach(([key, value]) => {
        document.documentElement.style.setProperty(key, value as string | null);
      });
    });
    return (
      <AmplifyProvider theming={theming} components={{}}>
        <WrappedComponent {...props} />
      </AmplifyProvider>
    );
  };
  ComponentWithTheme.displayName = displayName;
  return ComponentWithTheme;
}
"
`;

exports[`amplify render tests theme should render the theme with ES5 1`] = `
"var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
/* eslint-disable */
import React from \\"react\\";
import { useEffect } from \\"react\\";
import { AmplifyProvider, extendTheming } from \\"@aws-amplify/ui-react\\";
export default function withTheme(WrappedComponent) {
  var theme = {
    components: {
      alert: {
        backgroundColor: \\"hsl(210, 5%, 90%)\\",
        padding: \\"0.75rem 1rem\\",
        info: { backgroundColor: \\"hsl(220, 85%, 85%)\\" },
        error: { backgroundColor: \\"hsl(0, 75%, 85%)\\" },
        warning: { backgroundColor: \\"hsl(30, 75%, 85%)\\" },
        success: { backgroundColor: \\"hsl(130, 75%, 85%)\\" },
      },
    },
    borderWidths: { small: \\"1px\\", medium: \\"2px\\", large: \\"3px\\" },
    breakpoints: {
      values: { base: 0, small: 30, medium: 48, large: 62, xl: 80, xxl: 96 },
      unit: \\"em\\",
      defaultBreakpoint: \\"base\\",
    },
    testAllTypes: {
      null: null,
      string: \\"test\\",
      number: 10,
      boolean: { t: true, false: false },
      object: { object: { test: \\"test\\" }, array: [\\"test\\"] },
    },
  };
  var displayName =
    WrappedComponent.displayName || WrappedComponent.name || \\"Component\\";
  var ComponentWithTheme = function (props) {
    var theming = extendTheming(theme);
    useEffect(function () {
      Object.entries(theming.CSSVariables).forEach(function (_a) {
        var key = _a[0],
          value = _a[1];
        document.documentElement.style.setProperty(key, value);
      });
    });
    return React.createElement(
      AmplifyProvider,
      { theming: theming, components: {} },
      React.createElement(WrappedComponent, __assign({}, props))
    );
  };
  ComponentWithTheme.displayName = displayName;
  return ComponentWithTheme;
}
"
`;

exports[`amplify render tests theme should render the theme with TSX 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { useEffect } from \\"react\\";
import {
  AmplifyProvider,
  DeepPartial,
  Theme,
  extendTheming,
} from \\"@aws-amplify/ui-react\\";
export default function withTheme<T>(WrappedComponent: React.ComponentType<T>) {
  const theme = {
    components: {
      alert: {
        backgroundColor: \\"hsl(210, 5%, 90%)\\",
        padding: \\"0.75rem 1rem\\",
        info: { backgroundColor: \\"hsl(220, 85%, 85%)\\" },
        error: { backgroundColor: \\"hsl(0, 75%, 85%)\\" },
        warning: { backgroundColor: \\"hsl(30, 75%, 85%)\\" },
        success: { backgroundColor: \\"hsl(130, 75%, 85%)\\" },
      },
    },
    borderWidths: { small: \\"1px\\", medium: \\"2px\\", large: \\"3px\\" },
    breakpoints: {
      values: { base: 0, small: 30, medium: 48, large: 62, xl: 80, xxl: 96 },
      unit: \\"em\\",
      defaultBreakpoint: \\"base\\",
    },
    testAllTypes: {
      null: null,
      string: \\"test\\",
      number: 10,
      boolean: { t: true, false: false },
      object: { object: { test: \\"test\\" }, array: [\\"test\\"] },
    },
  };
  const displayName =
    WrappedComponent.displayName || WrappedComponent.name || \\"Component\\";
  const ComponentWithTheme = (props: T) => {
    const theming = extendTheming(theme);
    useEffect(() => {
      Object.entries(theming.CSSVariables).forEach(([key, value]) => {
        document.documentElement.style.setProperty(key, value as string | null);
      });
    });
    return (
      <AmplifyProvider theming={theming} components={{}}>
        <WrappedComponent {...props} />
      </AmplifyProvider>
    );
  };
  ComponentWithTheme.displayName = displayName;
  return ComponentWithTheme;
}
"
`;

exports[`amplify render tests user specific attributes should render user specific attributes 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  Button,
  EscapeHatchProps,
  Flex,
  Image,
  getOverrideProps,
} from \\"@aws-amplify/ui-react\\";

export type ProfileProps = {
  overrides?: EscapeHatchProps | undefined | null;
};
export default function Profile(props: ProfileProps): React.ReactElement {
  const {} = props;
  const overrides = { ...props.overrides };
  const {
    attributes: {
      username,
      picture: userImage,
      [\\"custom:favorite_icecream\\"]: customUserAttributeIcecream,
    },
  } = useAuthenticatedUser();
  return (
    <Flex {...props} {...getOverrideProps(overrides, \\"Flex\\")}>
      <Image
        src={userImage}
        {...getOverrideProps(overrides, \\"Flex.Image\\")}
      ></Image>
      <Button
        label={username}
        {...getOverrideProps(overrides, \\"Flex.Button\\")}
      ></Button>
      <Button
        label={customUserAttributeIcecream}
        {...getOverrideProps(overrides, \\"Flex.Button\\")}
      ></Button>
    </Flex>
  );
}
"
`;
