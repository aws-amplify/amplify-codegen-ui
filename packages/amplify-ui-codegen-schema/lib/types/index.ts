export type FigmaMetadata = {
    /**
     * The document URL for the figma document
     */
    documentUrl?: string;
  
    /**
     *  The nodeId generated by Figma
     */
    nodeId?: string;
  };
  
  /**
   * This is the base type for all Studio components
   */
  export type StudioComponent = {
    /**
     * The name of the customized component
     */
    name?: string;
  
    /**
     *  This is the unique global identifier for each component
     */
    componentId: string;
  
    /**
     * This should map to the components available including Amplify
     * UI components and other custom components
     */
    componentType: string;
  
    /**
     * These are the customized properties
     */
    properties: StudioComponentProperties;
  
    /**
     * These are the nested components in a composite
     */
    children?: StudioComponentChild[];
  
    /**
     * The  metatdata gerated by Figma
     */
    figmaMetadata?: FigmaMetadata;
  
    /**
     * Variants in terms of styles
     */
    variants?: StudioComponentVariant[];
  
    /**
     * Overrides for primitives
     */
    overrides?: StudioComponentOverrides;
  
    bindingProperties: {
      [propertyName: string]:
        | StudioComponentDataPropertyBinding
        | StudioComponentAuthPropertyBinding
        | StudioComponentStoragePropertyBinding
        | StudioComponentSimplePropertyBinding;
    };
  
    /**
     * disables component property editing in the studio component editor
     */
    isBootrapped?: boolean;
  };
  
  export type StudioComponentSimplePropertyBinding = {
    /**
     *  This is the data type for the value that is bound to this property. The default
     * inferred type is string so this will only need to be set if it is not a string
     */
    type: keyof typeof StudioComponentPropertyType;
  
    defaultValue?: string | number | boolean | Date;
  };
  
  /**
   * This is the child type for Studio components
   */
  export type StudioComponentChild = {
    /**
     * This should map to the components available including Amplify
     * UI components and other custom components
     */
    componentType: string;
  
    /**
     * These are the customized properties
     */
    properties: StudioComponentProperties;
  
    /**
     * These are the nested components in a composite
     */
    children?: StudioComponentChild[];
  };
  
  /**
   * This is used to track vairants for a single component
   */
  export type StudioComponentVariant = {
    /**
     * The combination of vairants that comprise this variant
     */
    variantValues: { [key: string]: string };
  
    /**
     * The overridden properties for this variant
     */
    overrides: StudioComponentOverrides;
  };
  
  /**
   * This is a dictionary of overrides for a single parent component.
   * The hirearchy reference should
   */
  export type StudioComponentOverrides = {
    /**
     * This is the reference to full component override hierarchy
     * @returns A set of key value pairs representing overrides for the given primitive hierarchy.
     */
    [hierarchyReference: string]: { [key: string]: string };
  };
  
  /**
   * This is a dictionary of properties. Each key represents
   * a uniquely named property of a component
   */
  export type StudioComponentProperties = {
    /**
     * Each key maps to an available component property. Static values
     * can be passed in as a string.
     */
    [key: string]: FixedStudioComponentProperty | BoundStudioComponentProperty;
  };
  
  /**
   * This represents a component property that is configured with either
   * static  values
   */
  export type FixedStudioComponentProperty = {
    /**
     * These are the values pass when code generating. Static values can be passed in
     * as a string
     */
    value: string | number | boolean | Date;
  };
  
  /**
   * This represents a component property that is configured with either
   * data bound values
   */
  export type BoundStudioComponentProperty = {
    /**
     * This is the exposed property that will propogate down to this value
     */
    bindingProperties: {
      property: string;
      field?: string;
    };
  
    /**
     * The default value to pass in if no prop is provided
     */
    defaultValue?: string;
  };
  
  /**
   * This represent the configuration for binding a component property
   * to Amplify specific information
   */
  export type StudioComponentDataPropertyBinding = {
    /**
     * This declares where the data is coming from to bind to
     */
    type: 'Data';
  
    /**
     * This is the value of the data binding
     */
    bindingProperties: StudioComponentDataBindingProperty;
  };
  
  /**
   * This represent the configuration for binding a component property
   * to Amplify specific information
   */
  export type StudioComponentAuthPropertyBinding = {
    /**
     * This declares where the data is coming from to bind to
     */
    type: 'Authentication';
  
    /**
     * This is the value of the data binding
     */
    bindingProperties: StudioComponentAuthBindingProperty;
  };
  
  /**
   * This represent the configuration for binding a component property
   * to Amplify specific information
   */
  export type StudioComponentStoragePropertyBinding = {
    /**
     * This declares where the data is coming from to bind to
     */
    type: 'Storage';
  
    /**
     * This is the value of the data binding
     */
    bindingProperties: StudioComponentStorageBindingProperty;
  };
  
  /**
   * These are the primitive value types
   */
  export enum StudioComponentPropertyType {
    String = 'String',
    Number = 'Number',
    Boolean = 'Boolean',
    Date = 'Date',
  }
  
  /**
   * These are the types of data binding
   */
  export enum StudioComponentPropertyBindingType {
    Data = 'Data',
    Authentication = 'Authentication',
    Storage = 'Storage',
  }
  
  /**
   * This represents the model and field you want to bind
   * a component property to
   */
  export type StudioComponentDataBindingProperty = {
    model: string;
    field?: string;
    predicate?: string;
  };
  
  /**
   * This represents the user attribute you want to bind a
   * Studio component property to
   */
  export type StudioComponentAuthBindingProperty = {
    userAttribute: string;
  };
  
  /**
   * This represents the bucket and key you want to bind a component
   * property to
   */
  export type StudioComponentStorageBindingProperty = {
    bucket: string;
    key?: string;
  };