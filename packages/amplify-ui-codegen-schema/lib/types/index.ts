export type FigmaMetadata = {
  /**
   * The document URL for the figma document
   */
  documentUrl?: string;

  /**
   *  The nodeId generated by Figma
   */
  nodeId?: string;
};

/**
 * This is the base type for all Studio components
 */
export type StudioComponent = {
  /**
   * The name of the customized component
   */
  name?: string;

  /**
   *  This is the unique global identifier for each component
   */
  id?: string;

  /**
   * The id if the component in its source system (Figma, Sketch, etc.)
   */
  sourceId?: string;

  /**
   * This should map to the components available including Amplify
   * UI components and other custom components
   */
  componentType: string;

  /**
   * These are the customized properties
   */
  properties: StudioComponentProperties;

  /**
   * These are the nested components in a composite
   */
  children?: StudioComponentChild[];

  /**
   * The  metatdata gerated by Figma
   */
  figmaMetadata?: FigmaMetadata;

  /**
   * Variants in terms of styles
   */
  variants?: StudioComponentVariant[];

  /**
   * Overrides for primitives
   */
  overrides?: StudioComponentOverrides;

  bindingProperties: {
    [propertyName: string]:
      | StudioComponentDataPropertyBinding
      | StudioComponentAuthPropertyBinding
      | StudioComponentStoragePropertyBinding
      | StudioComponentSimplePropertyBinding
      | StudioComponentEventPropertyBinding;
  };
  /**
   * These are the collection properties
   */
  collectionProperties?: {
    [propertyName: string]: StudioComponentDataPropertyBinding;
  };
};

/**
 * A new studio component where the componentId will automatically be generated
 */
export type NewStudioComponent = {
  /**
   * The name of the customized component
   */
  name?: string;

  /**
   * This should map to the components available including Amplify
   * UI components and other custom components
   */
  componentType: string;

  /**
   * These are the customized properties
   */
  properties: StudioComponentProperties;

  /**
   * These are the nested components in a composite
   */
  children?: StudioComponentChild[];

  /**
   * The  metatdata gerated by Figma
   */
  figmaMetadata?: FigmaMetadata;

  /**
   * Variants in terms of styles
   */
  variants?: StudioComponentVariant[];

  /**
   * Overrides for primitives
   */
  overrides?: StudioComponentOverrides;

  bindingProperties: {
    [propertyName: string]:
      | StudioComponentDataPropertyBinding
      | StudioComponentAuthPropertyBinding
      | StudioComponentStoragePropertyBinding
      | StudioComponentSimplePropertyBinding
      | StudioComponentEventPropertyBinding;
  };

  /**
   * These are the collection properties
   */
  collectionProperties?: {
    [propertyName: string]: StudioComponentDataPropertyBinding;
  };
};

export type StudioComponentSimplePropertyBinding = {
  /**
   *  This is the data type for the value that is bound to this property. The default
   * inferred type is string so this will only need to be set if it is not a string
   */
  type: keyof typeof StudioComponentPropertyType;

  defaultValue?: string | undefined;
};

/**
 * This is the child type for Studio components
 */
export type StudioComponentChild = {
  /**
   * This should map to the components available including Amplify
   * UI components and other custom components
   */
  componentType: string;

  /**
   * The unique name of the child element.
   */
  name: string;

  /**
   * These are the customized properties
   */
  properties: StudioComponentProperties;

  /**
   * These are the nested components in a composite
   */
  children?: StudioComponentChild[];

  /**
   * These are the collection properties
   */
  collectionProperties?: {
    [propertyName: string]: StudioComponentDataPropertyBinding;
  };
};

/**
 * This is used to track vairants for a single component
 */
export type StudioComponentVariant = {
  /**
   * The combination of vairants that comprise this variant
   */
  variantValues: { [key: string]: string };

  /**
   * The overridden properties for this variant
   */
  overrides: StudioComponentOverrides;
};

/**
 * This is a dictionary of overrides for a single parent component.
 * The hirearchy reference should
 */
export type StudioComponentOverrides = {
  /**
   * This is the reference to full component override hierarchy
   * @returns A set of key value pairs representing overrides for the given primitive hierarchy.
   */
  [hierarchyReference: string]: { [key: string]: string };
};

/**
 * This is a dictionary of properties. Each key represents
 * a uniquely named property of a component
 */
export type StudioComponentProperties = {
  /**
   * Each key maps to an available component property. Static values
   * can be passed in as a string.
   */
  [key: string]:
    | FixedStudioComponentProperty
    | BoundStudioComponentProperty
    | CollectionStudioComponentProperty
    | WorkflowStudioComponentProperty
    | FormStudioComponentProperty;
};

/**
 * This represents a component property that is configured with either
 * static  values
 */
export type FixedStudioComponentProperty = {
  /**
   * These are the values pass when code generating. Static values can be passed in
   * as a string
   */
  value: string | number | boolean | Date;
};

/**
 * This represents a component property that is configured with either
 * data bound values
 */
export type BoundStudioComponentProperty = {
  /**
   * This is the exposed property that will propogate down to this value
   */
  bindingProperties: {
    property: string;
    field?: string;
  };

  /**
   * The default value to pass in if no prop is provided
   */
  defaultValue?: string;
};

/**
 * This represents a component property that is configured with collection item
 */
export type CollectionStudioComponentProperty = {
  /**
   * record collection item bindings
   */
  collectionBindingProperties: {
    property: string;
    field?: string;
  };

  /**
   * The default value to pass in if no prop is provided
   */
  defaultValue?: string;
};

/**
 * This represents a component property that is configured with either
 * data bound values
 */
export type WorkflowStudioComponentProperty = {
  event: string;
};

/**
 * This represent the configuration for binding a component property
 * to Amplify specific information
 */
export type StudioComponentDataPropertyBinding = {
  /**
   * This declares where the data is coming from to bind to
   */
  type: 'Data';

  /**
   * This is the value of the data binding
   */
  bindingProperties: StudioComponentDataBindingProperty;
};

/**
 * This represent the configuration for binding a component property
 * to Amplify specific information
 */
export type StudioComponentEventPropertyBinding = {
  /**
   * This declares that the type is of a workflow binding
   */
  type: 'Event';
};

/**
 * This is the configuration for a form binding. This is
 * technically an extension of Workflows but because it is
 * pretty unique, it should be separated out with its own definition
 */
export type FormStudioComponentProperty = {
  /**
   * The model of the DataStore object
   */
  model: string;

  /**
   * The binding configuration for the form
   */
  bindings: FormBindings;
};

export type FormBindings = {
  [key: string]: FormBindingElement;
};

export type FormBindingElement = {
  /**
   * The name of the component to fetch a value from
   */
  element: string;

  /**
   * The property component to get the value from.
   */
  property: string;
};

/**
 * This represent the configuration for binding a component property
 * to Amplify specific information
 */
export type StudioComponentAuthPropertyBinding = {
  /**
   * This declares where the data is coming from to bind to
   */
  type: 'Authentication';

  /**
   * This is the value of the data binding
   */
  bindingProperties: StudioComponentAuthBindingProperty;
};

/**
 * This represent the configuration for binding a component property
 * to Amplify specific information
 */
export type StudioComponentStoragePropertyBinding = {
  /**
   * This declares where the data is coming from to bind to
   */
  type: 'Storage';

  /**
   * This is the value of the data binding
   */
  bindingProperties: StudioComponentStorageBindingProperty;
};

/**
 * These are the primitive value types
 */
export enum StudioComponentPropertyType {
  String = 'String',
  Number = 'Number',
  Boolean = 'Boolean',
  Date = 'Date',
}

/**
 * These are the types of data binding
 */
export enum StudioComponentPropertyBindingType {
  Data = 'Data',
  Authentication = 'Authentication',
  Storage = 'Storage',
}

/**
 * This represents the model and field you want to bind
 * a component property to
 */
export type StudioComponentDataBindingProperty = {
  model: string;
  field?: string;
  predicate?: StudioComponentPredicate;
};

export type StudioComponentPredicate = {
  and?: StudioComponentPredicate[];
  or?: StudioComponentPredicate[];
  field?: string;
  operand?: string;
  operator?: string;
};

/**
 * This represents the user attribute you want to bind a
 * Studio component property to
 */
export type StudioComponentAuthBindingProperty = {
  userAttribute: string;
};

/**
 * This represents the bucket and key you want to bind a component
 * property to
 */
export type StudioComponentStorageBindingProperty = {
  bucket: string;
  key?: string;
};
