// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`form-render utils createValidationExpression handles BeAfter with undefined numValues 1`] = `
"[
    { type: \\"BeAfter\\", strValues: [\\"chard\\"] }
]"
`;

exports[`form-render utils createValidationExpression handles BeBefore with undefined numValues 1`] = `
"[
    { type: \\"BeBefore\\", strValues: [\\"chard\\"] }
]"
`;

exports[`form-render utils createValidationExpression handles Contains with undefined numValues 1`] = `
"[
    { type: \\"Contains\\", strValues: [\\"chard\\"] }
]"
`;

exports[`form-render utils createValidationExpression handles EndWith with undefined numValues 1`] = `
"[
    { type: \\"EndWith\\", strValues: [\\"chard\\"] }
]"
`;

exports[`form-render utils createValidationExpression handles EqualTo with undefined strValues 1`] = `
"[
    { type: \\"EqualTo\\", numValues: [9] }
]"
`;

exports[`form-render utils createValidationExpression handles GreaterThanChar with undefined strValues 1`] = `
"[
    { type: \\"GreaterThanChar\\", numValues: [9] }
]"
`;

exports[`form-render utils createValidationExpression handles GreaterThanNum with undefined strValues 1`] = `
"[
    { type: \\"GreaterThanNum\\", numValues: [9] }
]"
`;

exports[`form-render utils createValidationExpression handles LessThanChar with undefined strValues 1`] = `
"[
    { type: \\"LessThanChar\\", numValues: [9] }
]"
`;

exports[`form-render utils createValidationExpression handles LessThanNum with undefined strValues 1`] = `
"[
    { type: \\"LessThanNum\\", numValues: [9] }
]"
`;

exports[`form-render utils createValidationExpression handles NotContains with undefined numValues 1`] = `
"[
    { type: \\"NotContains\\", strValues: [\\"chard\\"] }
]"
`;

exports[`form-render utils createValidationExpression handles StartWith with undefined numValues 1`] = `
"[
    { type: \\"StartWith\\", strValues: [\\"chard\\"] }
]"
`;

exports[`form-render utils should generate before & complete types if datastore config is set 1`] = `
"{
    clearOnSuccess?: boolean;
    onSubmit?: (fields: mySampleFormInputValues) => mySampleFormInputValues;
    onSuccess?: (fields: mySampleFormInputValues) => void;
    onError?: (fields: mySampleFormInputValues, errorMessage: string) => void;
    onChange?: (fields: mySampleFormInputValues) => mySampleFormInputValues;
    onValidate?: mySampleFormValidationValues;
}"
`;

exports[`form-render utils should generate regular onsubmit if dataSourceType is custom 1`] = `
"{
    onSubmit: (fields: myCustomFormInputValues) => void;
    onChange?: (fields: myCustomFormInputValues) => myCustomFormInputValues;
    onValidate?: myCustomFormValidationValues;
}"
`;

exports[`form-render utils should render cancel props if included cancel object is an empty object 1`] = `
"{
    onSubmit: (fields: myCustomFormInputValues) => void;
    onCancel?: () => void;
    onChange?: (fields: myCustomFormInputValues) => myCustomFormInputValues;
    onValidate?: myCustomFormValidationValues;
}"
`;

exports[`form-render utils should render composite primary keys 1`] = `
"{
    id?: {
        myKey: string;
        description: number;
    };
    post?: Post;
    onSubmit?: (fields: mySampleFormInputValues) => mySampleFormInputValues;
    onSuccess?: (fields: mySampleFormInputValues) => void;
    onError?: (fields: mySampleFormInputValues, errorMessage: string) => void;
    onCancel?: () => void;
    onChange?: (fields: mySampleFormInputValues) => mySampleFormInputValues;
    onValidate?: mySampleFormValidationValues;
}"
`;
