// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`amplify form renderer tests custom form tests should render a custom backed form 1`] = `
"/* eslint-disable */
import * as React from \\"react\\";
import { fetchByPath, validateField } from \\"./utils\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import {
  Button,
  Flex,
  Grid,
  Radio,
  RadioGroupField,
  SelectField,
  TextField,
} from \\"@aws-amplify/ui-react\\";
export default function CustomDataForm(props) {
  const {
    onSubmit: customDataFormOnSubmit,
    onCancel,
    onValidate,
    overrides,
    ...rest
  } = props;
  const [name, setName] = React.useState(undefined);
  const [email, setEmail] = React.useState(undefined);
  const [city, setCity] = React.useState(undefined);
  const [category, setCategory] = React.useState(undefined);
  const [errors, setErrors] = React.useState({});
  const validations = {
    name: [{ type: \\"Required\\" }],
    email: [{ type: \\"Required\\" }],
    city: [],
    category: [],
  };
  const runValidationTasks = async (fieldName, value) => {
    let validationResponse = validateField(value, validations[fieldName]);
    const customValidator = fetchByPath(onValidate, fieldName);
    if (customValidator) {
      validationResponse = await customValidator(value, validationResponse);
    }
    setErrors((errors) => ({ ...errors, [fieldName]: validationResponse }));
    return validationResponse;
  };
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault();
        const modelFields = {
          name,
          email,
          city,
          category,
        };
        const validationResponses = await Promise.all(
          Object.keys(validations).map((fieldName) =>
            runValidationTasks(fieldName, modelFields[fieldName])
          )
        );
        if (validationResponses.some((r) => r.hasError)) {
          return;
        }
        await customDataFormOnSubmit(modelFields);
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"CustomDataForm\\")}
    >
      <Grid
        columnGap=\\"15px\\"
        rowGap=\\"15px\\"
        padding=\\"20px\\"
        {...getOverrideProps(overrides, \\"CustomDataFormGrid\\")}
      >
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid0\\")}
        >
          <TextField
            label=\\"name\\"
            isRequired={true}
            defaultValue=\\"John Doe\\"
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"name\\", value);
              setName(value);
            }}
            errorMessage={errors.name?.errorMessage}
            hasError={errors.name?.hasError}
            {...getOverrideProps(overrides, \\"name\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid1\\")}
        >
          <TextField
            label=\\"E-mail\\"
            isRequired={true}
            defaultValue=\\"johndoe@amplify.com\\"
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"email\\", value);
              setEmail(value);
            }}
            errorMessage={errors.email?.errorMessage}
            hasError={errors.email?.hasError}
            {...getOverrideProps(overrides, \\"email\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid2\\")}
        >
          <SelectField
            label=\\"Label\\"
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"city\\", value);
              setCity(value);
            }}
            errorMessage={errors.city?.errorMessage}
            hasError={errors.city?.hasError}
            {...getOverrideProps(overrides, \\"city\\")}
          >
            <option
              children=\\"Los Angeles\\"
              value=\\"Los Angeles\\"
              {...getOverrideProps(overrides, \\"cityoption0\\")}
            ></option>
            <option
              children=\\"Houston\\"
              value=\\"Houston\\"
              {...getOverrideProps(overrides, \\"cityoption1\\")}
            ></option>
            <option
              children=\\"New York\\"
              value=\\"New York\\"
              selected={true}
              {...getOverrideProps(overrides, \\"cityoption2\\")}
            ></option>
          </SelectField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid3\\")}
        >
          <RadioGroupField
            label=\\"Label\\"
            name=\\"fieldName\\"
            defaultValue=\\"Hobbies\\"
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"category\\", value);
              setCategory(value);
            }}
            errorMessage={errors.category?.errorMessage}
            hasError={errors.category?.hasError}
            {...getOverrideProps(overrides, \\"category\\")}
          >
            <Radio
              children=\\"Hobbies\\"
              value=\\"Hobbies\\"
              {...getOverrideProps(overrides, \\"categoryRadio0\\")}
            ></Radio>
            <Radio
              children=\\"Travel\\"
              value=\\"Travel\\"
              {...getOverrideProps(overrides, \\"categoryRadio1\\")}
            ></Radio>
            <Radio
              children=\\"Health\\"
              value=\\"Health\\"
              {...getOverrideProps(overrides, \\"categoryRadio2\\")}
            ></Radio>
          </RadioGroupField>
        </Grid>
      </Grid>
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          children=\\"empty\\"
          type=\\"reset\\"
          {...getOverrideProps(overrides, \\"ClearButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            children=\\"go back\\"
            type=\\"button\\"
            onClick={() => {
              onCancel && onCancel();
            }}
            {...getOverrideProps(overrides, \\"CancelButton\\")}
          ></Button>
          <Button
            children=\\"create\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={Object.values(errors).some((e) => e.hasError)}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
    </form>
  );
}
"
`;

exports[`amplify form renderer tests custom form tests should render a custom backed form 2`] = `
"import * as React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { GridProps, RadioGroupFieldProps, SelectFieldProps, TextFieldProps } from \\"@aws-amplify/ui-react\\";
export declare type ValidationResponse = {
    hasError: boolean;
    errorMessage?: string;
};
export declare type ValidationFunction<T> = (value: T, validationResponse: ValidationResponse) => ValidationResponse | Promise<ValidationResponse>;
export declare type CustomDataFormInputValues = {
    name?: ValidationFunction<string>;
    email?: ValidationFunction<string>;
    city?: ValidationFunction<string>;
    category?: ValidationFunction<string>;
};
export declare type CustomDataFormOverridesProps = {
    CustomDataFormGrid?: GridProps;
    RowGrid0?: GridProps;
    name?: TextFieldProps;
    RowGrid1?: GridProps;
    email?: TextFieldProps;
    RowGrid2?: GridProps;
    city?: SelectFieldProps;
    RowGrid3?: GridProps;
    category?: RadioGroupFieldProps;
} & EscapeHatchProps;
export declare type CustomDataFormProps = React.PropsWithChildren<{
    overrides?: CustomDataFormOverridesProps | undefined | null;
} & {
    onSubmit: (fields: Record<string, string>) => void;
    onCancel?: () => void;
    onValidate?: CustomDataFormInputValues;
}>;
export default function CustomDataForm(props: CustomDataFormProps): React.ReactElement;
"
`;

exports[`amplify form renderer tests custom form tests should render nested json fields 1`] = `
"/* eslint-disable */
import * as React from \\"react\\";
import { fetchByPath, validateField } from \\"./utils\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import { Button, Flex, Grid, Heading, TextField } from \\"@aws-amplify/ui-react\\";
export default function NestedJson(props) {
  const {
    onSubmit: nestedJsonOnSubmit,
    onCancel,
    onValidate,
    overrides,
    ...rest
  } = props;
  const [firstName, setFirstName] = React.useState(undefined);
  const [lastName, setLastName] = React.useState(undefined);
  const [bio, setBio] = React.useState({});
  const [errors, setErrors] = React.useState({});
  const validations = {
    firstName: [],
    lastName: [],
    \\"bio.favoriteQuote\\": [],
    \\"bio.favoriteAnimal\\": [],
  };
  const runValidationTasks = async (fieldName, value) => {
    let validationResponse = validateField(value, validations[fieldName]);
    const customValidator = fetchByPath(onValidate, fieldName);
    if (customValidator) {
      validationResponse = await customValidator(value, validationResponse);
    }
    setErrors((errors) => ({ ...errors, [fieldName]: validationResponse }));
    return validationResponse;
  };
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault();
        const modelFields = {
          firstName,
          lastName,
          bio,
        };
        const validationResponses = await Promise.all(
          Object.keys(validations).map((fieldName) =>
            runValidationTasks(fieldName, modelFields[fieldName])
          )
        );
        if (validationResponses.some((r) => r.hasError)) {
          return;
        }
        await nestedJsonOnSubmit(modelFields);
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"NestedJson\\")}
    >
      <Grid
        columnGap=\\"15px\\"
        rowGap=\\"15px\\"
        padding=\\"20px\\"
        {...getOverrideProps(overrides, \\"NestedJsonGrid\\")}
      >
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid0\\")}
        >
          <TextField
            label=\\"firstName\\"
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"firstName\\", value);
              setFirstName(value);
            }}
            errorMessage={errors.firstName?.errorMessage}
            hasError={errors.firstName?.hasError}
            {...getOverrideProps(overrides, \\"firstName\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid1\\")}
        >
          <TextField
            label=\\"lastName\\"
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"lastName\\", value);
              setLastName(value);
            }}
            errorMessage={errors.lastName?.errorMessage}
            hasError={errors.lastName?.hasError}
            {...getOverrideProps(overrides, \\"lastName\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid2\\")}
        >
          <Heading
            level={3}
            children=\\"bio\\"
            {...getOverrideProps(overrides, \\"bio\\")}
          ></Heading>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid3\\")}
        >
          <TextField
            label=\\"favoriteQuote\\"
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"bio.favoriteQuote\\", value);
              setBio({ ...bio, favoriteQuote: value });
            }}
            errorMessage={errors[\\"bio.favoriteQuote\\"]?.errorMessage}
            hasError={errors[\\"bio.favoriteQuote\\"]?.hasError}
            {...getOverrideProps(overrides, \\"bio.favoriteQuote\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid4\\")}
        >
          <TextField
            label=\\"favoriteAnimal\\"
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"bio.favoriteAnimal\\", value);
              setBio({ ...bio, favoriteAnimal: value });
            }}
            errorMessage={errors[\\"bio.favoriteAnimal\\"]?.errorMessage}
            hasError={errors[\\"bio.favoriteAnimal\\"]?.hasError}
            {...getOverrideProps(overrides, \\"bio.favoriteAnimal\\")}
          ></TextField>
        </Grid>
      </Grid>
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          children=\\"Clear\\"
          type=\\"reset\\"
          {...getOverrideProps(overrides, \\"ClearButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            children=\\"Cancel\\"
            type=\\"button\\"
            onClick={() => {
              onCancel && onCancel();
            }}
            {...getOverrideProps(overrides, \\"CancelButton\\")}
          ></Button>
          <Button
            children=\\"Submit\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={Object.values(errors).some((e) => e.hasError)}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
    </form>
  );
}
"
`;

exports[`amplify form renderer tests custom form tests should render nested json fields 2`] = `
"import * as React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { GridProps, HeadingProps, TextFieldProps } from \\"@aws-amplify/ui-react\\";
export declare type ValidationResponse = {
    hasError: boolean;
    errorMessage?: string;
};
export declare type ValidationFunction<T> = (value: T, validationResponse: ValidationResponse) => ValidationResponse | Promise<ValidationResponse>;
export declare type NestedJsonInputValues = {
    firstName?: ValidationFunction<string>;
    lastName?: ValidationFunction<string>;
    bio?: {
        favoriteQuote?: ValidationFunction<string>;
        favoriteAnimal?: ValidationFunction<string>;
    };
};
export declare type NestedJsonOverridesProps = {
    NestedJsonGrid?: GridProps;
    RowGrid0?: GridProps;
    firstName?: TextFieldProps;
    RowGrid1?: GridProps;
    lastName?: TextFieldProps;
    RowGrid2?: GridProps;
    bio?: HeadingProps;
    RowGrid3?: GridProps;
    \\"bio.favoriteQuote\\"?: TextFieldProps;
    RowGrid4?: GridProps;
    \\"bio.favoriteAnimal\\"?: TextFieldProps;
} & EscapeHatchProps;
export declare type NestedJsonProps = React.PropsWithChildren<{
    overrides?: NestedJsonOverridesProps | undefined | null;
} & {
    onSubmit: (fields: Record<string, string>) => void;
    onCancel?: () => void;
    onValidate?: NestedJsonInputValues;
}>;
export default function NestedJson(props: NestedJsonProps): React.ReactElement;
"
`;

exports[`amplify form renderer tests custom form tests should render sectional elements 1`] = `
"/* eslint-disable */
import * as React from \\"react\\";
import { fetchByPath, validateField } from \\"./utils\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import {
  Button,
  Divider,
  Flex,
  Grid,
  Heading,
  Text,
  TextField,
} from \\"@aws-amplify/ui-react\\";
export default function CustomWithSectionalElements(props) {
  const {
    onSubmit: customWithSectionalElementsOnSubmit,
    onCancel,
    onValidate,
    overrides,
    ...rest
  } = props;
  const [name, setName] = React.useState(undefined);
  const [errors, setErrors] = React.useState({});
  const validations = {
    name: [],
  };
  const runValidationTasks = async (fieldName, value) => {
    let validationResponse = validateField(value, validations[fieldName]);
    const customValidator = fetchByPath(onValidate, fieldName);
    if (customValidator) {
      validationResponse = await customValidator(value, validationResponse);
    }
    setErrors((errors) => ({ ...errors, [fieldName]: validationResponse }));
    return validationResponse;
  };
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault();
        const modelFields = {
          name,
        };
        const validationResponses = await Promise.all(
          Object.keys(validations).map((fieldName) =>
            runValidationTasks(fieldName, modelFields[fieldName])
          )
        );
        if (validationResponses.some((r) => r.hasError)) {
          return;
        }
        await customWithSectionalElementsOnSubmit(modelFields);
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"CustomWithSectionalElements\\")}
    >
      <Grid
        columnGap=\\"15px\\"
        rowGap=\\"15px\\"
        padding=\\"20px\\"
        {...getOverrideProps(overrides, \\"CustomWithSectionalElementsGrid\\")}
      >
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid0\\")}
        >
          <Heading
            level={2}
            children=\\"Create a Post\\"
            {...getOverrideProps(overrides, \\"myHeading\\")}
          ></Heading>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid1\\")}
        >
          <TextField
            label=\\"Label\\"
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"name\\", value);
              setName(value);
            }}
            errorMessage={errors.name?.errorMessage}
            hasError={errors.name?.hasError}
            {...getOverrideProps(overrides, \\"name\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid2\\")}
        >
          <Text
            children=\\"Did you put your name above?\\"
            {...getOverrideProps(overrides, \\"myText\\")}
          ></Text>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid3\\")}
        >
          <Divider
            orientation=\\"horizontal\\"
            {...getOverrideProps(overrides, \\"myDivider\\")}
          ></Divider>
        </Grid>
      </Grid>
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          children=\\"Clear\\"
          type=\\"reset\\"
          {...getOverrideProps(overrides, \\"ClearButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            children=\\"Cancel\\"
            type=\\"button\\"
            onClick={() => {
              onCancel && onCancel();
            }}
            {...getOverrideProps(overrides, \\"CancelButton\\")}
          ></Button>
          <Button
            children=\\"Submit\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={Object.values(errors).some((e) => e.hasError)}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
    </form>
  );
}
"
`;

exports[`amplify form renderer tests custom form tests should render sectional elements 2`] = `
"import * as React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { DividerProps, GridProps, HeadingProps, TextFieldProps, TextProps } from \\"@aws-amplify/ui-react\\";
export declare type ValidationResponse = {
    hasError: boolean;
    errorMessage?: string;
};
export declare type ValidationFunction<T> = (value: T, validationResponse: ValidationResponse) => ValidationResponse | Promise<ValidationResponse>;
export declare type CustomWithSectionalElementsInputValues = {
    name?: ValidationFunction<string>;
};
export declare type CustomWithSectionalElementsOverridesProps = {
    CustomWithSectionalElementsGrid?: GridProps;
    RowGrid0?: GridProps;
    myHeading?: HeadingProps;
    RowGrid1?: GridProps;
    name?: TextFieldProps;
    RowGrid2?: GridProps;
    myText?: TextProps;
    RowGrid3?: GridProps;
    myDivider?: DividerProps;
} & EscapeHatchProps;
export declare type CustomWithSectionalElementsProps = React.PropsWithChildren<{
    overrides?: CustomWithSectionalElementsOverridesProps | undefined | null;
} & {
    onSubmit: (fields: Record<string, string>) => void;
    onCancel?: () => void;
    onValidate?: CustomWithSectionalElementsInputValues;
}>;
export default function CustomWithSectionalElements(props: CustomWithSectionalElementsProps): React.ReactElement;
"
`;

exports[`amplify form renderer tests datastore form tests should generate a create form 1`] = `
"/* eslint-disable */
import * as React from \\"react\\";
import { fetchByPath, validateField } from \\"./utils\\";
import { Post } from \\"../models\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import { Button, Flex, Grid, TextField } from \\"@aws-amplify/ui-react\\";
import { DataStore } from \\"aws-amplify\\";
export default function MyPostForm(props) {
  const {
    onSubmitBefore,
    onSubmitComplete,
    onCancel,
    onValidate,
    overrides,
    ...rest
  } = props;
  const [caption, setCaption] = React.useState(undefined);
  const [username, setUsername] = React.useState(undefined);
  const [post_url, setPost_url] = React.useState(undefined);
  const [profile_url, setProfile_url] = React.useState(undefined);
  const [errors, setErrors] = React.useState({});
  const validations = {
    caption: [],
    username: [],
    post_url: [{ type: \\"URL\\" }],
    profile_url: [{ type: \\"URL\\" }],
  };
  const runValidationTasks = async (fieldName, value) => {
    let validationResponse = validateField(value, validations[fieldName]);
    const customValidator = fetchByPath(onValidate, fieldName);
    if (customValidator) {
      validationResponse = await customValidator(value, validationResponse);
    }
    setErrors((errors) => ({ ...errors, [fieldName]: validationResponse }));
    return validationResponse;
  };
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault();
        let modelFields = {
          caption,
          username,
          post_url,
          profile_url,
        };
        const validationResponses = await Promise.all(
          Object.keys(validations).map((fieldName) =>
            runValidationTasks(fieldName, modelFields[fieldName])
          )
        );
        if (validationResponses.some((r) => r.hasError)) {
          return;
        }
        if (onSubmitBefore) {
          modelFields = onSubmitBefore(modelFields);
        }
        try {
          await DataStore.save(new Post(modelFields));
          if (onSubmitComplete) {
            onSubmitComplete({ saveSuccessful: true });
          }
        } catch (err) {
          if (onSubmitComplete) {
            onSubmitComplete({
              saveSuccessful: false,
              errorMessage: err.message,
            });
          }
        }
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"MyPostForm\\")}
    >
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          children=\\"Clear\\"
          type=\\"reset\\"
          {...getOverrideProps(overrides, \\"ClearButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            children=\\"Cancel\\"
            type=\\"button\\"
            onClick={() => {
              onCancel && onCancel();
            }}
            {...getOverrideProps(overrides, \\"CancelButton\\")}
          ></Button>
          <Button
            children=\\"Submit\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={Object.values(errors).some((e) => e.hasError)}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
      <Grid
        columnGap=\\"15px\\"
        rowGap=\\"15px\\"
        padding=\\"20px\\"
        {...getOverrideProps(overrides, \\"MyPostFormGrid\\")}
      >
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid0\\")}
        >
          <TextField
            label=\\"Caption\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"caption\\", value);
              setCaption(value);
            }}
            errorMessage={errors.caption?.errorMessage}
            hasError={errors.caption?.hasError}
            {...getOverrideProps(overrides, \\"caption\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid1\\")}
        >
          <TextField
            label=\\"Username\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"username\\", value);
              setUsername(value);
            }}
            errorMessage={errors.username?.errorMessage}
            hasError={errors.username?.hasError}
            {...getOverrideProps(overrides, \\"username\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid2\\")}
        >
          <TextField
            label=\\"Post url\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"post_url\\", value);
              setPost_url(value);
            }}
            errorMessage={errors.post_url?.errorMessage}
            hasError={errors.post_url?.hasError}
            {...getOverrideProps(overrides, \\"post_url\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid3\\")}
        >
          <TextField
            label=\\"Profile url\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"profile_url\\", value);
              setProfile_url(value);
            }}
            errorMessage={errors.profile_url?.errorMessage}
            hasError={errors.profile_url?.hasError}
            {...getOverrideProps(overrides, \\"profile_url\\")}
          ></TextField>
        </Grid>
      </Grid>
    </form>
  );
}
"
`;

exports[`amplify form renderer tests datastore form tests should generate a create form 2`] = `
"import * as React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { GridProps, TextFieldProps } from \\"@aws-amplify/ui-react\\";
export declare type ValidationResponse = {
    hasError: boolean;
    errorMessage?: string;
};
export declare type ValidationFunction<T> = (value: T, validationResponse: ValidationResponse) => ValidationResponse | Promise<ValidationResponse>;
export declare type MyPostFormInputValues = {
    caption?: ValidationFunction<string>;
    username?: ValidationFunction<string>;
    post_url?: ValidationFunction<string>;
    profile_url?: ValidationFunction<string>;
};
export declare type MyPostFormOverridesProps = {
    MyPostFormGrid?: GridProps;
    RowGrid0?: GridProps;
    caption?: TextFieldProps;
    RowGrid1?: GridProps;
    username?: TextFieldProps;
    RowGrid2?: GridProps;
    post_url?: TextFieldProps;
    RowGrid3?: GridProps;
    profile_url?: TextFieldProps;
} & EscapeHatchProps;
export declare type MyPostFormProps = React.PropsWithChildren<{
    overrides?: MyPostFormOverridesProps | undefined | null;
} & {
    onSubmitBefore?: (fields: Record<string, string>) => Record<string, string>;
    onSubmitComplete?: ({ saveSuccessful, errorMessage }: {
        saveSuccessful: boolean;
        errorMessage?: string;
    }) => void;
    onCancel?: () => void;
    onValidate?: MyPostFormInputValues;
}>;
export default function MyPostForm(props: MyPostFormProps): React.ReactElement;
"
`;

exports[`amplify form renderer tests datastore form tests should generate a update form 1`] = `
"/* eslint-disable */
import * as React from \\"react\\";
import { fetchByPath, validateField } from \\"./utils\\";
import { Post } from \\"../models\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import {
  Button,
  Flex,
  Grid,
  TextAreaField,
  TextField,
} from \\"@aws-amplify/ui-react\\";
import { DataStore } from \\"aws-amplify\\";
export default function MyPostForm(props) {
  const {
    id,
    post,
    onSubmitBefore,
    onSubmitComplete,
    onCancel,
    onValidate,
    overrides,
    ...rest
  } = props;
  const [TextAreaFieldbbd63464, setTextAreaFieldbbd63464] =
    React.useState(undefined);
  const [caption, setCaption] = React.useState(undefined);
  const [username, setUsername] = React.useState(undefined);
  const [profile_url, setProfile_url] = React.useState(undefined);
  const [post_url, setPost_url] = React.useState(undefined);
  const [errors, setErrors] = React.useState({});
  const [postRecord, setPostRecord] = React.useState(post);
  React.useEffect(() => {
    const queryData = async () => {
      const record = id ? await DataStore.query(Post, id) : post;
      setPostRecord(record);
    };
    queryData();
  }, [id, post]);
  const validations = {
    TextAreaFieldbbd63464: [],
    caption: [],
    username: [],
    profile_url: [{ type: \\"URL\\" }],
    post_url: [{ type: \\"URL\\" }],
  };
  const runValidationTasks = async (fieldName, value) => {
    let validationResponse = validateField(value, validations[fieldName]);
    const customValidator = fetchByPath(onValidate, fieldName);
    if (customValidator) {
      validationResponse = await customValidator(value, validationResponse);
    }
    setErrors((errors) => ({ ...errors, [fieldName]: validationResponse }));
    return validationResponse;
  };
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault();
        let modelFields = {
          TextAreaFieldbbd63464,
          caption,
          username,
          profile_url,
          post_url,
        };
        const validationResponses = await Promise.all(
          Object.keys(validations).map((fieldName) =>
            runValidationTasks(fieldName, modelFields[fieldName])
          )
        );
        if (validationResponses.some((r) => r.hasError)) {
          return;
        }
        if (onSubmitBefore) {
          modelFields = onSubmitBefore(modelFields);
        }
        try {
          await DataStore.save(
            Post.copyOf(postRecord, (updated) => {
              Object.assign(updated, modelFields);
            })
          );
          if (onSubmitComplete) {
            onSubmitComplete({ saveSuccessful: true });
          }
        } catch (err) {
          if (onSubmitComplete) {
            onSubmitComplete({
              saveSuccessful: false,
              errorMessage: err.message,
            });
          }
        }
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"MyPostForm\\")}
    >
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          children=\\"Clear\\"
          type=\\"reset\\"
          {...getOverrideProps(overrides, \\"ClearButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            children=\\"Cancel\\"
            type=\\"button\\"
            onClick={() => {
              onCancel && onCancel();
            }}
            {...getOverrideProps(overrides, \\"CancelButton\\")}
          ></Button>
          <Button
            children=\\"Submit\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={Object.values(errors).some((e) => e.hasError)}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
      <Grid
        columnGap=\\"15px\\"
        rowGap=\\"15px\\"
        padding=\\"20px\\"
        {...getOverrideProps(overrides, \\"MyPostFormGrid\\")}
      >
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid0\\")}
        >
          <TextAreaField
            label=\\"Label\\"
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"TextAreaFieldbbd63464\\", value);
              setTextAreaFieldbbd63464(value);
            }}
            errorMessage={errors.TextAreaFieldbbd63464?.errorMessage}
            hasError={errors.TextAreaFieldbbd63464?.hasError}
            {...getOverrideProps(overrides, \\"TextAreaFieldbbd63464\\")}
          ></TextAreaField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid1\\")}
        >
          <TextField
            label=\\"Caption\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"caption\\", value);
              setCaption(value);
            }}
            errorMessage={errors.caption?.errorMessage}
            hasError={errors.caption?.hasError}
            {...getOverrideProps(overrides, \\"caption\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid2\\")}
        >
          <TextField
            label=\\"Username\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"username\\", value);
              setUsername(value);
            }}
            errorMessage={errors.username?.errorMessage}
            hasError={errors.username?.hasError}
            {...getOverrideProps(overrides, \\"username\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid3\\")}
        >
          <TextField
            label=\\"Profile url\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"profile_url\\", value);
              setProfile_url(value);
            }}
            errorMessage={errors.profile_url?.errorMessage}
            hasError={errors.profile_url?.hasError}
            {...getOverrideProps(overrides, \\"profile_url\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid4\\")}
        >
          <TextField
            label=\\"Post url\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"post_url\\", value);
              setPost_url(value);
            }}
            errorMessage={errors.post_url?.errorMessage}
            hasError={errors.post_url?.hasError}
            {...getOverrideProps(overrides, \\"post_url\\")}
          ></TextField>
        </Grid>
      </Grid>
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          children=\\"Clear\\"
          type=\\"reset\\"
          {...getOverrideProps(overrides, \\"ClearButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            children=\\"Cancel\\"
            type=\\"button\\"
            onClick={() => {
              onCancel && onCancel();
            }}
            {...getOverrideProps(overrides, \\"CancelButton\\")}
          ></Button>
          <Button
            children=\\"Submit\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={Object.values(errors).some((e) => e.hasError)}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
    </form>
  );
}
"
`;

exports[`amplify form renderer tests datastore form tests should generate a update form 2`] = `
"import * as React from \\"react\\";
import { Post } from \\"../models\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { GridProps, TextAreaFieldProps, TextFieldProps } from \\"@aws-amplify/ui-react\\";
export declare type ValidationResponse = {
    hasError: boolean;
    errorMessage?: string;
};
export declare type ValidationFunction<T> = (value: T, validationResponse: ValidationResponse) => ValidationResponse | Promise<ValidationResponse>;
export declare type MyPostFormInputValues = {
    TextAreaFieldbbd63464?: ValidationFunction<string>;
    caption?: ValidationFunction<string>;
    username?: ValidationFunction<string>;
    profile_url?: ValidationFunction<string>;
    post_url?: ValidationFunction<string>;
};
export declare type MyPostFormOverridesProps = {
    MyPostFormGrid?: GridProps;
    RowGrid0?: GridProps;
    TextAreaFieldbbd63464?: TextAreaFieldProps;
    RowGrid1?: GridProps;
    caption?: TextFieldProps;
    RowGrid2?: GridProps;
    username?: TextFieldProps;
    RowGrid3?: GridProps;
    profile_url?: TextFieldProps;
    RowGrid4?: GridProps;
    post_url?: TextFieldProps;
} & EscapeHatchProps;
export declare type MyPostFormProps = React.PropsWithChildren<{
    overrides?: MyPostFormOverridesProps | undefined | null;
} & {
    id?: string;
    post?: Post;
    onSubmitBefore?: (fields: Record<string, string>) => Record<string, string>;
    onSubmitComplete?: ({ saveSuccessful, errorMessage }: {
        saveSuccessful: boolean;
        errorMessage?: string;
    }) => void;
    onCancel?: () => void;
    onValidate?: MyPostFormInputValues;
}>;
export default function MyPostForm(props: MyPostFormProps): React.ReactElement;
"
`;

exports[`amplify form renderer tests datastore form tests should render a form with multiple date types 1`] = `
"/* eslint-disable */
import * as React from \\"react\\";
import { fetchByPath, validateField } from \\"./utils\\";
import { InputGallery } from \\"../models\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import {
  Button,
  CheckboxField,
  Flex,
  Grid,
  Radio,
  RadioGroupField,
  TextField,
  ToggleButton,
} from \\"@aws-amplify/ui-react\\";
import { DataStore } from \\"aws-amplify\\";
export default function InputGalleryCreateForm(props) {
  const {
    onSubmitBefore,
    onSubmitComplete,
    onCancel,
    onValidate,
    overrides,
    ...rest
  } = props;
  const [num, setNum] = React.useState(undefined);
  const [rootbeer, setRootbeer] = React.useState(undefined);
  const [attend, setAttend] = React.useState(undefined);
  const [maybeSlide, setMaybeSlide] = React.useState(undefined);
  const [maybeCheck, setMaybeCheck] = React.useState(undefined);
  const [timestamp, setTimestamp] = React.useState(undefined);
  const [ippy, setIppy] = React.useState(undefined);
  const [timeisnow, setTimeisnow] = React.useState(undefined);
  const [errors, setErrors] = React.useState({});
  const validations = {
    num: [],
    rootbeer: [],
    attend: [{ type: \\"Required\\" }],
    maybeSlide: [],
    maybeCheck: [],
    timestamp: [],
    ippy: [{ type: \\"IpAddress\\" }],
    timeisnow: [],
  };
  const runValidationTasks = async (fieldName, value) => {
    let validationResponse = validateField(value, validations[fieldName]);
    const customValidator = fetchByPath(onValidate, fieldName);
    if (customValidator) {
      validationResponse = await customValidator(value, validationResponse);
    }
    setErrors((errors) => ({ ...errors, [fieldName]: validationResponse }));
    return validationResponse;
  };
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault();
        let modelFields = {
          num,
          rootbeer,
          attend,
          maybeSlide,
          maybeCheck,
          timestamp,
          ippy,
          timeisnow,
        };
        const validationResponses = await Promise.all(
          Object.keys(validations).map((fieldName) =>
            runValidationTasks(fieldName, modelFields[fieldName])
          )
        );
        if (validationResponses.some((r) => r.hasError)) {
          return;
        }
        if (onSubmitBefore) {
          modelFields = onSubmitBefore(modelFields);
        }
        try {
          await DataStore.save(new InputGallery(modelFields));
          if (onSubmitComplete) {
            onSubmitComplete({ saveSuccessful: true });
          }
        } catch (err) {
          if (onSubmitComplete) {
            onSubmitComplete({
              saveSuccessful: false,
              errorMessage: err.message,
            });
          }
        }
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"InputGalleryCreateForm\\")}
    >
      <Grid
        columnGap=\\"15px\\"
        rowGap=\\"15px\\"
        padding=\\"20px\\"
        {...getOverrideProps(overrides, \\"InputGalleryCreateFormGrid\\")}
      >
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid0\\")}
        >
          <TextField
            label=\\"Num\\"
            isRequired={false}
            isReadOnly={false}
            type=\\"number\\"
            onChange={async (e) => {
              const value = parseInt(e.target.value);
              await runValidationTasks(\\"num\\", value);
              setNum(value);
            }}
            errorMessage={errors.num?.errorMessage}
            hasError={errors.num?.hasError}
            {...getOverrideProps(overrides, \\"num\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid1\\")}
        >
          <TextField
            label=\\"Rootbeer\\"
            isRequired={false}
            isReadOnly={false}
            type=\\"number\\"
            onChange={async (e) => {
              const value = Number(e.target.value);
              await runValidationTasks(\\"rootbeer\\", value);
              setRootbeer(value);
            }}
            errorMessage={errors.rootbeer?.errorMessage}
            hasError={errors.rootbeer?.hasError}
            {...getOverrideProps(overrides, \\"rootbeer\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid2\\")}
        >
          <RadioGroupField
            label=\\"Attend\\"
            name=\\"attend\\"
            isReadOnly={false}
            isRequired=\\"false\\"
            onChange={async (e) => {
              const value = e.target.value === \\"true\\";
              await runValidationTasks(\\"attend\\", value);
              setAttend(value);
            }}
            errorMessage={errors.attend?.errorMessage}
            hasError={errors.attend?.hasError}
            {...getOverrideProps(overrides, \\"attend\\")}
          >
            <Radio
              children=\\"Yes\\"
              value=\\"true\\"
              {...getOverrideProps(overrides, \\"attendRadio0\\")}
            ></Radio>
            <Radio
              children=\\"No\\"
              value=\\"false\\"
              {...getOverrideProps(overrides, \\"attendRadio1\\")}
            ></Radio>
          </RadioGroupField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid3\\")}
        >
          <ToggleButton
            children=\\"Maybe slide\\"
            isDisabled={false}
            defaultPressed={false}
            onChange={async (e) => {
              const value = e.target.checked;
              await runValidationTasks(\\"maybeSlide\\", value);
              setMaybeSlide(value);
            }}
            errorMessage={errors.maybeSlide?.errorMessage}
            hasError={errors.maybeSlide?.hasError}
            {...getOverrideProps(overrides, \\"maybeSlide\\")}
          ></ToggleButton>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid4\\")}
        >
          <CheckboxField
            label=\\"Maybe check\\"
            name=\\"maybeCheck\\"
            value=\\"maybeCheck\\"
            isDisabled={false}
            defaultChecked={false}
            onChange={async (e) => {
              const value = e.target.checked;
              await runValidationTasks(\\"maybeCheck\\", value);
              setMaybeCheck(value);
            }}
            errorMessage={errors.maybeCheck?.errorMessage}
            hasError={errors.maybeCheck?.hasError}
            {...getOverrideProps(overrides, \\"maybeCheck\\")}
          ></CheckboxField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid5\\")}
        >
          <TextField
            label=\\"Timestamp\\"
            isRequired={false}
            isReadOnly={false}
            type=\\"datetime-local\\"
            onChange={async (e) => {
              const value = Number(new Date(e.target.value));
              await runValidationTasks(\\"timestamp\\", value);
              setTimestamp(value);
            }}
            errorMessage={errors.timestamp?.errorMessage}
            hasError={errors.timestamp?.hasError}
            {...getOverrideProps(overrides, \\"timestamp\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid6\\")}
        >
          <TextField
            label=\\"Ippy\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"ippy\\", value);
              setIppy(value);
            }}
            errorMessage={errors.ippy?.errorMessage}
            hasError={errors.ippy?.hasError}
            {...getOverrideProps(overrides, \\"ippy\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid7\\")}
        >
          <TextField
            label=\\"Timeisnow\\"
            isRequired={false}
            isReadOnly={false}
            type=\\"time\\"
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"timeisnow\\", value);
              setTimeisnow(value);
            }}
            errorMessage={errors.timeisnow?.errorMessage}
            hasError={errors.timeisnow?.hasError}
            {...getOverrideProps(overrides, \\"timeisnow\\")}
          ></TextField>
        </Grid>
      </Grid>
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          children=\\"Clear\\"
          type=\\"reset\\"
          {...getOverrideProps(overrides, \\"ClearButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            children=\\"Cancel\\"
            type=\\"button\\"
            onClick={() => {
              onCancel && onCancel();
            }}
            {...getOverrideProps(overrides, \\"CancelButton\\")}
          ></Button>
          <Button
            children=\\"Submit\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={Object.values(errors).some((e) => e.hasError)}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
    </form>
  );
}
"
`;

exports[`amplify form renderer tests datastore form tests should render a form with multiple date types 2`] = `
"import * as React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { CheckboxFieldProps, GridProps, RadioGroupFieldProps, TextFieldProps, ToggleButtonProps } from \\"@aws-amplify/ui-react\\";
export declare type ValidationResponse = {
    hasError: boolean;
    errorMessage?: string;
};
export declare type ValidationFunction<T> = (value: T, validationResponse: ValidationResponse) => ValidationResponse | Promise<ValidationResponse>;
export declare type InputGalleryCreateFormInputValues = {
    num?: ValidationFunction<number>;
    rootbeer?: ValidationFunction<number>;
    attend?: ValidationFunction<boolean>;
    maybeSlide?: ValidationFunction<boolean>;
    maybeCheck?: ValidationFunction<boolean>;
    timestamp?: ValidationFunction<number>;
    ippy?: ValidationFunction<string>;
    timeisnow?: ValidationFunction<string>;
};
export declare type InputGalleryCreateFormOverridesProps = {
    InputGalleryCreateFormGrid?: GridProps;
    RowGrid0?: GridProps;
    num?: TextFieldProps;
    RowGrid1?: GridProps;
    rootbeer?: TextFieldProps;
    RowGrid2?: GridProps;
    attend?: RadioGroupFieldProps;
    RowGrid3?: GridProps;
    maybeSlide?: ToggleButtonProps;
    RowGrid4?: GridProps;
    maybeCheck?: CheckboxFieldProps;
    RowGrid5?: GridProps;
    timestamp?: TextFieldProps;
    RowGrid6?: GridProps;
    ippy?: TextFieldProps;
    RowGrid7?: GridProps;
    timeisnow?: TextFieldProps;
} & EscapeHatchProps;
export declare type InputGalleryCreateFormProps = React.PropsWithChildren<{
    overrides?: InputGalleryCreateFormOverridesProps | undefined | null;
} & {
    onSubmitBefore?: (fields: Record<string, string>) => Record<string, string>;
    onSubmitComplete?: ({ saveSuccessful, errorMessage }: {
        saveSuccessful: boolean;
        errorMessage?: string;
    }) => void;
    onCancel?: () => void;
    onValidate?: InputGalleryCreateFormInputValues;
}>;
export default function InputGalleryCreateForm(props: InputGalleryCreateFormProps): React.ReactElement;
"
`;
