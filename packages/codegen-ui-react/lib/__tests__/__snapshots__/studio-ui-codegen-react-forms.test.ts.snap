// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`amplify form renderer tests custom form tests should render a custom backed form 1`] = `
"/* eslint-disable */
import * as React from \\"react\\";
import { validateField } from \\"@aws-amplify/codegen-ui-react\\";
import {
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import {
  Button,
  Flex,
  Grid,
  Radio,
  RadioGroupField,
  SelectField,
  TextField,
} from \\"@aws-amplify/ui-react\\";
export default function customDataForm(props) {
  const {
    onSubmit: customDataFormOnSubmit,
    onCancel,
    onValidate,
    overrides,
    ...rest
  } = props;
  const [nameFieldError, setNameFieldError] = useStateMutationAction({
    hasError: false,
    errorMessage: \\"\\",
  });
  const [emailFieldError, setEmailFieldError] = useStateMutationAction({
    hasError: false,
    errorMessage: \\"\\",
  });
  const [cityFieldError, setCityFieldError] = useStateMutationAction({
    hasError: false,
    errorMessage: \\"\\",
  });
  const [categoryFieldError, setCategoryFieldError] = useStateMutationAction({
    hasError: false,
    errorMessage: \\"\\",
  });
  const [modelFields, setModelFields] = useStateMutationAction({});
  const [formValid, setFormValid] = useStateMutationAction(true);
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault();
        await customDataFormOnSubmit(modelFields);
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"customDataForm\\")}
    >
      <Grid
        columnGap=\\"15px\\"
        rowGap=\\"15px\\"
        {...getOverrideProps(overrides, \\"customDataFormGrid\\")}
      >
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid0\\")}
        >
          <TextField
            label=\\"name\\"
            isRequired={true}
            defaultValue=\\"John Doe\\"
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"name\\"]
                ? await onValidate[\\"name\\"](value)
                : validateField(value, []);
              setNameFieldError({ ...nameFieldError, ...isValidResult });
              setFormValid(!nameFieldError.hasError);
              setModelFields({ ...modelFields, name: value });
            }}
            errorMessage={nameFieldError.errorMessage}
            hasError={nameFieldError.hasError}
            {...getOverrideProps(overrides, \\"name\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid1\\")}
        >
          <TextField
            label=\\"E-mail\\"
            isRequired={true}
            defaultValue=\\"johndoe@amplify.com\\"
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"email\\"]
                ? await onValidate[\\"email\\"](value)
                : validateField(value, []);
              setEmailFieldError({ ...emailFieldError, ...isValidResult });
              setFormValid(!emailFieldError.hasError);
              setModelFields({ ...modelFields, email: value });
            }}
            errorMessage={emailFieldError.errorMessage}
            hasError={emailFieldError.hasError}
            {...getOverrideProps(overrides, \\"email\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid2\\")}
        >
          <SelectField
            label=\\"Label\\"
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"city\\"]
                ? await onValidate[\\"city\\"](value)
                : validateField(value, []);
              setCityFieldError({ ...cityFieldError, ...isValidResult });
              setFormValid(!cityFieldError.hasError);
              setModelFields({ ...modelFields, city: value });
            }}
            errorMessage={cityFieldError.errorMessage}
            hasError={cityFieldError.hasError}
            {...getOverrideProps(overrides, \\"city\\")}
          >
            <option
              children=\\"Los Angeles\\"
              value=\\"Los Angeles\\"
              {...getOverrideProps(overrides, \\"cityoption0\\")}
            ></option>
            <option
              children=\\"Houston\\"
              value=\\"Houston\\"
              {...getOverrideProps(overrides, \\"cityoption1\\")}
            ></option>
            <option
              children=\\"New York\\"
              value=\\"New York\\"
              selected={true}
              {...getOverrideProps(overrides, \\"cityoption2\\")}
            ></option>
          </SelectField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid3\\")}
        >
          <RadioGroupField
            label=\\"Label\\"
            name=\\"fieldName\\"
            defaultValue=\\"Hobbies\\"
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"category\\"]
                ? await onValidate[\\"category\\"](value)
                : validateField(value, []);
              setCategoryFieldError({
                ...categoryFieldError,
                ...isValidResult,
              });
              setFormValid(!categoryFieldError.hasError);
              setModelFields({ ...modelFields, category: value });
            }}
            errorMessage={categoryFieldError.errorMessage}
            hasError={categoryFieldError.hasError}
            {...getOverrideProps(overrides, \\"category\\")}
          >
            <Radio
              children=\\"Hobbies\\"
              value=\\"Hobbies\\"
              {...getOverrideProps(overrides, \\"categoryRadio0\\")}
            ></Radio>
            <Radio
              children=\\"Travel\\"
              value=\\"Travel\\"
              {...getOverrideProps(overrides, \\"categoryRadio1\\")}
            ></Radio>
            <Radio
              children=\\"Health\\"
              value=\\"Health\\"
              {...getOverrideProps(overrides, \\"categoryRadio2\\")}
            ></Radio>
          </RadioGroupField>
        </Grid>
      </Grid>
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          children=\\"go back\\"
          type=\\"button\\"
          onClick={() => {
            onCancel && onCancel();
          }}
          {...getOverrideProps(overrides, \\"CancelButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            children=\\"empty\\"
            type=\\"reset\\"
            {...getOverrideProps(overrides, \\"ClearButton\\")}
          ></Button>
          <Button
            children=\\"create\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={!formValid}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
    </form>
  );
}
"
`;

exports[`amplify form renderer tests custom form tests should render a custom backed form 2`] = `
"import * as React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { GridProps, RadioGroupFieldProps, SelectFieldProps, TextFieldProps } from \\"@aws-amplify/ui-react\\";
export declare type customDataFormOverridesProps = {
    customDataFormGrid: GridProps;
    RowGrid0: GridProps;
    name: TextFieldProps;
    RowGrid1: GridProps;
    email: TextFieldProps;
    RowGrid2: GridProps;
    city: SelectFieldProps;
    RowGrid3: GridProps;
    category: RadioGroupFieldProps;
} & EscapeHatchProps;
export declare type customDataFormProps = React.PropsWithChildren<{
    overrides?: customDataFormOverridesProps | undefined | null;
} & {
    onSubmit: (fields: Record<string, string>) => void;
    onCancel?: () => void;
    onValidate?: Record<string, (value: any) => Promise<{
        hasError: boolean;
        errorMessage?: string;
    }>>;
}>;
export default function customDataForm(props: customDataFormProps): React.ReactElement;
"
`;

exports[`amplify form renderer tests datastore form tests should generate a create form 1`] = `
"/* eslint-disable */
import * as React from \\"react\\";
import { validateField } from \\"@aws-amplify/codegen-ui-react\\";
import {
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Post } from \\"../models\\";
import { Button, Flex, Grid, TextField } from \\"@aws-amplify/ui-react\\";
import { DataStore } from \\"aws-amplify\\";
export default function myPostForm(props) {
  const {
    onSubmitBefore,
    onSubmitComplete,
    onCancel,
    onValidate,
    overrides,
    ...rest
  } = props;
  const [captionFieldError, setCaptionFieldError] = useStateMutationAction({
    hasError: false,
    errorMessage: \\"\\",
  });
  const [usernameFieldError, setUsernameFieldError] = useStateMutationAction({
    hasError: false,
    errorMessage: \\"\\",
  });
  const [post_urlFieldError, setPost_urlFieldError] = useStateMutationAction({
    hasError: false,
    errorMessage: \\"\\",
  });
  const [profile_urlFieldError, setProfile_urlFieldError] =
    useStateMutationAction({ hasError: false, errorMessage: \\"\\" });
  const [modelFields, setModelFields] = useStateMutationAction({});
  const [formValid, setFormValid] = useStateMutationAction(true);
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault();
        if (onSubmitBefore) {
          setModelFields(onSubmitBefore({ fields: modelFields }));
        }
        try {
          await DataStore.save(new Post(modelFields));
          if (onSubmitComplete) {
            onSubmitComplete({ saveSuccessful: true });
          }
        } catch (err) {
          if (onSubmitComplete) {
            onSubmitComplete({
              saveSuccessful: false,
              errorMessage: err.message,
            });
          }
        }
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"myPostForm\\")}
    >
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          children=\\"Cancel\\"
          type=\\"button\\"
          onClick={() => {
            onCancel && onCancel();
          }}
          {...getOverrideProps(overrides, \\"CancelButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            children=\\"Clear\\"
            type=\\"reset\\"
            {...getOverrideProps(overrides, \\"ClearButton\\")}
          ></Button>
          <Button
            children=\\"Submit\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={!formValid}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
      <Grid
        columnGap=\\"15px\\"
        rowGap=\\"15px\\"
        {...getOverrideProps(overrides, \\"myPostFormGrid\\")}
      >
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid0\\")}
        >
          <TextField
            label=\\"Caption\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"caption\\"]
                ? await onValidate[\\"caption\\"](value)
                : validateField(value, []);
              setCaptionFieldError({ ...captionFieldError, ...isValidResult });
              setFormValid(!captionFieldError.hasError);
              setModelFields({ ...modelFields, caption: value });
            }}
            errorMessage={captionFieldError.errorMessage}
            hasError={captionFieldError.hasError}
            {...getOverrideProps(overrides, \\"caption\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid1\\")}
        >
          <TextField
            label=\\"Username\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"username\\"]
                ? await onValidate[\\"username\\"](value)
                : validateField(value, []);
              setUsernameFieldError({
                ...usernameFieldError,
                ...isValidResult,
              });
              setFormValid(!usernameFieldError.hasError);
              setModelFields({ ...modelFields, username: value });
            }}
            errorMessage={usernameFieldError.errorMessage}
            hasError={usernameFieldError.hasError}
            {...getOverrideProps(overrides, \\"username\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid2\\")}
        >
          <TextField
            label=\\"Post url\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"post_url\\"]
                ? await onValidate[\\"post_url\\"](value)
                : validateField(value, [{ type: \\"URL\\" }]);
              setPost_urlFieldError({
                ...post_urlFieldError,
                ...isValidResult,
              });
              setFormValid(!post_urlFieldError.hasError);
              setModelFields({ ...modelFields, post_url: value });
            }}
            errorMessage={post_urlFieldError.errorMessage}
            hasError={post_urlFieldError.hasError}
            {...getOverrideProps(overrides, \\"post_url\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid3\\")}
        >
          <TextField
            label=\\"Profile url\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"profile_url\\"]
                ? await onValidate[\\"profile_url\\"](value)
                : validateField(value, [{ type: \\"URL\\" }]);
              setProfile_urlFieldError({
                ...profile_urlFieldError,
                ...isValidResult,
              });
              setFormValid(!profile_urlFieldError.hasError);
              setModelFields({ ...modelFields, profile_url: value });
            }}
            errorMessage={profile_urlFieldError.errorMessage}
            hasError={profile_urlFieldError.hasError}
            {...getOverrideProps(overrides, \\"profile_url\\")}
          ></TextField>
        </Grid>
      </Grid>
    </form>
  );
}
"
`;

exports[`amplify form renderer tests datastore form tests should generate a create form 2`] = `
"import * as React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { GridProps, TextFieldProps } from \\"@aws-amplify/ui-react\\";
export declare type myPostFormOverridesProps = {
    myPostFormGrid: GridProps;
    RowGrid0: GridProps;
    caption: TextFieldProps;
    RowGrid1: GridProps;
    username: TextFieldProps;
    RowGrid2: GridProps;
    post_url: TextFieldProps;
    RowGrid3: GridProps;
    profile_url: TextFieldProps;
} & EscapeHatchProps;
export declare type myPostFormProps = React.PropsWithChildren<{
    overrides?: myPostFormOverridesProps | undefined | null;
} & {
    onSubmitBefore?: (fields: Record<string, string>) => Record<string, string>;
    onSubmitComplete?: ({ saveSuccessful, errorMessage }: {
        saveSuccessful: boolean;
        errorMessage?: string;
    }) => void;
    onCancel?: () => void;
    onValidate?: Record<string, (value: any) => Promise<{
        hasError: boolean;
        errorMessage?: string;
    }>>;
}>;
export default function myPostForm(props: myPostFormProps): React.ReactElement;
"
`;

exports[`amplify form renderer tests datastore form tests should generate a update form 1`] = `
"/* eslint-disable */
import * as React from \\"react\\";
import { validateField } from \\"@aws-amplify/codegen-ui-react\\";
import {
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Post } from \\"../models\\";
import {
  Button,
  Flex,
  Grid,
  TextAreaField,
  TextField,
} from \\"@aws-amplify/ui-react\\";
import { DataStore } from \\"aws-amplify\\";
export default function myPostForm(props) {
  const {
    id,
    onSubmitBefore,
    onSubmitComplete,
    onCancel,
    onValidate,
    overrides,
    ...rest
  } = props;
  const [TextAreaFieldbbd63464FieldError, setTextAreaFieldbbd63464FieldError] =
    useStateMutationAction({ hasError: false, errorMessage: \\"\\" });
  const [captionFieldError, setCaptionFieldError] = useStateMutationAction({
    hasError: false,
    errorMessage: \\"\\",
  });
  const [usernameFieldError, setUsernameFieldError] = useStateMutationAction({
    hasError: false,
    errorMessage: \\"\\",
  });
  const [profile_urlFieldError, setProfile_urlFieldError] =
    useStateMutationAction({ hasError: false, errorMessage: \\"\\" });
  const [post_urlFieldError, setPost_urlFieldError] = useStateMutationAction({
    hasError: false,
    errorMessage: \\"\\",
  });
  const [modelFields, setModelFields] = useStateMutationAction({});
  const [formValid, setFormValid] = useStateMutationAction(true);
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault();
        if (onSubmitBefore) {
          setModelFields(onSubmitBefore({ fields: modelFields }));
        }
        try {
          const original = await DataStore.query(Post, id);
          await DataStore.save(
            Post.copyOf(original, (updated) => {
              Object.assign(updated, modelFields);
            })
          );
          if (onSubmitComplete) {
            onSubmitComplete({ saveSuccessful: true });
          }
        } catch (err) {
          if (onSubmitComplete) {
            onSubmitComplete({
              saveSuccessful: false,
              errorMessage: err.message,
            });
          }
        }
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"myPostForm\\")}
    >
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          children=\\"Cancel\\"
          type=\\"button\\"
          onClick={() => {
            onCancel && onCancel();
          }}
          {...getOverrideProps(overrides, \\"CancelButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            children=\\"Clear\\"
            type=\\"reset\\"
            {...getOverrideProps(overrides, \\"ClearButton\\")}
          ></Button>
          <Button
            children=\\"Submit\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={!formValid}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
      <Grid
        columnGap=\\"15px\\"
        rowGap=\\"15px\\"
        {...getOverrideProps(overrides, \\"myPostFormGrid\\")}
      >
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid0\\")}
        >
          <TextAreaField
            label=\\"Label\\"
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"TextAreaFieldbbd63464\\"]
                ? await onValidate[\\"TextAreaFieldbbd63464\\"](value)
                : validateField(value, []);
              setTextAreaFieldbbd63464FieldError({
                ...TextAreaFieldbbd63464FieldError,
                ...isValidResult,
              });
              setFormValid(!TextAreaFieldbbd63464FieldError.hasError);
              setModelFields({ ...modelFields, TextAreaFieldbbd63464: value });
            }}
            errorMessage={TextAreaFieldbbd63464FieldError.errorMessage}
            hasError={TextAreaFieldbbd63464FieldError.hasError}
            {...getOverrideProps(overrides, \\"TextAreaFieldbbd63464\\")}
          ></TextAreaField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid1\\")}
        >
          <TextField
            label=\\"Caption\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"caption\\"]
                ? await onValidate[\\"caption\\"](value)
                : validateField(value, []);
              setCaptionFieldError({ ...captionFieldError, ...isValidResult });
              setFormValid(!captionFieldError.hasError);
              setModelFields({ ...modelFields, caption: value });
            }}
            errorMessage={captionFieldError.errorMessage}
            hasError={captionFieldError.hasError}
            {...getOverrideProps(overrides, \\"caption\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid2\\")}
        >
          <TextField
            label=\\"Username\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"username\\"]
                ? await onValidate[\\"username\\"](value)
                : validateField(value, []);
              setUsernameFieldError({
                ...usernameFieldError,
                ...isValidResult,
              });
              setFormValid(!usernameFieldError.hasError);
              setModelFields({ ...modelFields, username: value });
            }}
            errorMessage={usernameFieldError.errorMessage}
            hasError={usernameFieldError.hasError}
            {...getOverrideProps(overrides, \\"username\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid3\\")}
        >
          <TextField
            label=\\"Profile url\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"profile_url\\"]
                ? await onValidate[\\"profile_url\\"](value)
                : validateField(value, [{ type: \\"URL\\" }]);
              setProfile_urlFieldError({
                ...profile_urlFieldError,
                ...isValidResult,
              });
              setFormValid(!profile_urlFieldError.hasError);
              setModelFields({ ...modelFields, profile_url: value });
            }}
            errorMessage={profile_urlFieldError.errorMessage}
            hasError={profile_urlFieldError.hasError}
            {...getOverrideProps(overrides, \\"profile_url\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid4\\")}
        >
          <TextField
            label=\\"Post url\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"post_url\\"]
                ? await onValidate[\\"post_url\\"](value)
                : validateField(value, [{ type: \\"URL\\" }]);
              setPost_urlFieldError({
                ...post_urlFieldError,
                ...isValidResult,
              });
              setFormValid(!post_urlFieldError.hasError);
              setModelFields({ ...modelFields, post_url: value });
            }}
            errorMessage={post_urlFieldError.errorMessage}
            hasError={post_urlFieldError.hasError}
            {...getOverrideProps(overrides, \\"post_url\\")}
          ></TextField>
        </Grid>
      </Grid>
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          children=\\"Cancel\\"
          type=\\"button\\"
          onClick={() => {
            onCancel && onCancel();
          }}
          {...getOverrideProps(overrides, \\"CancelButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            children=\\"Clear\\"
            type=\\"reset\\"
            {...getOverrideProps(overrides, \\"ClearButton\\")}
          ></Button>
          <Button
            children=\\"Submit\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={!formValid}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
    </form>
  );
}
"
`;

exports[`amplify form renderer tests datastore form tests should generate a update form 2`] = `
"import * as React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { GridProps, TextAreaFieldProps, TextFieldProps } from \\"@aws-amplify/ui-react\\";
export declare type myPostFormOverridesProps = {
    myPostFormGrid: GridProps;
    RowGrid0: GridProps;
    TextAreaFieldbbd63464: TextAreaFieldProps;
    RowGrid1: GridProps;
    caption: TextFieldProps;
    RowGrid2: GridProps;
    username: TextFieldProps;
    RowGrid3: GridProps;
    profile_url: TextFieldProps;
    RowGrid4: GridProps;
    post_url: TextFieldProps;
} & EscapeHatchProps;
export declare type myPostFormProps = React.PropsWithChildren<{
    overrides?: myPostFormOverridesProps | undefined | null;
} & {
    id: string;
    onSubmitBefore?: (fields: Record<string, string>) => Record<string, string>;
    onSubmitComplete?: ({ saveSuccessful, errorMessage }: {
        saveSuccessful: boolean;
        errorMessage?: string;
    }) => void;
    onCancel?: () => void;
    onValidate?: Record<string, (value: any) => Promise<{
        hasError: boolean;
        errorMessage?: string;
    }>>;
}>;
export default function myPostForm(props: myPostFormProps): React.ReactElement;
"
`;

exports[`amplify form renderer tests datastore form tests should render a form with multiple date types 1`] = `
"/* eslint-disable */
import * as React from \\"react\\";
import { validateField } from \\"@aws-amplify/codegen-ui-react\\";
import {
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { InputGallery } from \\"../models\\";
import {
  CheckboxField,
  Flex,
  Grid,
  Radio,
  RadioGroupField,
  TextField,
  ToggleButton,
} from \\"@aws-amplify/ui-react\\";
import { DataStore } from \\"aws-amplify\\";
export default function InputGalleryCreateForm(props) {
  const {
    onSubmitBefore,
    onSubmitComplete,
    onCancel,
    onValidate,
    overrides,
    ...rest
  } = props;
  const [numFieldError, setNumFieldError] = useStateMutationAction({
    hasError: false,
    errorMessage: \\"\\",
  });
  const [rootbeerFieldError, setRootbeerFieldError] = useStateMutationAction({
    hasError: false,
    errorMessage: \\"\\",
  });
  const [maybeFieldError, setMaybeFieldError] = useStateMutationAction({
    hasError: false,
    errorMessage: \\"\\",
  });
  const [maybeSlideFieldError, setMaybeSlideFieldError] =
    useStateMutationAction({ hasError: false, errorMessage: \\"\\" });
  const [maybeCheckFieldError, setMaybeCheckFieldError] =
    useStateMutationAction({ hasError: false, errorMessage: \\"\\" });
  const [timestampFieldError, setTimestampFieldError] = useStateMutationAction({
    hasError: false,
    errorMessage: \\"\\",
  });
  const [ippyFieldError, setIppyFieldError] = useStateMutationAction({
    hasError: false,
    errorMessage: \\"\\",
  });
  const [timeisnowFieldError, setTimeisnowFieldError] = useStateMutationAction({
    hasError: false,
    errorMessage: \\"\\",
  });
  const [modelFields, setModelFields] = useStateMutationAction({});
  const [formValid, setFormValid] = useStateMutationAction(true);
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault();
        if (onSubmitBefore) {
          setModelFields(onSubmitBefore({ fields: modelFields }));
        }
        try {
          await DataStore.save(new InputGallery(modelFields));
          if (onSubmitComplete) {
            onSubmitComplete({ saveSuccessful: true });
          }
        } catch (err) {
          if (onSubmitComplete) {
            onSubmitComplete({
              saveSuccessful: false,
              errorMessage: err.message,
            });
          }
        }
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"InputGalleryCreateForm\\")}
    >
      <Grid
        columnGap=\\"15px\\"
        rowGap=\\"15px\\"
        {...getOverrideProps(overrides, \\"InputGalleryCreateFormGrid\\")}
      >
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid0\\")}
        >
          <TextField
            label=\\"Num\\"
            isRequired={false}
            isReadOnly={false}
            type=\\"number\\"
            onChange={async (e) => {
              const value = parseInt(e.target.value);
              const isValidResult = onValidate?.[\\"num\\"]
                ? await onValidate[\\"num\\"](value)
                : validateField(value, []);
              setNumFieldError({ ...numFieldError, ...isValidResult });
              setFormValid(!numFieldError.hasError);
              setModelFields({ ...modelFields, num: value });
            }}
            errorMessage={numFieldError.errorMessage}
            hasError={numFieldError.hasError}
            {...getOverrideProps(overrides, \\"num\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid1\\")}
        >
          <TextField
            label=\\"Rootbeer\\"
            isRequired={false}
            isReadOnly={false}
            type=\\"number\\"
            onChange={async (e) => {
              const value = Number(e.target.value);
              const isValidResult = onValidate?.[\\"rootbeer\\"]
                ? await onValidate[\\"rootbeer\\"](value)
                : validateField(value, []);
              setRootbeerFieldError({
                ...rootbeerFieldError,
                ...isValidResult,
              });
              setFormValid(!rootbeerFieldError.hasError);
              setModelFields({ ...modelFields, rootbeer: value });
            }}
            errorMessage={rootbeerFieldError.errorMessage}
            hasError={rootbeerFieldError.hasError}
            {...getOverrideProps(overrides, \\"rootbeer\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid2\\")}
        >
          <RadioGroupField
            label=\\"Maybe\\"
            name=\\"maybe\\"
            isReadOnly={false}
            isRequired=\\"false\\"
            onChange={async (e) => {
              const value = e.target.value === \\"Yes\\";
              const isValidResult = onValidate?.[\\"maybe\\"]
                ? await onValidate[\\"maybe\\"](value)
                : validateField(value, []);
              setMaybeFieldError({ ...maybeFieldError, ...isValidResult });
              setFormValid(!maybeFieldError.hasError);
              setModelFields({ ...modelFields, maybe: value });
            }}
            errorMessage={maybeFieldError.errorMessage}
            hasError={maybeFieldError.hasError}
            {...getOverrideProps(overrides, \\"maybe\\")}
          >
            <Radio
              children=\\"Pick?\\"
              value=\\"Pick?\\"
              {...getOverrideProps(overrides, \\"maybeRadio0\\")}
            ></Radio>
          </RadioGroupField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid3\\")}
        >
          <ToggleButton
            children=\\"Maybe slide\\"
            isDisabled={false}
            defaultPressed={false}
            {...getOverrideProps(overrides, \\"maybeSlide\\")}
          ></ToggleButton>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid4\\")}
        >
          <CheckboxField
            label=\\"Maybe check\\"
            name=\\"maybeCheck\\"
            value=\\"true\\"
            isDisabled={false}
            defaultChecked={false}
            onChange={async (e) => {
              const value = e.target.checked;
              const isValidResult = onValidate?.[\\"maybeCheck\\"]
                ? await onValidate[\\"maybeCheck\\"](value)
                : validateField(value, []);
              setMaybeCheckFieldError({
                ...maybeCheckFieldError,
                ...isValidResult,
              });
              setFormValid(!maybeCheckFieldError.hasError);
              setModelFields({ ...modelFields, maybeCheck: value });
            }}
            errorMessage={maybeCheckFieldError.errorMessage}
            hasError={maybeCheckFieldError.hasError}
            {...getOverrideProps(overrides, \\"maybeCheck\\")}
          ></CheckboxField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid5\\")}
        >
          <TextField
            label=\\"Timestamp\\"
            isRequired={false}
            isReadOnly={false}
            type=\\"datetime-local\\"
            onChange={async (e) => {
              const value = Number(new Date(e.target.value));
              const isValidResult = onValidate?.[\\"timestamp\\"]
                ? await onValidate[\\"timestamp\\"](value)
                : validateField(value, []);
              setTimestampFieldError({
                ...timestampFieldError,
                ...isValidResult,
              });
              setFormValid(!timestampFieldError.hasError);
              setModelFields({ ...modelFields, timestamp: value });
            }}
            errorMessage={timestampFieldError.errorMessage}
            hasError={timestampFieldError.hasError}
            {...getOverrideProps(overrides, \\"timestamp\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid6\\")}
        >
          <TextField
            label=\\"Ippy\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"ippy\\"]
                ? await onValidate[\\"ippy\\"](value)
                : validateField(value, [{ type: \\"IpAddress\\" }]);
              setIppyFieldError({ ...ippyFieldError, ...isValidResult });
              setFormValid(!ippyFieldError.hasError);
              setModelFields({ ...modelFields, ippy: value });
            }}
            errorMessage={ippyFieldError.errorMessage}
            hasError={ippyFieldError.hasError}
            {...getOverrideProps(overrides, \\"ippy\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid7\\")}
        >
          <TextField
            label=\\"Timeisnow\\"
            isRequired={false}
            isReadOnly={false}
            type=\\"time\\"
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"timeisnow\\"]
                ? await onValidate[\\"timeisnow\\"](value)
                : validateField(value, []);
              setTimeisnowFieldError({
                ...timeisnowFieldError,
                ...isValidResult,
              });
              setFormValid(!timeisnowFieldError.hasError);
              setModelFields({ ...modelFields, timeisnow: value });
            }}
            errorMessage={timeisnowFieldError.errorMessage}
            hasError={timeisnowFieldError.hasError}
            {...getOverrideProps(overrides, \\"timeisnow\\")}
          ></TextField>
        </Grid>
      </Grid>
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}></Flex>
      </Flex>
    </form>
  );
}
"
`;

exports[`amplify form renderer tests datastore form tests should render a form with multiple date types 2`] = `
"import * as React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { CheckboxFieldProps, GridProps, RadioGroupFieldProps, TextFieldProps, ToggleButtonProps } from \\"@aws-amplify/ui-react\\";
export declare type InputGalleryCreateFormOverridesProps = {
    InputGalleryCreateFormGrid: GridProps;
    RowGrid0: GridProps;
    num: TextFieldProps;
    RowGrid1: GridProps;
    rootbeer: TextFieldProps;
    RowGrid2: GridProps;
    maybe: RadioGroupFieldProps;
    RowGrid3: GridProps;
    maybeSlide: ToggleButtonProps;
    RowGrid4: GridProps;
    maybeCheck: CheckboxFieldProps;
    RowGrid5: GridProps;
    timestamp: TextFieldProps;
    RowGrid6: GridProps;
    ippy: TextFieldProps;
    RowGrid7: GridProps;
    timeisnow: TextFieldProps;
} & EscapeHatchProps;
export declare type InputGalleryCreateFormProps = React.PropsWithChildren<{
    overrides?: InputGalleryCreateFormOverridesProps | undefined | null;
} & {
    onSubmitBefore?: (fields: Record<string, string>) => Record<string, string>;
    onSubmitComplete?: ({ saveSuccessful, errorMessage }: {
        saveSuccessful: boolean;
        errorMessage?: string;
    }) => void;
    onCancel?: () => void;
    onValidate?: Record<string, (value: any) => Promise<{
        hasError: boolean;
        errorMessage?: string;
    }>>;
}>;
export default function InputGalleryCreateForm(props: InputGalleryCreateFormProps): React.ReactElement;
"
`;
