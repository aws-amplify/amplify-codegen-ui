// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`amplify form renderer tests custom form tests should render a custom backed form 1`] = `
"/* eslint-disable */
import * as React from \\"react\\";
import { validateField } from \\"./utils.js\\";
import {
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, Flex, Grid, TextField } from \\"@aws-amplify/ui-react\\";
import { DataStore } from \\"aws-amplify\\";
export default function customDataForm(props) {
  const {
    onSubmit: customDataFormOnSubmit,
    onCancel,
    onValidate,
    overrides,
    ...rest
  } = props;
  const [nameFieldError, setNameFieldError] = useStateMutationAction({});
  const [emailFieldError, setEmailFieldError] = useStateMutationAction({});
  const [modelFields, setModelFields] = useStateMutationAction({});
  const [formValid, setFormValid] = useStateMutationAction(true);
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault();
        if (onSubmitBefore) {
          setModelFields(onSubmitBefore({ fields: modelFields }));
        }
        try {
          await DataStore.save(new Post(modelFields));
          if (onSubmitComplete) {
            onSubmitComplete({ saveSuccessful: true });
          }
        } catch (err) {
          if (onSubmitComplete) {
            onSubmitComplete({
              saveSuccessful: false,
              errorMessage: err.message,
            });
          }
        }
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"customDataForm\\")}
    >
      <Grid
        columnGap=\\"15px\\"
        rowGap=\\"15px\\"
        {...getOverrideProps(overrides, \\"customDataFormGrid\\")}
      >
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid0\\")}
        >
          <TextField
            label=\\"name\\"
            isRequired={true}
            defaultValue=\\"John Doe\\"
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"name\\"]
                ? await onValidate[\\"name\\"](value)
                : validateField(value, []);
              setNameFieldError({ ...nameFieldError, ...isValidResult });
              setFormValid(!nameFieldError.hasError);
              setModelFields({ ...modelFields, name: value });
            }}
            errorMessage={nameFieldError.errorMessage}
            hasError={nameFieldError.hasError}
            {...getOverrideProps(overrides, \\"name\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid1\\")}
        >
          <TextField
            label=\\"E-mail\\"
            isRequired={true}
            defaultValue=\\"johndoe@amplify.com\\"
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"email\\"]
                ? await onValidate[\\"email\\"](value)
                : validateField(value, []);
              setEmailFieldError({ ...emailFieldError, ...isValidResult });
              setFormValid(!emailFieldError.hasError);
              setModelFields({ ...modelFields, email: value });
            }}
            errorMessage={emailFieldError.errorMessage}
            hasError={emailFieldError.hasError}
            {...getOverrideProps(overrides, \\"email\\")}
          ></TextField>
        </Grid>
      </Grid>
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          label=\\"go back\\"
          type=\\"button\\"
          onClick={() => {
            onCancel && onCancel();
          }}
          {...getOverrideProps(overrides, \\"CancelButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            label=\\"empty\\"
            type=\\"reset\\"
            {...getOverrideProps(overrides, \\"ClearButton\\")}
          ></Button>
          <Button
            label=\\"create\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={!formValid}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
    </form>
  );
}
"
`;

exports[`amplify form renderer tests custom form tests should render a custom backed form 2`] = `
"import * as React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
export declare type customDataFormProps = React.PropsWithChildren<{
    overrides?: EscapeHatchProps | undefined | null;
} & {
    onSubmit: (fields: Record<string, string>) => void;
    onCancel?: () => void;
}>;
export default function customDataForm(props: customDataFormProps): React.ReactElement;
"
`;

exports[`amplify form renderer tests datastore form tests should generate a create form 1`] = `
"/* eslint-disable */
import * as React from \\"react\\";
import { validateField } from \\"./utils.js\\";
import {
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Post } from \\"../models\\";
import { Button, Flex, Grid, TextField } from \\"@aws-amplify/ui-react\\";
import { DataStore } from \\"aws-amplify\\";
export default function myPostForm(props) {
  const {
    onSubmitBefore,
    onSubmitComplete,
    onCancel,
    onValidate,
    overrides,
    ...rest
  } = props;
  const [captionFieldError, setCaptionFieldError] = useStateMutationAction({});
  const [usernameFieldError, setUsernameFieldError] = useStateMutationAction(
    {}
  );
  const [post_urlFieldError, setPost_urlFieldError] = useStateMutationAction(
    {}
  );
  const [profile_urlFieldError, setProfile_urlFieldError] =
    useStateMutationAction({});
  const [modelFields, setModelFields] = useStateMutationAction({});
  const [formValid, setFormValid] = useStateMutationAction(true);
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault();
        if (onSubmitBefore) {
          setModelFields(onSubmitBefore({ fields: modelFields }));
        }
        try {
          await DataStore.save(new Post(modelFields));
          if (onSubmitComplete) {
            onSubmitComplete({ saveSuccessful: true });
          }
        } catch (err) {
          if (onSubmitComplete) {
            onSubmitComplete({
              saveSuccessful: false,
              errorMessage: err.message,
            });
          }
        }
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"myPostForm\\")}
    >
      <Grid
        columnGap=\\"15px\\"
        rowGap=\\"15px\\"
        {...getOverrideProps(overrides, \\"myPostFormGrid\\")}
      >
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid0\\")}
        >
          <TextField
            label=\\"caption\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"caption\\"]
                ? await onValidate[\\"caption\\"](value)
                : validateField(
                    value,
                    undefined - caption - validation - rules
                  );
              setCaptionFieldError({ ...captionFieldError, ...isValidResult });
              setFormValid(!captionFieldError.hasError);
              setModelFields({ ...modelFields, caption: value });
            }}
            errorMessage={captionFieldError.errorMessage}
            hasError={captionFieldError.hasError}
            {...getOverrideProps(overrides, \\"caption\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid1\\")}
        >
          <TextField
            label=\\"username\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"username\\"]
                ? await onValidate[\\"username\\"](value)
                : validateField(
                    value,
                    undefined - username - validation - rules
                  );
              setUsernameFieldError({
                ...usernameFieldError,
                ...isValidResult,
              });
              setFormValid(!usernameFieldError.hasError);
              setModelFields({ ...modelFields, username: value });
            }}
            errorMessage={usernameFieldError.errorMessage}
            hasError={usernameFieldError.hasError}
            {...getOverrideProps(overrides, \\"username\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid2\\")}
        >
          <TextField
            label=\\"post_url\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"post_url\\"]
                ? await onValidate[\\"post_url\\"](value)
                : validateField(
                    value,
                    undefined - post_url - validation - rules
                  );
              setPost_urlFieldError({
                ...post_urlFieldError,
                ...isValidResult,
              });
              setFormValid(!post_urlFieldError.hasError);
              setModelFields({ ...modelFields, post_url: value });
            }}
            errorMessage={post_urlFieldError.errorMessage}
            hasError={post_urlFieldError.hasError}
            {...getOverrideProps(overrides, \\"post_url\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid3\\")}
        >
          <TextField
            label=\\"profile_url\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"profile_url\\"]
                ? await onValidate[\\"profile_url\\"](value)
                : validateField(
                    value,
                    undefined - profile_url - validation - rules
                  );
              setProfile_urlFieldError({
                ...profile_urlFieldError,
                ...isValidResult,
              });
              setFormValid(!profile_urlFieldError.hasError);
              setModelFields({ ...modelFields, profile_url: value });
            }}
            errorMessage={profile_urlFieldError.errorMessage}
            hasError={profile_urlFieldError.hasError}
            {...getOverrideProps(overrides, \\"profile_url\\")}
          ></TextField>
        </Grid>
      </Grid>
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          label=\\"Cancel\\"
          type=\\"button\\"
          onClick={() => {
            onCancel && onCancel();
          }}
          {...getOverrideProps(overrides, \\"CancelButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            label=\\"Clear\\"
            type=\\"reset\\"
            {...getOverrideProps(overrides, \\"ClearButton\\")}
          ></Button>
          <Button
            label=\\"Submit\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={!formValid}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
    </form>
  );
}
"
`;

exports[`amplify form renderer tests datastore form tests should generate a create form 2`] = `
"import * as React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
export declare type myPostFormProps = React.PropsWithChildren<{
    overrides?: EscapeHatchProps | undefined | null;
} & {
    onSubmitBefore?: (fields: Record<string, string>) => Record<string, string>;
    onSubmitComplete?: ({ saveSuccessful, errorMessage }: {
        saveSuccessful: string;
        errorMessage?: string;
    }) => void;
    onCancel?: () => void;
}>;
export default function myPostForm(props: myPostFormProps): React.ReactElement;
"
`;

exports[`amplify form renderer tests datastore form tests should generate a update form 1`] = `
"/* eslint-disable */
import * as React from \\"react\\";
import { validateField } from \\"./utils.js\\";
import {
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Post } from \\"../models\\";
import { Button, Flex, Grid, TextField } from \\"@aws-amplify/ui-react\\";
import { DataStore } from \\"aws-amplify\\";
export default function myPostForm(props) {
  const {
    id,
    onSubmitBefore,
    onSubmitComplete,
    onCancel,
    onValidate,
    overrides,
    ...rest
  } = props;
  const [captionFieldError, setCaptionFieldError] = useStateMutationAction({});
  const [usernameFieldError, setUsernameFieldError] = useStateMutationAction(
    {}
  );
  const [post_urlFieldError, setPost_urlFieldError] = useStateMutationAction(
    {}
  );
  const [profile_urlFieldError, setProfile_urlFieldError] =
    useStateMutationAction({});
  const [modelFields, setModelFields] = useStateMutationAction({});
  const [formValid, setFormValid] = useStateMutationAction(true);
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault();
        if (onSubmitBefore) {
          setModelFields(onSubmitBefore({ fields: modelFields }));
        }
        try {
          await DataStore.save(new Post(modelFields));
          if (onSubmitComplete) {
            onSubmitComplete({ saveSuccessful: true });
          }
        } catch (err) {
          if (onSubmitComplete) {
            onSubmitComplete({
              saveSuccessful: false,
              errorMessage: err.message,
            });
          }
        }
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"myPostForm\\")}
    >
      <Grid
        columnGap=\\"15px\\"
        rowGap=\\"15px\\"
        {...getOverrideProps(overrides, \\"myPostFormGrid\\")}
      >
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid0\\")}
        >
          <TextField
            label=\\"caption\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"caption\\"]
                ? await onValidate[\\"caption\\"](value)
                : validateField(
                    value,
                    undefined - caption - validation - rules
                  );
              setCaptionFieldError({ ...captionFieldError, ...isValidResult });
              setFormValid(!captionFieldError.hasError);
              setModelFields({ ...modelFields, caption: value });
            }}
            errorMessage={captionFieldError.errorMessage}
            hasError={captionFieldError.hasError}
            {...getOverrideProps(overrides, \\"caption\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid1\\")}
        >
          <TextField
            label=\\"username\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"username\\"]
                ? await onValidate[\\"username\\"](value)
                : validateField(
                    value,
                    undefined - username - validation - rules
                  );
              setUsernameFieldError({
                ...usernameFieldError,
                ...isValidResult,
              });
              setFormValid(!usernameFieldError.hasError);
              setModelFields({ ...modelFields, username: value });
            }}
            errorMessage={usernameFieldError.errorMessage}
            hasError={usernameFieldError.hasError}
            {...getOverrideProps(overrides, \\"username\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid2\\")}
        >
          <TextField
            label=\\"post_url\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"post_url\\"]
                ? await onValidate[\\"post_url\\"](value)
                : validateField(
                    value,
                    undefined - post_url - validation - rules
                  );
              setPost_urlFieldError({
                ...post_urlFieldError,
                ...isValidResult,
              });
              setFormValid(!post_urlFieldError.hasError);
              setModelFields({ ...modelFields, post_url: value });
            }}
            errorMessage={post_urlFieldError.errorMessage}
            hasError={post_urlFieldError.hasError}
            {...getOverrideProps(overrides, \\"post_url\\")}
          ></TextField>
        </Grid>
        <Grid
          columnGap=\\"inherit\\"
          rowGap=\\"inherit\\"
          templateColumns=\\"repeat(1, auto)\\"
          {...getOverrideProps(overrides, \\"RowGrid3\\")}
        >
          <TextField
            label=\\"profile_url\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              const isValidResult = onValidate?.[\\"profile_url\\"]
                ? await onValidate[\\"profile_url\\"](value)
                : validateField(
                    value,
                    undefined - profile_url - validation - rules
                  );
              setProfile_urlFieldError({
                ...profile_urlFieldError,
                ...isValidResult,
              });
              setFormValid(!profile_urlFieldError.hasError);
              setModelFields({ ...modelFields, profile_url: value });
            }}
            errorMessage={profile_urlFieldError.errorMessage}
            hasError={profile_urlFieldError.hasError}
            {...getOverrideProps(overrides, \\"profile_url\\")}
          ></TextField>
        </Grid>
      </Grid>
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          label=\\"Cancel\\"
          type=\\"button\\"
          onClick={() => {
            onCancel && onCancel();
          }}
          {...getOverrideProps(overrides, \\"CancelButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            label=\\"Clear\\"
            type=\\"reset\\"
            {...getOverrideProps(overrides, \\"ClearButton\\")}
          ></Button>
          <Button
            label=\\"Submit\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={!formValid}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
    </form>
  );
}
"
`;

exports[`amplify form renderer tests datastore form tests should generate a update form 2`] = `
"import * as React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
export declare type myPostFormProps = React.PropsWithChildren<{
    overrides?: EscapeHatchProps | undefined | null;
} & {
    id: string;
    onSubmitBefore?: (fields: Record<string, string>) => Record<string, string>;
    onSubmitComplete?: ({ saveSuccessful, errorMessage }: {
        saveSuccessful: string;
        errorMessage?: string;
    }) => void;
    onCancel?: () => void;
}>;
export default function myPostForm(props: myPostFormProps): React.ReactElement;
"
`;
