// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`amplify form renderer tests custom form tests should render a custom backed form 1`] = `
"/* eslint-disable */
import * as React from \\"react\\";
import { fetchByPath, validateField } from \\"./utils\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import {
  Button,
  Flex,
  Grid,
  Radio,
  RadioGroupField,
  SelectField,
  TextField,
} from \\"@aws-amplify/ui-react\\";
export default function CustomDataForm(props) {
  const {
    onSubmit: customDataFormOnSubmit,
    onCancel,
    onValidate,
    overrides,
    ...rest
  } = props;
  const [name, setName] = React.useState(undefined);
  const [email, setEmail] = React.useState(undefined);
  const [city, setCity] = React.useState(undefined);
  const [category, setCategory] = React.useState(undefined);
  const [errors, setErrors] = React.useState({});
  const validations = {
    name: [{ type: \\"Required\\" }],
    email: [{ type: \\"Required\\" }],
    city: [],
    category: [],
  };
  const runValidationTasks = async (fieldName, value) => {
    let validationResponse = validateField(value, validations[fieldName]);
    const customValidator = fetchByPath(onValidate, fieldName);
    if (customValidator) {
      validationResponse = await customValidator(value, validationResponse);
    }
    setErrors((errors) => ({ ...errors, [fieldName]: validationResponse }));
    return validationResponse;
  };
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault();
        const modelFields = {
          name,
          email,
          city,
          category,
        };
        const validationResponses = await Promise.all(
          Object.keys(validations).reduce((promises, fieldName) => {
            if (Array.isArray(modelFields[fieldName])) {
              promises.push(
                ...modelFields[fieldName].map((item) =>
                  runValidationTasks(fieldName, item)
                )
              );
              return promises;
            }
            promises.push(
              runValidationTasks(fieldName, modelFields[fieldName])
            );
            return promises;
          }, [])
        );
        if (validationResponses.some((r) => r.hasError)) {
          return;
        }
        await customDataFormOnSubmit(modelFields);
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"CustomDataForm\\")}
    >
      <Grid
        columnGap=\\"15px\\"
        rowGap=\\"15px\\"
        padding=\\"20px\\"
        {...getOverrideProps(overrides, \\"CustomDataFormGrid\\")}
      >
        <TextField
          label=\\"name\\"
          isRequired={true}
          defaultValue=\\"John Doe\\"
          onChange={async (e) => {
            const { value } = e.target;
            await runValidationTasks(\\"name\\", value);
            setName(value);
          }}
          errorMessage={errors.name?.errorMessage}
          hasError={errors.name?.hasError}
          {...getOverrideProps(overrides, \\"name\\")}
        ></TextField>
        <TextField
          label=\\"E-mail\\"
          isRequired={true}
          defaultValue=\\"johndoe@amplify.com\\"
          onChange={async (e) => {
            const { value } = e.target;
            await runValidationTasks(\\"email\\", value);
            setEmail(value);
          }}
          errorMessage={errors.email?.errorMessage}
          hasError={errors.email?.hasError}
          {...getOverrideProps(overrides, \\"email\\")}
        ></TextField>
        <SelectField
          label=\\"Label\\"
          onChange={async (e) => {
            const { value } = e.target;
            await runValidationTasks(\\"city\\", value);
            setCity(value);
          }}
          errorMessage={errors.city?.errorMessage}
          hasError={errors.city?.hasError}
          {...getOverrideProps(overrides, \\"city\\")}
        >
          <option
            children=\\"Los Angeles\\"
            value=\\"Los Angeles\\"
            {...getOverrideProps(overrides, \\"cityoption0\\")}
          ></option>
          <option
            children=\\"Houston\\"
            value=\\"Houston\\"
            {...getOverrideProps(overrides, \\"cityoption1\\")}
          ></option>
          <option
            children=\\"New York\\"
            value=\\"New York\\"
            selected={true}
            {...getOverrideProps(overrides, \\"cityoption2\\")}
          ></option>
        </SelectField>
        <RadioGroupField
          label=\\"Label\\"
          name=\\"fieldName\\"
          defaultValue=\\"Hobbies\\"
          onChange={async (e) => {
            const { value } = e.target;
            await runValidationTasks(\\"category\\", value);
            setCategory(value);
          }}
          errorMessage={errors.category?.errorMessage}
          hasError={errors.category?.hasError}
          {...getOverrideProps(overrides, \\"category\\")}
        >
          <Radio
            children=\\"Hobbies\\"
            value=\\"Hobbies\\"
            {...getOverrideProps(overrides, \\"categoryRadio0\\")}
          ></Radio>
          <Radio
            children=\\"Travel\\"
            value=\\"Travel\\"
            {...getOverrideProps(overrides, \\"categoryRadio1\\")}
          ></Radio>
          <Radio
            children=\\"Health\\"
            value=\\"Health\\"
            {...getOverrideProps(overrides, \\"categoryRadio2\\")}
          ></Radio>
        </RadioGroupField>
      </Grid>
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          children=\\"empty\\"
          type=\\"reset\\"
          {...getOverrideProps(overrides, \\"ClearButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            children=\\"go back\\"
            type=\\"button\\"
            onClick={() => {
              onCancel && onCancel();
            }}
            {...getOverrideProps(overrides, \\"CancelButton\\")}
          ></Button>
          <Button
            children=\\"create\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={Object.values(errors).some((e) => e?.hasError)}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
    </form>
  );
}
"
`;

exports[`amplify form renderer tests custom form tests should render a custom backed form 2`] = `
"import * as React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { GridProps, RadioGroupFieldProps, SelectFieldProps, TextFieldProps } from \\"@aws-amplify/ui-react\\";
export declare type ValidationResponse = {
    hasError: boolean;
    errorMessage?: string;
};
export declare type ValidationFunction<T> = (value: T, validationResponse: ValidationResponse) => ValidationResponse | Promise<ValidationResponse>;
export declare type CustomDataFormInputValues = {
    name?: ValidationFunction<string>;
    email?: ValidationFunction<string>;
    city?: ValidationFunction<string>;
    category?: ValidationFunction<string>;
};
export declare type FormProps<T> = Partial<T> & React.DOMAttributes<HTMLDivElement>;
export declare type CustomDataFormOverridesProps = {
    CustomDataFormGrid?: FormProps<GridProps>;
    name?: FormProps<TextFieldProps>;
    email?: FormProps<TextFieldProps>;
    city?: FormProps<SelectFieldProps>;
    category?: FormProps<RadioGroupFieldProps>;
} & EscapeHatchProps;
export declare type CustomDataFormProps = React.PropsWithChildren<{
    overrides?: CustomDataFormOverridesProps | undefined | null;
} & {
    onSubmit: (fields: Record<string, string>) => void;
    onCancel?: () => void;
    onValidate?: CustomDataFormInputValues;
}>;
export default function CustomDataForm(props: CustomDataFormProps): React.ReactElement;
"
`;

exports[`amplify form renderer tests custom form tests should render nested json fields 1`] = `
"/* eslint-disable */
import * as React from \\"react\\";
import { fetchByPath, validateField } from \\"./utils\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import { Button, Flex, Grid, Heading, TextField } from \\"@aws-amplify/ui-react\\";
export default function NestedJson(props) {
  const {
    onSubmit: nestedJsonOnSubmit,
    onCancel,
    onValidate,
    overrides,
    ...rest
  } = props;
  const [firstName, setFirstName] = React.useState(undefined);
  const [lastName, setLastName] = React.useState(undefined);
  const [bio, setBio] = React.useState({});
  const [errors, setErrors] = React.useState({});
  const validations = {
    firstName: [],
    lastName: [],
    \\"bio.favoriteQuote\\": [],
    \\"bio.favoriteAnimal\\": [],
  };
  const runValidationTasks = async (fieldName, value) => {
    let validationResponse = validateField(value, validations[fieldName]);
    const customValidator = fetchByPath(onValidate, fieldName);
    if (customValidator) {
      validationResponse = await customValidator(value, validationResponse);
    }
    setErrors((errors) => ({ ...errors, [fieldName]: validationResponse }));
    return validationResponse;
  };
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault();
        const modelFields = {
          firstName,
          lastName,
          bio,
        };
        const validationResponses = await Promise.all(
          Object.keys(validations).reduce((promises, fieldName) => {
            if (Array.isArray(modelFields[fieldName])) {
              promises.push(
                ...modelFields[fieldName].map((item) =>
                  runValidationTasks(fieldName, item)
                )
              );
              return promises;
            }
            promises.push(
              runValidationTasks(fieldName, modelFields[fieldName])
            );
            return promises;
          }, [])
        );
        if (validationResponses.some((r) => r.hasError)) {
          return;
        }
        await nestedJsonOnSubmit(modelFields);
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"NestedJson\\")}
    >
      <Grid
        columnGap=\\"15px\\"
        rowGap=\\"15px\\"
        padding=\\"20px\\"
        {...getOverrideProps(overrides, \\"NestedJsonGrid\\")}
      >
        <TextField
          label=\\"firstName\\"
          onChange={async (e) => {
            const { value } = e.target;
            await runValidationTasks(\\"firstName\\", value);
            setFirstName(value);
          }}
          errorMessage={errors.firstName?.errorMessage}
          hasError={errors.firstName?.hasError}
          {...getOverrideProps(overrides, \\"firstName\\")}
        ></TextField>
        <TextField
          label=\\"lastName\\"
          onChange={async (e) => {
            const { value } = e.target;
            await runValidationTasks(\\"lastName\\", value);
            setLastName(value);
          }}
          errorMessage={errors.lastName?.errorMessage}
          hasError={errors.lastName?.hasError}
          {...getOverrideProps(overrides, \\"lastName\\")}
        ></TextField>
        <Heading
          level={3}
          children=\\"bio\\"
          {...getOverrideProps(overrides, \\"bio\\")}
        ></Heading>
        <TextField
          label=\\"favoriteQuote\\"
          onChange={async (e) => {
            const { value } = e.target;
            await runValidationTasks(\\"bio.favoriteQuote\\", value);
            setBio({ ...bio, favoriteQuote: value });
          }}
          errorMessage={errors[\\"bio.favoriteQuote\\"]?.errorMessage}
          hasError={errors[\\"bio.favoriteQuote\\"]?.hasError}
          {...getOverrideProps(overrides, \\"bio.favoriteQuote\\")}
        ></TextField>
        <TextField
          label=\\"favoriteAnimal\\"
          onChange={async (e) => {
            const { value } = e.target;
            await runValidationTasks(\\"bio.favoriteAnimal\\", value);
            setBio({ ...bio, favoriteAnimal: value });
          }}
          errorMessage={errors[\\"bio.favoriteAnimal\\"]?.errorMessage}
          hasError={errors[\\"bio.favoriteAnimal\\"]?.hasError}
          {...getOverrideProps(overrides, \\"bio.favoriteAnimal\\")}
        ></TextField>
      </Grid>
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          children=\\"Clear\\"
          type=\\"reset\\"
          {...getOverrideProps(overrides, \\"ClearButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            children=\\"Cancel\\"
            type=\\"button\\"
            onClick={() => {
              onCancel && onCancel();
            }}
            {...getOverrideProps(overrides, \\"CancelButton\\")}
          ></Button>
          <Button
            children=\\"Submit\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={Object.values(errors).some((e) => e?.hasError)}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
    </form>
  );
}
"
`;

exports[`amplify form renderer tests custom form tests should render nested json fields 2`] = `
"import * as React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { GridProps, HeadingProps, TextFieldProps } from \\"@aws-amplify/ui-react\\";
export declare type ValidationResponse = {
    hasError: boolean;
    errorMessage?: string;
};
export declare type ValidationFunction<T> = (value: T, validationResponse: ValidationResponse) => ValidationResponse | Promise<ValidationResponse>;
export declare type NestedJsonInputValues = {
    firstName?: ValidationFunction<string>;
    lastName?: ValidationFunction<string>;
    bio?: {
        favoriteQuote?: ValidationFunction<string>;
        favoriteAnimal?: ValidationFunction<string>;
    };
};
export declare type FormProps<T> = Partial<T> & React.DOMAttributes<HTMLDivElement>;
export declare type NestedJsonOverridesProps = {
    NestedJsonGrid?: FormProps<GridProps>;
    firstName?: FormProps<TextFieldProps>;
    lastName?: FormProps<TextFieldProps>;
    bio?: FormProps<HeadingProps>;
    \\"bio.favoriteQuote\\"?: FormProps<TextFieldProps>;
    \\"bio.favoriteAnimal\\"?: FormProps<TextFieldProps>;
} & EscapeHatchProps;
export declare type NestedJsonProps = React.PropsWithChildren<{
    overrides?: NestedJsonOverridesProps | undefined | null;
} & {
    onSubmit: (fields: Record<string, string>) => void;
    onCancel?: () => void;
    onValidate?: NestedJsonInputValues;
}>;
export default function NestedJson(props: NestedJsonProps): React.ReactElement;
"
`;

exports[`amplify form renderer tests custom form tests should render sectional elements 1`] = `
"/* eslint-disable */
import * as React from \\"react\\";
import { fetchByPath, validateField } from \\"./utils\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import {
  Button,
  Divider,
  Flex,
  Grid,
  Heading,
  Text,
  TextField,
} from \\"@aws-amplify/ui-react\\";
export default function CustomWithSectionalElements(props) {
  const {
    onSubmit: customWithSectionalElementsOnSubmit,
    onCancel,
    onValidate,
    overrides,
    ...rest
  } = props;
  const [name, setName] = React.useState(undefined);
  const [errors, setErrors] = React.useState({});
  const validations = {
    name: [],
  };
  const runValidationTasks = async (fieldName, value) => {
    let validationResponse = validateField(value, validations[fieldName]);
    const customValidator = fetchByPath(onValidate, fieldName);
    if (customValidator) {
      validationResponse = await customValidator(value, validationResponse);
    }
    setErrors((errors) => ({ ...errors, [fieldName]: validationResponse }));
    return validationResponse;
  };
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault();
        const modelFields = {
          name,
        };
        const validationResponses = await Promise.all(
          Object.keys(validations).reduce((promises, fieldName) => {
            if (Array.isArray(modelFields[fieldName])) {
              promises.push(
                ...modelFields[fieldName].map((item) =>
                  runValidationTasks(fieldName, item)
                )
              );
              return promises;
            }
            promises.push(
              runValidationTasks(fieldName, modelFields[fieldName])
            );
            return promises;
          }, [])
        );
        if (validationResponses.some((r) => r.hasError)) {
          return;
        }
        await customWithSectionalElementsOnSubmit(modelFields);
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"CustomWithSectionalElements\\")}
    >
      <Grid
        columnGap=\\"15px\\"
        rowGap=\\"15px\\"
        padding=\\"20px\\"
        {...getOverrideProps(overrides, \\"CustomWithSectionalElementsGrid\\")}
      >
        <Heading
          level={2}
          children=\\"Create a Post\\"
          {...getOverrideProps(overrides, \\"myHeading\\")}
        ></Heading>
        <TextField
          label=\\"Label\\"
          onChange={async (e) => {
            const { value } = e.target;
            await runValidationTasks(\\"name\\", value);
            setName(value);
          }}
          errorMessage={errors.name?.errorMessage}
          hasError={errors.name?.hasError}
          {...getOverrideProps(overrides, \\"name\\")}
        ></TextField>
        <Text
          children=\\"Did you put your name above?\\"
          {...getOverrideProps(overrides, \\"myText\\")}
        ></Text>
        <Divider
          orientation=\\"horizontal\\"
          {...getOverrideProps(overrides, \\"myDivider\\")}
        ></Divider>
      </Grid>
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          children=\\"Clear\\"
          type=\\"reset\\"
          {...getOverrideProps(overrides, \\"ClearButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            children=\\"Cancel\\"
            type=\\"button\\"
            onClick={() => {
              onCancel && onCancel();
            }}
            {...getOverrideProps(overrides, \\"CancelButton\\")}
          ></Button>
          <Button
            children=\\"Submit\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={Object.values(errors).some((e) => e?.hasError)}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
    </form>
  );
}
"
`;

exports[`amplify form renderer tests custom form tests should render sectional elements 2`] = `
"import * as React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { DividerProps, GridProps, HeadingProps, TextFieldProps, TextProps } from \\"@aws-amplify/ui-react\\";
export declare type ValidationResponse = {
    hasError: boolean;
    errorMessage?: string;
};
export declare type ValidationFunction<T> = (value: T, validationResponse: ValidationResponse) => ValidationResponse | Promise<ValidationResponse>;
export declare type CustomWithSectionalElementsInputValues = {
    name?: ValidationFunction<string>;
};
export declare type FormProps<T> = Partial<T> & React.DOMAttributes<HTMLDivElement>;
export declare type CustomWithSectionalElementsOverridesProps = {
    CustomWithSectionalElementsGrid?: FormProps<GridProps>;
    myHeading?: FormProps<HeadingProps>;
    name?: FormProps<TextFieldProps>;
    myText?: FormProps<TextProps>;
    myDivider?: FormProps<DividerProps>;
} & EscapeHatchProps;
export declare type CustomWithSectionalElementsProps = React.PropsWithChildren<{
    overrides?: CustomWithSectionalElementsOverridesProps | undefined | null;
} & {
    onSubmit: (fields: Record<string, string>) => void;
    onCancel?: () => void;
    onValidate?: CustomWithSectionalElementsInputValues;
}>;
export default function CustomWithSectionalElements(props: CustomWithSectionalElementsProps): React.ReactElement;
"
`;

exports[`amplify form renderer tests datastore form tests should generate a create form 1`] = `
"/* eslint-disable */
import * as React from \\"react\\";
import { fetchByPath, validateField } from \\"./utils\\";
import { Post } from \\"../models\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import { Button, Flex, Grid, TextField } from \\"@aws-amplify/ui-react\\";
import { DataStore } from \\"aws-amplify\\";
export default function MyPostForm(props) {
  const {
    onSubmitBefore,
    onSubmitComplete,
    onCancel,
    onValidate,
    overrides,
    ...rest
  } = props;
  const [caption, setCaption] = React.useState(undefined);
  const [username, setUsername] = React.useState(undefined);
  const [post_url, setPost_url] = React.useState(undefined);
  const [profile_url, setProfile_url] = React.useState(undefined);
  const [errors, setErrors] = React.useState({});
  const validations = {
    caption: [],
    username: [],
    post_url: [{ type: \\"URL\\" }],
    profile_url: [{ type: \\"URL\\" }],
  };
  const runValidationTasks = async (fieldName, value) => {
    let validationResponse = validateField(value, validations[fieldName]);
    const customValidator = fetchByPath(onValidate, fieldName);
    if (customValidator) {
      validationResponse = await customValidator(value, validationResponse);
    }
    setErrors((errors) => ({ ...errors, [fieldName]: validationResponse }));
    return validationResponse;
  };
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault();
        let modelFields = {
          caption,
          username,
          post_url,
          profile_url,
        };
        const validationResponses = await Promise.all(
          Object.keys(validations).reduce((promises, fieldName) => {
            if (Array.isArray(modelFields[fieldName])) {
              promises.push(
                ...modelFields[fieldName].map((item) =>
                  runValidationTasks(fieldName, item)
                )
              );
              return promises;
            }
            promises.push(
              runValidationTasks(fieldName, modelFields[fieldName])
            );
            return promises;
          }, [])
        );
        if (validationResponses.some((r) => r.hasError)) {
          return;
        }
        if (onSubmitBefore) {
          modelFields = onSubmitBefore(modelFields);
        }
        try {
          await DataStore.save(new Post(modelFields));
          if (onSubmitComplete) {
            onSubmitComplete({ saveSuccessful: true });
          }
        } catch (err) {
          if (onSubmitComplete) {
            onSubmitComplete({
              saveSuccessful: false,
              errorMessage: err.message,
            });
          }
        }
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"MyPostForm\\")}
    >
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          children=\\"Clear\\"
          type=\\"reset\\"
          {...getOverrideProps(overrides, \\"ClearButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            children=\\"Cancel\\"
            type=\\"button\\"
            onClick={() => {
              onCancel && onCancel();
            }}
            {...getOverrideProps(overrides, \\"CancelButton\\")}
          ></Button>
          <Button
            children=\\"Submit\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={Object.values(errors).some((e) => e?.hasError)}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
      <Grid
        columnGap=\\"15px\\"
        rowGap=\\"15px\\"
        padding=\\"20px\\"
        {...getOverrideProps(overrides, \\"MyPostFormGrid\\")}
      >
        <TextField
          label=\\"Caption\\"
          isRequired={false}
          isReadOnly={false}
          onChange={async (e) => {
            const { value } = e.target;
            await runValidationTasks(\\"caption\\", value);
            setCaption(value);
          }}
          errorMessage={errors.caption?.errorMessage}
          hasError={errors.caption?.hasError}
          {...getOverrideProps(overrides, \\"caption\\")}
        ></TextField>
        <TextField
          label=\\"Username\\"
          isRequired={false}
          isReadOnly={false}
          onChange={async (e) => {
            const { value } = e.target;
            await runValidationTasks(\\"username\\", value);
            setUsername(value);
          }}
          errorMessage={errors.username?.errorMessage}
          hasError={errors.username?.hasError}
          {...getOverrideProps(overrides, \\"username\\")}
        ></TextField>
        <TextField
          label=\\"Post url\\"
          isRequired={false}
          isReadOnly={false}
          onChange={async (e) => {
            const { value } = e.target;
            await runValidationTasks(\\"post_url\\", value);
            setPost_url(value);
          }}
          errorMessage={errors.post_url?.errorMessage}
          hasError={errors.post_url?.hasError}
          {...getOverrideProps(overrides, \\"post_url\\")}
        ></TextField>
        <TextField
          label=\\"Profile url\\"
          isRequired={false}
          isReadOnly={false}
          onChange={async (e) => {
            const { value } = e.target;
            await runValidationTasks(\\"profile_url\\", value);
            setProfile_url(value);
          }}
          errorMessage={errors.profile_url?.errorMessage}
          hasError={errors.profile_url?.hasError}
          {...getOverrideProps(overrides, \\"profile_url\\")}
        ></TextField>
      </Grid>
    </form>
  );
}
"
`;

exports[`amplify form renderer tests datastore form tests should generate a create form 2`] = `
"import * as React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { GridProps, TextFieldProps } from \\"@aws-amplify/ui-react\\";
export declare type ValidationResponse = {
    hasError: boolean;
    errorMessage?: string;
};
export declare type ValidationFunction<T> = (value: T, validationResponse: ValidationResponse) => ValidationResponse | Promise<ValidationResponse>;
export declare type MyPostFormInputValues = {
    caption?: ValidationFunction<string>;
    username?: ValidationFunction<string>;
    post_url?: ValidationFunction<string>;
    profile_url?: ValidationFunction<string>;
};
export declare type FormProps<T> = Partial<T> & React.DOMAttributes<HTMLDivElement>;
export declare type MyPostFormOverridesProps = {
    MyPostFormGrid?: FormProps<GridProps>;
    caption?: FormProps<TextFieldProps>;
    username?: FormProps<TextFieldProps>;
    post_url?: FormProps<TextFieldProps>;
    profile_url?: FormProps<TextFieldProps>;
} & EscapeHatchProps;
export declare type MyPostFormProps = React.PropsWithChildren<{
    overrides?: MyPostFormOverridesProps | undefined | null;
} & {
    onSubmitBefore?: (fields: Record<string, string>) => Record<string, string>;
    onSubmitComplete?: ({ saveSuccessful, errorMessage }: {
        saveSuccessful: boolean;
        errorMessage?: string;
    }) => void;
    onCancel?: () => void;
    onValidate?: MyPostFormInputValues;
}>;
export default function MyPostForm(props: MyPostFormProps): React.ReactElement;
"
`;

exports[`amplify form renderer tests datastore form tests should generate a update form 1`] = `
"/* eslint-disable */
import * as React from \\"react\\";
import { fetchByPath, validateField } from \\"./utils\\";
import { Post } from \\"../models\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import {
  Button,
  Flex,
  Grid,
  TextAreaField,
  TextField,
} from \\"@aws-amplify/ui-react\\";
import { DataStore } from \\"aws-amplify\\";
export default function MyPostForm(props) {
  const {
    id,
    post,
    onSubmitBefore,
    onSubmitComplete,
    onCancel,
    onValidate,
    overrides,
    ...rest
  } = props;
  const [TextAreaFieldbbd63464, setTextAreaFieldbbd63464] =
    React.useState(undefined);
  const [caption, setCaption] = React.useState(undefined);
  const [username, setUsername] = React.useState(undefined);
  const [profile_url, setProfile_url] = React.useState(undefined);
  const [post_url, setPost_url] = React.useState(undefined);
  const [errors, setErrors] = React.useState({});
  const [postRecord, setPostRecord] = React.useState(post);
  React.useEffect(() => {
    const queryData = async () => {
      const record = id ? await DataStore.query(Post, id) : post;
      setPostRecord(record);
      setTextAreaFieldbbd63464(record.TextAreaFieldbbd63464);
      setCaption(record.caption);
      setUsername(record.username);
      setProfile_url(record.profile_url);
      setPost_url(record.post_url);
    };
    queryData();
  }, [id, post]);
  const validations = {
    TextAreaFieldbbd63464: [],
    caption: [],
    username: [],
    profile_url: [{ type: \\"URL\\" }],
    post_url: [{ type: \\"URL\\" }],
  };
  const runValidationTasks = async (fieldName, value) => {
    let validationResponse = validateField(value, validations[fieldName]);
    const customValidator = fetchByPath(onValidate, fieldName);
    if (customValidator) {
      validationResponse = await customValidator(value, validationResponse);
    }
    setErrors((errors) => ({ ...errors, [fieldName]: validationResponse }));
    return validationResponse;
  };
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault();
        let modelFields = {
          TextAreaFieldbbd63464,
          caption,
          username,
          profile_url,
          post_url,
        };
        const validationResponses = await Promise.all(
          Object.keys(validations).reduce((promises, fieldName) => {
            if (Array.isArray(modelFields[fieldName])) {
              promises.push(
                ...modelFields[fieldName].map((item) =>
                  runValidationTasks(fieldName, item)
                )
              );
              return promises;
            }
            promises.push(
              runValidationTasks(fieldName, modelFields[fieldName])
            );
            return promises;
          }, [])
        );
        if (validationResponses.some((r) => r.hasError)) {
          return;
        }
        if (onSubmitBefore) {
          modelFields = onSubmitBefore(modelFields);
        }
        try {
          await DataStore.save(
            Post.copyOf(postRecord, (updated) => {
              Object.assign(updated, modelFields);
            })
          );
          if (onSubmitComplete) {
            onSubmitComplete({ saveSuccessful: true });
          }
        } catch (err) {
          if (onSubmitComplete) {
            onSubmitComplete({
              saveSuccessful: false,
              errorMessage: err.message,
            });
          }
        }
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"MyPostForm\\")}
    >
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          children=\\"Clear\\"
          type=\\"reset\\"
          {...getOverrideProps(overrides, \\"ClearButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            children=\\"Cancel\\"
            type=\\"button\\"
            onClick={() => {
              onCancel && onCancel();
            }}
            {...getOverrideProps(overrides, \\"CancelButton\\")}
          ></Button>
          <Button
            children=\\"Submit\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={Object.values(errors).some((e) => e?.hasError)}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
      <Grid
        columnGap=\\"15px\\"
        rowGap=\\"15px\\"
        padding=\\"20px\\"
        {...getOverrideProps(overrides, \\"MyPostFormGrid\\")}
      >
        <TextAreaField
          label=\\"Label\\"
          onChange={async (e) => {
            const { value } = e.target;
            await runValidationTasks(\\"TextAreaFieldbbd63464\\", value);
            setTextAreaFieldbbd63464(value);
          }}
          errorMessage={errors.TextAreaFieldbbd63464?.errorMessage}
          hasError={errors.TextAreaFieldbbd63464?.hasError}
          defaultValue={TextAreaFieldbbd63464}
          {...getOverrideProps(overrides, \\"TextAreaFieldbbd63464\\")}
        ></TextAreaField>
        <TextField
          label=\\"Caption\\"
          isRequired={false}
          isReadOnly={false}
          onChange={async (e) => {
            const { value } = e.target;
            await runValidationTasks(\\"caption\\", value);
            setCaption(value);
          }}
          errorMessage={errors.caption?.errorMessage}
          hasError={errors.caption?.hasError}
          defaultValue={caption}
          {...getOverrideProps(overrides, \\"caption\\")}
        ></TextField>
        <TextField
          label=\\"Username\\"
          isRequired={false}
          isReadOnly={false}
          onChange={async (e) => {
            const { value } = e.target;
            await runValidationTasks(\\"username\\", value);
            setUsername(value);
          }}
          errorMessage={errors.username?.errorMessage}
          hasError={errors.username?.hasError}
          defaultValue={username}
          {...getOverrideProps(overrides, \\"username\\")}
        ></TextField>
        <TextField
          label=\\"Profile url\\"
          isRequired={false}
          isReadOnly={false}
          onChange={async (e) => {
            const { value } = e.target;
            await runValidationTasks(\\"profile_url\\", value);
            setProfile_url(value);
          }}
          errorMessage={errors.profile_url?.errorMessage}
          hasError={errors.profile_url?.hasError}
          defaultValue={profile_url}
          {...getOverrideProps(overrides, \\"profile_url\\")}
        ></TextField>
        <TextField
          label=\\"Post url\\"
          isRequired={false}
          isReadOnly={false}
          onChange={async (e) => {
            const { value } = e.target;
            await runValidationTasks(\\"post_url\\", value);
            setPost_url(value);
          }}
          errorMessage={errors.post_url?.errorMessage}
          hasError={errors.post_url?.hasError}
          defaultValue={post_url}
          {...getOverrideProps(overrides, \\"post_url\\")}
        ></TextField>
      </Grid>
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          children=\\"Clear\\"
          type=\\"reset\\"
          {...getOverrideProps(overrides, \\"ClearButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            children=\\"Cancel\\"
            type=\\"button\\"
            onClick={() => {
              onCancel && onCancel();
            }}
            {...getOverrideProps(overrides, \\"CancelButton\\")}
          ></Button>
          <Button
            children=\\"Submit\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={Object.values(errors).some((e) => e?.hasError)}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
    </form>
  );
}
"
`;

exports[`amplify form renderer tests datastore form tests should generate a update form 2`] = `
"import * as React from \\"react\\";
import { Post } from \\"../models\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { GridProps, TextAreaFieldProps, TextFieldProps } from \\"@aws-amplify/ui-react\\";
export declare type ValidationResponse = {
    hasError: boolean;
    errorMessage?: string;
};
export declare type ValidationFunction<T> = (value: T, validationResponse: ValidationResponse) => ValidationResponse | Promise<ValidationResponse>;
export declare type MyPostFormInputValues = {
    TextAreaFieldbbd63464?: ValidationFunction<string>;
    caption?: ValidationFunction<string>;
    username?: ValidationFunction<string>;
    profile_url?: ValidationFunction<string>;
    post_url?: ValidationFunction<string>;
};
export declare type FormProps<T> = Partial<T> & React.DOMAttributes<HTMLDivElement>;
export declare type MyPostFormOverridesProps = {
    MyPostFormGrid?: FormProps<GridProps>;
    TextAreaFieldbbd63464?: FormProps<TextAreaFieldProps>;
    caption?: FormProps<TextFieldProps>;
    username?: FormProps<TextFieldProps>;
    profile_url?: FormProps<TextFieldProps>;
    post_url?: FormProps<TextFieldProps>;
} & EscapeHatchProps;
export declare type MyPostFormProps = React.PropsWithChildren<{
    overrides?: MyPostFormOverridesProps | undefined | null;
} & {
    id?: string;
    post?: Post;
    onSubmitBefore?: (fields: Record<string, string>) => Record<string, string>;
    onSubmitComplete?: ({ saveSuccessful, errorMessage }: {
        saveSuccessful: boolean;
        errorMessage?: string;
    }) => void;
    onCancel?: () => void;
    onValidate?: MyPostFormInputValues;
}>;
export default function MyPostForm(props: MyPostFormProps): React.ReactElement;
"
`;

exports[`amplify form renderer tests datastore form tests should render a form with multiple date types 1`] = `
"/* eslint-disable */
import * as React from \\"react\\";
import { fetchByPath, validateField } from \\"./utils\\";
import { InputGallery } from \\"../models\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import {
  Badge,
  Button,
  CheckboxField,
  Divider,
  Flex,
  Grid,
  Icon,
  Radio,
  RadioGroupField,
  ScrollView,
  TextField,
  ToggleButton,
} from \\"@aws-amplify/ui-react\\";
import { DataStore } from \\"aws-amplify\\";
function ArrayField({
  defaultValues = [],
  onChange,
  inputFieldRef,
  children,
  hasError,
  setFieldValue,
  currentFieldValue,
}) {
  const [selectedBadgeIndex, setSelectedBadgeIndex] = React.useState();
  const [items, setItems] = React.useState(defaultValues);
  const removeItem = async (removeIndex) => {
    const newItems = items.filter((value, index) => index !== removeIndex);
    await onChange(newItems);
    setSelectedBadgeIndex(undefined);
    setItems(newItems);
  };
  const addItem = async () => {
    if (currentFieldValue.length && !hasError) {
      const newItems = [...items];
      if (selectedBadgeIndex !== undefined) {
        newItems[selectedBadgeIndex] = currentFieldValue;
        setItems(newItems);
        setSelectedBadgeIndex(undefined);
      } else {
        newItems.push(currentFieldValue);
        setItems(newItems);
      }
      await onChange(newItems);
    }
  };
  return (
    <React.Fragment>
      {children}
      <Flex justifyContent=\\"flex-end\\">
        <Button
          children=\\"Cancel\\"
          type=\\"button\\"
          onClick={() => {
            setFieldValue(\\"\\");
          }}
        ></Button>
        <Button
          children=\\"Save\\"
          variation=\\"primary\\"
          isDisabled={hasError}
          onClick={addItem}
        ></Button>
      </Flex>
      {!!items.length && (
        <ScrollView height=\\"inherit\\" width=\\"inherit\\" maxHeight={\\"7rem\\"}>
          {items.map((value, index) => {
            return (
              <Badge
                key={index}
                style={{
                  cursor: \\"pointer\\",
                  alignItems: \\"center\\",
                  marginRight: 3,
                  marginTop: 3,
                  backgroundColor:
                    index === selectedBadgeIndex ? \\"#B8CEF9\\" : \\"\\",
                }}
                onClick={() => {
                  setSelectedBadgeIndex(index);
                  setFieldValue(items[index]);
                  inputFieldRef?.current?.focus();
                }}
              >
                {value}
                <Icon
                  style={{
                    cursor: \\"pointer\\",
                    paddingLeft: 3,
                    width: 20,
                    height: 20,
                  }}
                  viewBox={{ width: 20, height: 20 }}
                  paths={[
                    {
                      d: \\"M10 10l5.09-5.09L10 10l5.09 5.09L10 10zm0 0L4.91 4.91 10 10l-5.09 5.09L10 10z\\",
                      stroke: \\"black\\",
                    },
                  ]}
                  ariaLabel=\\"button\\"
                  onClick={(event) => {
                    event.stopPropagation();
                    removeItem(index);
                  }}
                />
              </Badge>
            );
          })}
        </ScrollView>
      )}
      <Divider orientation=\\"horizontal\\" marginTop={5} />
    </React.Fragment>
  );
}
export default function InputGalleryCreateForm(props) {
  const {
    onSubmitBefore,
    onSubmitComplete,
    onCancel,
    onValidate,
    overrides,
    ...rest
  } = props;
  const [num, setNum] = React.useState(undefined);
  const [rootbeer, setRootbeer] = React.useState(undefined);
  const [attend, setAttend] = React.useState(undefined);
  const [maybeSlide, setMaybeSlide] = React.useState(undefined);
  const [maybeCheck, setMaybeCheck] = React.useState(undefined);
  const [arrayTypeField, setArrayTypeField] = React.useState(undefined);
  const [timestamp, setTimestamp] = React.useState(undefined);
  const [ippy, setIppy] = React.useState(undefined);
  const [timeisnow, setTimeisnow] = React.useState(undefined);
  const [errors, setErrors] = React.useState({});
  const [currentArrayTypeFieldValue, setCurrentArrayTypeFieldValue] =
    React.useState(\\"\\");
  const arrayTypeFieldRef = React.createRef();
  const validations = {
    num: [],
    rootbeer: [],
    attend: [{ type: \\"Required\\" }],
    maybeSlide: [],
    maybeCheck: [],
    arrayTypeField: [],
    timestamp: [],
    ippy: [{ type: \\"IpAddress\\" }],
    timeisnow: [],
  };
  const runValidationTasks = async (fieldName, value) => {
    let validationResponse = validateField(value, validations[fieldName]);
    const customValidator = fetchByPath(onValidate, fieldName);
    if (customValidator) {
      validationResponse = await customValidator(value, validationResponse);
    }
    setErrors((errors) => ({ ...errors, [fieldName]: validationResponse }));
    return validationResponse;
  };
  return (
    <form
      onSubmit={async (event) => {
        event.preventDefault();
        let modelFields = {
          num,
          rootbeer,
          attend,
          maybeSlide,
          maybeCheck,
          arrayTypeField,
          timestamp,
          ippy,
          timeisnow,
        };
        const validationResponses = await Promise.all(
          Object.keys(validations).reduce((promises, fieldName) => {
            if (Array.isArray(modelFields[fieldName])) {
              promises.push(
                ...modelFields[fieldName].map((item) =>
                  runValidationTasks(fieldName, item)
                )
              );
              return promises;
            }
            promises.push(
              runValidationTasks(fieldName, modelFields[fieldName])
            );
            return promises;
          }, [])
        );
        if (validationResponses.some((r) => r.hasError)) {
          return;
        }
        if (onSubmitBefore) {
          modelFields = onSubmitBefore(modelFields);
        }
        try {
          await DataStore.save(new InputGallery(modelFields));
          if (onSubmitComplete) {
            onSubmitComplete({ saveSuccessful: true });
          }
        } catch (err) {
          if (onSubmitComplete) {
            onSubmitComplete({
              saveSuccessful: false,
              errorMessage: err.message,
            });
          }
        }
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"InputGalleryCreateForm\\")}
    >
      <Grid
        columnGap=\\"15px\\"
        rowGap=\\"15px\\"
        padding=\\"20px\\"
        {...getOverrideProps(overrides, \\"InputGalleryCreateFormGrid\\")}
      >
        <TextField
          label=\\"Num\\"
          isRequired={false}
          isReadOnly={false}
          type=\\"number\\"
          onChange={async (e) => {
            const value = parseInt(e.target.value);
            await runValidationTasks(\\"num\\", value);
            setNum(value);
          }}
          errorMessage={errors.num?.errorMessage}
          hasError={errors.num?.hasError}
          {...getOverrideProps(overrides, \\"num\\")}
        ></TextField>
        <TextField
          label=\\"Rootbeer\\"
          isRequired={false}
          isReadOnly={false}
          type=\\"number\\"
          onChange={async (e) => {
            const value = Number(e.target.value);
            await runValidationTasks(\\"rootbeer\\", value);
            setRootbeer(value);
          }}
          errorMessage={errors.rootbeer?.errorMessage}
          hasError={errors.rootbeer?.hasError}
          {...getOverrideProps(overrides, \\"rootbeer\\")}
        ></TextField>
        <RadioGroupField
          label=\\"Attend\\"
          name=\\"attend\\"
          isReadOnly={false}
          isRequired=\\"false\\"
          onChange={async (e) => {
            const value = e.target.value === \\"true\\";
            await runValidationTasks(\\"attend\\", value);
            setAttend(value);
          }}
          errorMessage={errors.attend?.errorMessage}
          hasError={errors.attend?.hasError}
          {...getOverrideProps(overrides, \\"attend\\")}
        >
          <Radio
            children=\\"Yes\\"
            value=\\"true\\"
            {...getOverrideProps(overrides, \\"attendRadio0\\")}
          ></Radio>
          <Radio
            children=\\"No\\"
            value=\\"false\\"
            {...getOverrideProps(overrides, \\"attendRadio1\\")}
          ></Radio>
        </RadioGroupField>
        <ToggleButton
          children=\\"Maybe slide\\"
          isDisabled={false}
          defaultPressed={false}
          onChange={async (e) => {
            const value = e.target.checked;
            await runValidationTasks(\\"maybeSlide\\", value);
            setMaybeSlide(value);
          }}
          errorMessage={errors.maybeSlide?.errorMessage}
          hasError={errors.maybeSlide?.hasError}
          {...getOverrideProps(overrides, \\"maybeSlide\\")}
        ></ToggleButton>
        <CheckboxField
          label=\\"Maybe check\\"
          name=\\"maybeCheck\\"
          value=\\"maybeCheck\\"
          isDisabled={false}
          defaultChecked={false}
          onChange={async (e) => {
            const value = e.target.checked;
            await runValidationTasks(\\"maybeCheck\\", value);
            setMaybeCheck(value);
          }}
          errorMessage={errors.maybeCheck?.errorMessage}
          hasError={errors.maybeCheck?.hasError}
          {...getOverrideProps(overrides, \\"maybeCheck\\")}
        ></CheckboxField>
        <ArrayField
          onChange={async (items) => {
            setArrayTypeField(items);
            setCurrentArrayTypeFieldValue(\\"\\");
          }}
          currentFieldValue={currentArrayTypeFieldValue}
          hasError={errors.arrayTypeField?.hasError}
          setFieldValue={setCurrentArrayTypeFieldValue}
          inputFieldRef={arrayTypeFieldRef}
        >
          <TextField
            label=\\"Array type field\\"
            isRequired={false}
            isReadOnly={false}
            onChange={async (e) => {
              const { value } = e.target;
              await runValidationTasks(\\"arrayTypeField\\", value);
              setCurrentArrayTypeFieldValue(value);
            }}
            errorMessage={errors.arrayTypeField?.errorMessage}
            hasError={errors.arrayTypeField?.hasError}
            value={currentArrayTypeFieldValue}
            ref={arrayTypeFieldRef}
            {...getOverrideProps(overrides, \\"arrayTypeField\\")}
          ></TextField>
        </ArrayField>
        <TextField
          label=\\"Timestamp\\"
          isRequired={false}
          isReadOnly={false}
          type=\\"datetime-local\\"
          onChange={async (e) => {
            const value = Number(new Date(e.target.value));
            await runValidationTasks(\\"timestamp\\", value);
            setTimestamp(value);
          }}
          errorMessage={errors.timestamp?.errorMessage}
          hasError={errors.timestamp?.hasError}
          {...getOverrideProps(overrides, \\"timestamp\\")}
        ></TextField>
        <TextField
          label=\\"Ippy\\"
          isRequired={false}
          isReadOnly={false}
          onChange={async (e) => {
            const { value } = e.target;
            await runValidationTasks(\\"ippy\\", value);
            setIppy(value);
          }}
          errorMessage={errors.ippy?.errorMessage}
          hasError={errors.ippy?.hasError}
          {...getOverrideProps(overrides, \\"ippy\\")}
        ></TextField>
        <TextField
          label=\\"Timeisnow\\"
          isRequired={false}
          isReadOnly={false}
          type=\\"time\\"
          onChange={async (e) => {
            const { value } = e.target;
            await runValidationTasks(\\"timeisnow\\", value);
            setTimeisnow(value);
          }}
          errorMessage={errors.timeisnow?.errorMessage}
          hasError={errors.timeisnow?.hasError}
          {...getOverrideProps(overrides, \\"timeisnow\\")}
        ></TextField>
      </Grid>
      <Flex
        justifyContent=\\"space-between\\"
        marginTop=\\"1rem\\"
        {...getOverrideProps(overrides, \\"CTAFlex\\")}
      >
        <Button
          children=\\"Clear\\"
          type=\\"reset\\"
          {...getOverrideProps(overrides, \\"ClearButton\\")}
        ></Button>
        <Flex {...getOverrideProps(overrides, \\"SubmitAndResetFlex\\")}>
          <Button
            children=\\"Cancel\\"
            type=\\"button\\"
            onClick={() => {
              onCancel && onCancel();
            }}
            {...getOverrideProps(overrides, \\"CancelButton\\")}
          ></Button>
          <Button
            children=\\"Submit\\"
            type=\\"submit\\"
            variation=\\"primary\\"
            isDisabled={Object.values(errors).some((e) => e?.hasError)}
            {...getOverrideProps(overrides, \\"SubmitButton\\")}
          ></Button>
        </Flex>
      </Flex>
    </form>
  );
}
"
`;

exports[`amplify form renderer tests datastore form tests should render a form with multiple date types 2`] = `
"import * as React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { CheckboxFieldProps, GridProps, RadioGroupFieldProps, TextFieldProps, ToggleButtonProps } from \\"@aws-amplify/ui-react\\";
export declare type ValidationResponse = {
    hasError: boolean;
    errorMessage?: string;
};
export declare type ValidationFunction<T> = (value: T, validationResponse: ValidationResponse) => ValidationResponse | Promise<ValidationResponse>;
export declare type InputGalleryCreateFormInputValues = {
    num?: ValidationFunction<number>;
    rootbeer?: ValidationFunction<number>;
    attend?: ValidationFunction<boolean>;
    maybeSlide?: ValidationFunction<boolean>;
    maybeCheck?: ValidationFunction<boolean>;
    arrayTypeField?: ValidationFunction<string>;
    timestamp?: ValidationFunction<number>;
    ippy?: ValidationFunction<string>;
    timeisnow?: ValidationFunction<string>;
};
export declare type FormProps<T> = Partial<T> & React.DOMAttributes<HTMLDivElement>;
export declare type InputGalleryCreateFormOverridesProps = {
    InputGalleryCreateFormGrid?: FormProps<GridProps>;
    num?: FormProps<TextFieldProps>;
    rootbeer?: FormProps<TextFieldProps>;
    attend?: FormProps<RadioGroupFieldProps>;
    maybeSlide?: FormProps<ToggleButtonProps>;
    maybeCheck?: FormProps<CheckboxFieldProps>;
    arrayTypeField?: FormProps<TextFieldProps>;
    timestamp?: FormProps<TextFieldProps>;
    ippy?: FormProps<TextFieldProps>;
    timeisnow?: FormProps<TextFieldProps>;
} & EscapeHatchProps;
export declare type InputGalleryCreateFormProps = React.PropsWithChildren<{
    overrides?: InputGalleryCreateFormOverridesProps | undefined | null;
} & {
    onSubmitBefore?: (fields: Record<string, string>) => Record<string, string>;
    onSubmitComplete?: ({ saveSuccessful, errorMessage }: {
        saveSuccessful: boolean;
        errorMessage?: string;
    }) => void;
    onCancel?: () => void;
    onValidate?: InputGalleryCreateFormInputValues;
}>;
export default function InputGalleryCreateForm(props: InputGalleryCreateFormProps): React.ReactElement;
"
`;
