// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`amplify render tests actions should render sign out action 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, Flex, FlexProps, Heading } from \\"@aws-amplify/ui-react\\";

export type SiteHeaderProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function SiteHeader(props: SiteHeaderProps): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  const { invokeAction } = useActions({
    signOutAction: {
      type: \\"Amplify.Auth.SignOut\\",
      parameters: { global: true },
    },
  });
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      direction=\\"row\\"
      justifyContent=\\"space-between\\"
      {...rest}
      {...getOverrideProps(overrides, \\"Flex\\")}
    >
      <Heading
        level={1}
        children=\\"Title\\"
        {...getOverrideProps(overrides, \\"Flex.Heading[0]\\")}
      ></Heading>
      <Button
        variation=\\"primary\\"
        children=\\"Log off\\"
        onClick={invokeAction(\\"signOutAction\\")}
        {...getOverrideProps(overrides, \\"Flex.Button[0]\\")}
      ></Button>
    </Flex>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests basic component tests should generate a simple button component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CustomButton(
  props: CustomButtonProps
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Button
      color=\\"#ff0000\\"
      width={20}
      {...rest}
      {...getOverrideProps(overrides, \\"Button\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests basic component tests should generate a simple text component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Text, TextProps } from \\"@aws-amplify/ui-react\\";

export type CustomTextProps = React.PropsWithChildren<
  Partial<TextProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CustomText(props: CustomTextProps): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Text
      color=\\"#ff0000\\"
      width=\\"20px\\"
      children=\\"Text Value\\"
      {...rest}
      {...getOverrideProps(overrides, \\"Text\\")}
    ></Text>
  );
}
"
`;

exports[`amplify render tests basic component tests should generate a simple view component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { View, ViewProps } from \\"@aws-amplify/ui-react\\";

export type TestProps = React.PropsWithChildren<
  Partial<ViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function Test(props: TestProps): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <View
      fontFamily=\\"Times New Roman\\"
      fontSize=\\"20px\\"
      {...rest}
      {...getOverrideProps(overrides, \\"View\\")}
    ></View>
  );
}
"
`;

exports[`amplify render tests collection should render collection with data binding 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User, UserPreferences } from \\"../models\\";
import {
  EscapeHatchProps,
  createDataStorePredicate,
  getOverrideProps,
  useDataStoreBinding,
} from \\"@aws-amplify/ui-react/internal\\";
import {
  Button,
  Collection,
  CollectionProps,
  Flex,
} from \\"@aws-amplify/ui-react\\";

export type CollectionOfCustomButtonsProps = React.PropsWithChildren<
  Partial<CollectionProps<any>> & {
    width?: Number;
    backgroundColor?: String;
    buttonColor?: UserPreferences;
    items?: any[];
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CollectionOfCustomButtons(
  props: CollectionOfCustomButtonsProps
): React.ReactElement {
  const {
    width,
    backgroundColor,
    buttonColor: buttonColorProp,
    items,
    overrides: overridesProp,
    ...rest
  } = props;
  const overrides = { ...overridesProp };
  const buttonUserFilterObj = {
    and: [
      { field: \\"age\\", operand: \\"10\\", operator: \\"gt\\" },
      { field: \\"lastName\\", operand: \\"L\\", operator: \\"beginsWith\\" },
    ],
  };
  const buttonUserFilter = createDataStorePredicate<User>(buttonUserFilterObj);
  const buttonUser =
    items !== undefined
      ? items
      : useDataStoreBinding({
          type: \\"collection\\",
          model: User,
          criteria: buttonUserFilter,
        }).items;
  const buttonColorFilterObj = {
    field: \\"userID\\",
    operand: \\"user@email.com\\",
    operator: \\"eq\\",
  };
  const buttonColorFilter =
    createDataStorePredicate<UserPreferences>(buttonColorFilterObj);
  const buttonColorDataStore = useDataStoreBinding({
    type: \\"collection\\",
    model: UserPreferences,
    criteria: buttonColorFilter,
  }).items[0];
  const buttonColor =
    buttonColorProp !== undefined ? buttonColorProp : buttonColorDataStore;
  return (
    /* @ts-ignore: TS2322 */
    <Collection
      type=\\"list\\"
      isPaginated={true}
      gap=\\"1.5rem\\"
      backgroundColor={backgroundColor}
      items={buttonUser || []}
      {...rest}
      {...getOverrideProps(overrides, \\"Collection\\")}
    >
      {(item, index) => (
        <Flex
          key={item.id}
          {...getOverrideProps(overrides, \\"Collection.Flex[0]\\")}
        >
          <Button
            labelWidth={width}
            backgroundColor={buttonColor?.favoriteColor}
            disabled={isDisabled}
            children={item.username || \\"hspain@gmail.com\\"}
            {...getOverrideProps(overrides, \\"Collection.Flex[0].Button[0]\\")}
          ></Button>
        </Flex>
      )}
    </Collection>
  );
}
"
`;

exports[`amplify render tests collection should render collection with data binding and sort 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import { User, UserPreferences } from \\"../models\\";
import {
  EscapeHatchProps,
  createDataStorePredicate,
  getOverrideProps,
  useDataStoreBinding,
} from \\"@aws-amplify/ui-react/internal\\";
import {
  Button,
  Collection,
  CollectionProps,
  Flex,
} from \\"@aws-amplify/ui-react\\";
import { SortDirection, SortPredicate } from \\"@aws-amplify/datastore\\";

export type CollectionOfCustomButtonsProps = React.PropsWithChildren<
  Partial<CollectionProps<any>> & {
    width?: Number;
    backgroundColor?: String;
    buttonColor?: UserPreferences;
    items?: any[];
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CollectionOfCustomButtons(
  props: CollectionOfCustomButtonsProps
): React.ReactElement {
  const {
    width,
    backgroundColor,
    buttonColor: buttonColorProp,
    items,
    overrides: overridesProp,
    ...rest
  } = props;
  const overrides = { ...overridesProp };
  const buttonUserFilterObj = {
    and: [
      { field: \\"age\\", operand: \\"10\\", operator: \\"gt\\" },
      { field: \\"lastName\\", operand: \\"L\\", operator: \\"beginsWith\\" },
    ],
  };
  const buttonUserFilter = createDataStorePredicate<User>(buttonUserFilterObj);
  const buttonUserPagination = {
    sort: (s: SortPredicate<User>) =>
      s.firstName(SortDirection.ASCENDING).lastName(SortDirection.DESCENDING),
  };
  const buttonUser =
    items !== undefined
      ? items
      : useDataStoreBinding({
          type: \\"collection\\",
          model: User,
          criteria: buttonUserFilter,
          pagination: buttonUserPagination,
        }).items;
  const buttonColorFilterObj = {
    field: \\"userID\\",
    operand: \\"user@email.com\\",
    operator: \\"eq\\",
  };
  const buttonColorFilter =
    createDataStorePredicate<UserPreferences>(buttonColorFilterObj);
  const buttonColorDataStore = useDataStoreBinding({
    type: \\"collection\\",
    model: UserPreferences,
    criteria: buttonColorFilter,
  }).items[0];
  const buttonColor =
    buttonColorProp !== undefined ? buttonColorProp : buttonColorDataStore;
  return (
    /* @ts-ignore: TS2322 */
    <Collection
      type=\\"list\\"
      isPaginated={true}
      gap=\\"1.5rem\\"
      backgroundColor={backgroundColor}
      items={buttonUser || []}
      {...rest}
      {...getOverrideProps(overrides, \\"Collection\\")}
    >
      {(item, index) => (
        <Flex
          key={item.id}
          {...getOverrideProps(overrides, \\"Collection.Flex[0]\\")}
        >
          <Button
            labelWidth={width}
            backgroundColor={buttonColor?.favoriteColor}
            disabled={isDisabled}
            children={item.username || \\"hspain@gmail.com\\"}
            {...getOverrideProps(overrides, \\"Collection.Flex[0].Button[0]\\")}
          ></Button>
        </Flex>
      )}
    </Collection>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests collection should render collection with data binding if binding name is items 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User, UserPreferences } from \\"../models\\";
import {
  EscapeHatchProps,
  createDataStorePredicate,
  getOverrideProps,
  useDataStoreBinding,
} from \\"@aws-amplify/ui-react/internal\\";
import {
  Button,
  Collection,
  CollectionProps,
  Flex,
} from \\"@aws-amplify/ui-react\\";

export type CollectionOfCustomButtonsProps = React.PropsWithChildren<
  Partial<CollectionProps<any>> & {
    width?: Number;
    backgroundColor?: String;
    buttonColor?: UserPreferences;
    items?: any[];
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CollectionOfCustomButtons(
  props: CollectionOfCustomButtonsProps
): React.ReactElement {
  const {
    width,
    backgroundColor,
    buttonColor: buttonColorProp,
    items: itemsProp,
    overrides: overridesProp,
    ...rest
  } = props;
  const overrides = { ...overridesProp };
  const itemsFilterObj = {
    and: [
      { field: \\"age\\", operand: \\"10\\", operator: \\"gt\\" },
      { field: \\"lastName\\", operand: \\"L\\", operator: \\"beginsWith\\" },
    ],
  };
  const itemsFilter = createDataStorePredicate<User>(itemsFilterObj);
  const items =
    itemsProp !== undefined
      ? itemsProp
      : useDataStoreBinding({
          type: \\"collection\\",
          model: User,
          criteria: itemsFilter,
        }).items;
  const buttonColorFilterObj = {
    field: \\"userID\\",
    operand: \\"user@email.com\\",
    operator: \\"eq\\",
  };
  const buttonColorFilter =
    createDataStorePredicate<UserPreferences>(buttonColorFilterObj);
  const buttonColorDataStore = useDataStoreBinding({
    type: \\"collection\\",
    model: UserPreferences,
    criteria: buttonColorFilter,
  }).items[0];
  const buttonColor =
    buttonColorProp !== undefined ? buttonColorProp : buttonColorDataStore;
  return (
    /* @ts-ignore: TS2322 */
    <Collection
      type=\\"list\\"
      isPaginated={true}
      gap=\\"1.5rem\\"
      backgroundColor={backgroundColor}
      items={items || []}
      {...rest}
      {...getOverrideProps(overrides, \\"Collection\\")}
    >
      {(item, index) => (
        <Flex
          key={item.id}
          {...getOverrideProps(overrides, \\"Collection.Flex[0]\\")}
        >
          <Button
            labelWidth={width}
            backgroundColor={buttonColor?.favoriteColor}
            disabled={isDisabled}
            children={item.username || \\"hspain@gmail.com\\"}
            {...getOverrideProps(overrides, \\"Collection.Flex[0].Button[0]\\")}
          ></Button>
        </Flex>
      )}
    </Collection>
  );
}
"
`;

exports[`amplify render tests collection should render collection with data binding with no predicate 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useDataStoreBinding,
} from \\"@aws-amplify/ui-react/internal\\";
import ListingCard from \\"./ListingCard\\";
import { Collection, CollectionProps } from \\"@aws-amplify/ui-react\\";
import { UntitledModel } from \\"../models\\";

export type ListingCardCollectionProps = React.PropsWithChildren<
  Partial<CollectionProps<any>> & {
    items?: any[];
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ListingCardCollection(
  props: ListingCardCollectionProps
): React.ReactElement {
  const { items, overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  const bananas =
    items !== undefined
      ? items
      : useDataStoreBinding({
          type: \\"collection\\",
          model: UntitledModel,
        }).items;
  return (
    /* @ts-ignore: TS2322 */
    <Collection
      isPaginated=\\"true\\"
      collectionType=\\"grid\\"
      type=\\"list\\"
      columns=\\"2\\"
      order=\\"left-to-right\\"
      items={bananas || []}
      {...rest}
      {...getOverrideProps(overrides, \\"Collection\\")}
    >
      {(item, index) => (
        <ListingCard
          marginRight=\\"0\\"
          marginBottom=\\"0\\"
          marginTop=\\"0\\"
          marginLeft=\\"0\\"
          key={item.id}
          {...getOverrideProps(overrides, \\"Collection.ListingCard[0]\\")}
        ></ListingCard>
      )}
    </Collection>
  );
}
"
`;

exports[`amplify render tests collection should render collection without data binding 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import ListingCard from \\"./ListingCard\\";
import { Collection, CollectionProps } from \\"@aws-amplify/ui-react\\";

export type ListingCardCollectionProps = React.PropsWithChildren<
  Partial<CollectionProps<any>> & {
    items?: any[];
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ListingCardCollection(
  props: ListingCardCollectionProps
): React.ReactElement {
  const { items, overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Collection
      type=\\"list\\"
      isPaginated=\\"true\\"
      items={items || []}
      {...rest}
      {...getOverrideProps(overrides, \\"Collection\\")}
    >
      {(item, index) => (
        <ListingCard
          key={item.id}
          {...getOverrideProps(overrides, \\"Collection.ListingCard[0]\\")}
        ></ListingCard>
      )}
    </Collection>
  );
}
"
`;

exports[`amplify render tests complex component tests should generate a button within a view component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, View, ViewProps } from \\"@aws-amplify/ui-react\\";

export type ViewWithButtonProps = React.PropsWithChildren<
  Partial<ViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ViewWithButton(
  props: ViewWithButtonProps
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <View {...rest} {...getOverrideProps(overrides, \\"View\\")}>
      <Button
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...getOverrideProps(overrides, \\"View.Button[0]\\")}
      ></Button>
    </View>
  );
}
"
`;

exports[`amplify render tests complex component tests should generate a component with custom child 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import CustomButton from \\"./CustomButton\\";
import { View, ViewProps } from \\"@aws-amplify/ui-react\\";

export type ViewWithCustomButtonProps = React.PropsWithChildren<
  Partial<ViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ViewWithCustomButton(
  props: ViewWithCustomButtonProps
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <View {...rest} {...getOverrideProps(overrides, \\"View\\")}>
      <CustomButton
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...getOverrideProps(overrides, \\"View.CustomButton[0]\\")}
      ></CustomButton>
    </View>
  );
}
"
`;

exports[`amplify render tests complex component tests should generate a component with exposeAs prop 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, View, ViewProps } from \\"@aws-amplify/ui-react\\";

export type ViewWithButtonProps = React.PropsWithChildren<
  Partial<ViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ViewWithButton(
  props: ViewWithButtonProps
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <View {...rest} {...getOverrideProps(overrides, \\"View\\")}>
      <Button
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...getOverrideProps(overrides, \\"View.Button[0]\\")}
      ></Button>
    </View>
  );
}
"
`;

exports[`amplify render tests complex examples should render complex sample 1 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, Text } from \\"@aws-amplify/ui-react\\";

export type ComplexTest1Props = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComplexTest1(
  props: ComplexTest1Props
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      padding=\\"34px 56px 34px 56px\\"
      backgroundColor=\\"rgb(255,255,255)\\"
      overflow=\\"hidden\\"
      alignItems=\\"flex-start\\"
      gap=\\"10px\\"
      position=\\"relative\\"
      direction=\\"row\\"
      {...rest}
      {...getOverrideProps(overrides, \\"Flex\\")}
    >
      <Text
        padding=\\"0px 0px 0px 0px\\"
        fontFamily=\\"Roboto\\"
        color=\\"rgb(0,0,0)\\"
        textAlign=\\"left\\"
        width=\\"52px\\"
        fontSize=\\"12px\\"
        lineHeight=\\"14.0625px\\"
        position=\\"relative\\"
        fontWeight=\\"400\\"
        height=\\"14px\\"
        children=\\"Hi harriso\\"
        {...getOverrideProps(overrides, \\"Flex.Text[0]\\")}
      ></Text>
    </Flex>
  );
}
"
`;

exports[`amplify render tests complex examples should render complex sample 2 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, View } from \\"@aws-amplify/ui-react\\";

export type ComplexTest2Props = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComplexTest2(
  props: ComplexTest2Props
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      padding=\\"0px 0px 0px 0px\\"
      backgroundColor=\\"rgb(255,255,255)\\"
      alignItems=\\"flex-start\\"
      gap=\\"0\\"
      width=\\"153px\\"
      position=\\"relative\\"
      direction=\\"row\\"
      height=\\"289px\\"
      {...rest}
      {...getOverrideProps(overrides, \\"Flex\\")}
    >
      <Flex
        padding=\\"10px 10px 10px 10px\\"
        alignSelf=\\"stretch\\"
        flexGrow=\\"1\\"
        overflow=\\"hidden\\"
        gap=\\"10px\\"
        width=\\"100%\\"
        position=\\"relative\\"
        height=\\"100%\\"
        direction=\\"column\\"
        {...getOverrideProps(overrides, \\"Flex.Flex[0]\\")}
      >
        <View
          width=\\"123px\\"
          padding=\\"0px 0px 0px 0px\\"
          backgroundColor=\\"rgb(255,0,0)\\"
          position=\\"relative\\"
          src=\\"https://via.placeholder.com/153x289?text=Amplify+Studio+is+Awesome!\\"
          height=\\"125px\\"
          {...getOverrideProps(overrides, \\"Flex.Flex[0].View[0]\\")}
        ></View>
        <View
          width=\\"123px\\"
          padding=\\"0px 0px 0px 0px\\"
          backgroundColor=\\"rgb(219.30000364780426,255,0)\\"
          position=\\"relative\\"
          src=\\"https://via.placeholder.com/153x289?text=Amplify+Studio+is+Awesome!\\"
          height=\\"122px\\"
          {...getOverrideProps(overrides, \\"Flex.Flex[0].View[1]\\")}
        ></View>
      </Flex>
    </Flex>
  );
}
"
`;

exports[`amplify render tests complex examples should render complex sample 3 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, Text, View } from \\"@aws-amplify/ui-react\\";
import ReneButton from \\"./ReneButton\\";

export type ComplexTest3Props = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComplexTest3(
  props: ComplexTest3Props
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      padding=\\"20px 20px 20px 20px\\"
      backgroundColor=\\"rgb(255,255,255)\\"
      overflow=\\"hidden\\"
      alignItems=\\"center\\"
      gap=\\"80px\\"
      position=\\"relative\\"
      justifyContent=\\"center\\"
      direction=\\"column\\"
      {...rest}
      {...getOverrideProps(overrides, \\"Flex\\")}
    >
      <Text
        padding=\\"0px 0px 0px 0px\\"
        fontFamily=\\"Inter\\"
        color=\\"rgb(0,0,0)\\"
        textAlign=\\"left\\"
        width=\\"146px\\"
        fontSize=\\"24px\\"
        lineHeight=\\"28.80000114440918px\\"
        position=\\"relative\\"
        fontWeight=\\"400\\"
        height=\\"29px\\"
        children=\\"Hello World!\\"
        {...getOverrideProps(overrides, \\"Flex.Text[0]\\")}
      ></Text>
      <View
        width=\\"390px\\"
        padding=\\"0px 0px 0px 0px\\"
        backgroundColor=\\"rgb(196.00000351667404,196.00000351667404,196.00000351667404)\\"
        position=\\"relative\\"
        src=\\"https://via.placeholder.com/430x452?text=Amplify+Studio+is+Awesome!\\"
        height=\\"69px\\"
        {...getOverrideProps(overrides, \\"Flex.View[0]\\")}
      ></View>
      <ReneButton
        width=\\"293px\\"
        height=\\"45px\\"
        {...getOverrideProps(overrides, \\"Flex.ReneButton[0]\\")}
      ></ReneButton>
      <Text
        padding=\\"0px 0px 0px 0px\\"
        fontFamily=\\"Inter\\"
        color=\\"rgb(0,0,0)\\"
        textAlign=\\"left\\"
        width=\\"138px\\"
        fontSize=\\"24px\\"
        lineHeight=\\"28.80000114440918px\\"
        position=\\"relative\\"
        fontWeight=\\"400\\"
        height=\\"29px\\"
        children=\\"Testing 123\\"
        {...getOverrideProps(overrides, \\"Flex.Text[1]\\")}
      ></Text>
    </Flex>
  );
}
"
`;

exports[`amplify render tests complex examples should render complex sample 4 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  Variant,
  getOverrideProps,
  getOverridesFromVariants,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, View } from \\"@aws-amplify/ui-react\\";

export type ComplexTest4Props = React.PropsWithChildren<
  Partial<FlexProps> & {
    colors?: \\"Red/Orange\\";
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComplexTest4(
  props: ComplexTest4Props
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const variants: Variant[] = [
    {
      overrides: {
        Flex: {
          padding: \\"10px 10px 10px 10px\\",
          backgroundColor: \\"rgb(255,255,255)\\",
          overflow: \\"hidden\\",
          alignItems: \\"flex-start\\",
          gap: \\"10px\\",
          position: \\"relative\\",
          direction: \\"row\\",
        },
        \\"Flex.Flex.View[1]\\": {
          padding: \\"0px 0px 0px 0px\\",
          backgroundColor: \\"rgb(255,153.00000607967377,0)\\",
          top: \\"1px\\",
          left: \\"203px\\",
          src: \\"https://via.placeholder.com/323x123?text=Amplify+Studio+is+Awesome!\\",
          width: \\"120px\\",
          position: \\"absolute\\",
          height: \\"122px\\",
        },
        \\"Flex.Flex.View[0]\\": {
          padding: \\"0px 0px 0px 0px\\",
          backgroundColor: \\"rgb(255,0,0)\\",
          top: \\"0px\\",
          left: \\"0px\\",
          src: \\"https://via.placeholder.com/323x123?text=Amplify+Studio+is+Awesome!\\",
          width: \\"122px\\",
          position: \\"absolute\\",
          height: \\"123px\\",
        },
        \\"Flex.Flex[0]\\": {
          width: \\"323px\\",
          padding: \\"0px 0px 0px 0px\\",
          position: \\"relative\\",
          height: \\"123px\\",
        },
      },
      variantValues: { colors: \\"Red/Orange\\" },
    },
  ];
  const mergeVariantsAndOverrides = (
    variants: EscapeHatchProps,
    overrides: EscapeHatchProps
  ): EscapeHatchProps => {
    const overrideKeys = new Set(Object.keys(overrides));
    const sharedKeys = Object.keys(variants).filter((variantKey) =>
      overrideKeys.has(variantKey)
    );
    const merged = Object.fromEntries(
      sharedKeys.map((sharedKey) => [
        sharedKey,
        { ...variants[sharedKey], ...overrides[sharedKey] },
      ])
    );
    return {
      ...variants,
      ...overrides,
      ...merged,
    };
  };
  const overrides = mergeVariantsAndOverrides(
    getOverridesFromVariants(variants, props),
    overridesProp || {}
  );
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      padding=\\"10px 10px 10px 10px\\"
      backgroundColor=\\"rgb(255,255,255)\\"
      overflow=\\"hidden\\"
      alignItems=\\"flex-start\\"
      gap=\\"10px\\"
      position=\\"relative\\"
      direction=\\"row\\"
      {...rest}
      {...getOverrideProps(overrides, \\"Flex\\")}
    >
      <Flex
        width=\\"323px\\"
        padding=\\"0px 0px 0px 0px\\"
        position=\\"relative\\"
        height=\\"123px\\"
        {...getOverrideProps(overrides, \\"Flex.Flex[0]\\")}
      >
        <View
          padding=\\"0px 0px 0px 0px\\"
          backgroundColor=\\"rgb(35.699965953826904,0,255)\\"
          top=\\"0px\\"
          left=\\"0px\\"
          src=\\"https://via.placeholder.com/323x123?text=Amplify+Studio+is+Awesome!\\"
          width=\\"122px\\"
          position=\\"absolute\\"
          height=\\"123px\\"
          {...getOverrideProps(overrides, \\"Flex.Flex[0].View[0]\\")}
        ></View>
        <View
          padding=\\"0px 0px 0px 0px\\"
          backgroundColor=\\"rgb(0,255,25.49997568130493)\\"
          top=\\"1px\\"
          left=\\"203px\\"
          src=\\"https://via.placeholder.com/323x123?text=Amplify+Studio+is+Awesome!\\"
          width=\\"120px\\"
          position=\\"absolute\\"
          height=\\"122px\\"
          {...getOverrideProps(overrides, \\"Flex.Flex[0].View[1]\\")}
        ></View>
      </Flex>
    </Flex>
  );
}
"
`;

exports[`amplify render tests complex examples should render complex sample 5 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, View } from \\"@aws-amplify/ui-react\\";

export type ComplexTest5Props = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComplexTest5(
  props: ComplexTest5Props
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      padding=\\"0px 0px 0px 0px\\"
      backgroundColor=\\"rgb(255,255,255)\\"
      position=\\"relative\\"
      alignItems=\\"flex-start\\"
      gap=\\"0\\"
      direction=\\"row\\"
      {...rest}
      {...getOverrideProps(overrides, \\"Flex\\")}
    >
      <View
        width=\\"120px\\"
        padding=\\"0px 0px 0px 0px\\"
        backgroundColor=\\"rgb(35.699965953826904,0,255)\\"
        position=\\"relative\\"
        src=\\"https://via.placeholder.com/240x120?text=Amplify+Studio+is+Awesome!\\"
        height=\\"120px\\"
        {...getOverrideProps(overrides, \\"Flex.View[0]\\")}
      ></View>
      <View
        width=\\"120px\\"
        padding=\\"0px 0px 0px 0px\\"
        backgroundColor=\\"rgb(0,255,25.49997568130493)\\"
        position=\\"relative\\"
        src=\\"https://via.placeholder.com/240x120?text=Amplify+Studio+is+Awesome!\\"
        height=\\"120px\\"
        {...getOverrideProps(overrides, \\"Flex.View[1]\\")}
      ></View>
    </Flex>
  );
}
"
`;

exports[`amplify render tests complex examples should render complex sample 6 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, Text } from \\"@aws-amplify/ui-react\\";

export type ComplexTest6Props = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComplexTest6(
  props: ComplexTest6Props
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      padding=\\"21px 42px 21px 42px\\"
      backgroundColor=\\"rgb(255,255,255)\\"
      overflow=\\"hidden\\"
      position=\\"relative\\"
      gap=\\"22px\\"
      direction=\\"column\\"
      {...rest}
      {...getOverrideProps(overrides, \\"Flex\\")}
    >
      <Text
        padding=\\"0px 0px 0px 0px\\"
        fontFamily=\\"Inter\\"
        color=\\"rgb(0,0,0)\\"
        textAlign=\\"left\\"
        width=\\"68px\\"
        fontSize=\\"24px\\"
        lineHeight=\\"28.125px\\"
        position=\\"relative\\"
        fontWeight=\\"700\\"
        height=\\"29px\\"
        children=\\"Name\\"
        {...getOverrideProps(overrides, \\"Flex.Text[0]\\")}
      ></Text>
      <Text
        padding=\\"0px 0px 0px 0px\\"
        fontFamily=\\"Roboto\\"
        color=\\"rgb(0,0,0)\\"
        textAlign=\\"left\\"
        width=\\"83px\\"
        fontSize=\\"12px\\"
        lineHeight=\\"14.0625px\\"
        position=\\"relative\\"
        fontWeight=\\"400\\"
        height=\\"14px\\"
        children=\\"Price / Address\\"
        {...getOverrideProps(overrides, \\"Flex.Text[1]\\")}
      ></Text>
      <Text
        padding=\\"0px 0px 0px 0px\\"
        fontFamily=\\"Roboto\\"
        color=\\"rgb(0,0,0)\\"
        textAlign=\\"left\\"
        width=\\"23px\\"
        fontSize=\\"12px\\"
        lineHeight=\\"14.0625px\\"
        position=\\"relative\\"
        fontWeight=\\"400\\"
        height=\\"14px\\"
        children=\\"Sqft\\"
        {...getOverrideProps(overrides, \\"Flex.Text[2]\\")}
      ></Text>
    </Flex>
  );
}
"
`;

exports[`amplify render tests complex examples should render complex sample 7 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Image, Text, View, ViewProps } from \\"@aws-amplify/ui-react\\";

export type ComplexTest7Props = React.PropsWithChildren<
  Partial<ViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComplexTest7(
  props: ComplexTest7Props
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <View
      width=\\"401px\\"
      padding=\\"0px 0px 0px 0px\\"
      position=\\"relative\\"
      height=\\"192px\\"
      {...rest}
      {...getOverrideProps(overrides, \\"View\\")}
    >
      <Image
        border=\\"4px SOLID rgb(0,0,0)\\"
        padding=\\"0px 0px 0px 0px\\"
        top=\\"0px\\"
        borderRadius=\\"45px\\"
        left=\\"254.15074157714844px\\"
        src=\\"https://via.placeholder.com/401x192?text=Amplify+Studio+is+Awesome!\\"
        width=\\"150.84925842285156px\\"
        position=\\"absolute\\"
        height=\\"196px\\"
        {...getOverrideProps(overrides, \\"View.Image[0]\\")}
      ></Image>
      <Text
        padding=\\"0px 0px 0px 0px\\"
        color=\\"rgb(0,0,0)\\"
        textAlign=\\"left\\"
        fontFamily=\\"Inter\\"
        top=\\"0px\\"
        left=\\"187.4011993408203px\\"
        width=\\"54.426666259765625px\\"
        fontSize=\\"24px\\"
        lineHeight=\\"28.80000114440918px\\"
        position=\\"absolute\\"
        fontWeight=\\"400\\"
        height=\\"27.839996337890625px\\"
        children=\\"Test\\"
        {...getOverrideProps(overrides, \\"View.Text[0]\\")}
      ></Text>
      <Image
        border=\\"4px SOLID rgb(0,0,0)\\"
        padding=\\"0px 0px 0px 0px\\"
        top=\\"0px\\"
        borderRadius=\\"27px\\"
        left=\\"0px\\"
        src=\\"https://via.placeholder.com/401x192?text=Amplify+Studio+is+Awesome!\\"
        width=\\"169.42330932617188px\\"
        position=\\"absolute\\"
        height=\\"189.0880126953125px\\"
        {...getOverrideProps(overrides, \\"View.Image[1]\\")}
      ></Image>
    </View>
  );
}
"
`;

exports[`amplify render tests complex examples should render complex sample 8 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, View } from \\"@aws-amplify/ui-react\\";

export type ComplexTest8Props = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComplexTest8(
  props: ComplexTest8Props
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      padding=\\"0px 0px 0px 0px\\"
      backgroundColor=\\"rgb(255,255,255)\\"
      alignItems=\\"flex-start\\"
      gap=\\"0\\"
      width=\\"145px\\"
      position=\\"relative\\"
      direction=\\"row\\"
      height=\\"243px\\"
      {...rest}
      {...getOverrideProps(overrides, \\"Flex\\")}
    >
      <Flex
        padding=\\"0px 0px 0px 0px\\"
        flexGrow=\\"0\\"
        gap=\\"0\\"
        width=\\"472px\\"
        position=\\"relative\\"
        height=\\"723px\\"
        direction=\\"column\\"
        {...getOverrideProps(overrides, \\"Flex.Flex[0]\\")}
      >
        <View
          width=\\"145px\\"
          padding=\\"0px 0px 0px 0px\\"
          backgroundColor=\\"rgb(219.30000364780426,255,0)\\"
          position=\\"relative\\"
          src=\\"https://via.placeholder.com/472x723?text=Amplify+Studio+is+Awesome!\\"
          height=\\"119px\\"
          {...getOverrideProps(overrides, \\"Flex.Flex[0].View[0]\\")}
        ></View>
        <View
          width=\\"145px\\"
          padding=\\"0px 0px 0px 0px\\"
          backgroundColor=\\"rgb(255,0,0)\\"
          position=\\"relative\\"
          src=\\"https://via.placeholder.com/472x723?text=Amplify+Studio+is+Awesome!\\"
          height=\\"124px\\"
          {...getOverrideProps(overrides, \\"Flex.Flex[0].View[1]\\")}
        ></View>
      </Flex>
    </Flex>
  );
}
"
`;

exports[`amplify render tests complex examples should render complex sample 9 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  Variant,
  getOverrideProps,
  getOverridesFromVariants,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, Flex, FlexProps, Text } from \\"@aws-amplify/ui-react\\";

export type ComplexTest9Props = React.PropsWithChildren<
  Partial<FlexProps> & {
    mode?: \\"Dark\\" | \\"Light\\";
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComplexTest9(
  props: ComplexTest9Props
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const variants: Variant[] = [
    {
      nodeId: \\"2878:3221\\",
      variantValues: { mode: \\"Light\\" },
      overrides: {
        \\"Flex.Flex[0].Flex[0].Text[0]\\": {
          fontFamily: \\"Inter\\",
          fontSize: \\"16px\\",
          fontWeight: \\"700\\",
          color:
            \\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\",
          lineHeight: \\"20px\\",
          textAlign: \\"center\\",
          display: \\"flex\\",
          direction: \\"column\\",
          justifyContent: \\"flex-start\\",
          letterSpacing: \\"0.49px\\",
          width: \\"701px\\",
          shrink: \\"0\\",
          alignSelf: \\"stretch\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
          children: \\"LOREM IPSUM\\",
        },
        \\"Flex.Flex[0].Flex[0].Flex[0].Text[0]\\": {
          fontFamily: \\"Inter\\",
          fontSize: \\"40px\\",
          fontWeight: \\"700\\",
          color:
            \\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\",
          lineHeight: \\"48px\\",
          textAlign: \\"center\\",
          display: \\"flex\\",
          direction: \\"column\\",
          justifyContent: \\"flex-start\\",
          width: \\"701px\\",
          shrink: \\"0\\",
          alignSelf: \\"stretch\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
          children: \\"Ut enim ad minim veniam quis nostrud\\",
        },
        \\"Flex.Flex[0].Flex[0].Flex[0].Text[1]\\": {
          fontFamily: \\"Inter\\",
          fontSize: \\"16px\\",
          fontWeight: \\"400\\",
          color:
            \\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\",
          lineHeight: \\"24px\\",
          textAlign: \\"center\\",
          display: \\"flex\\",
          direction: \\"column\\",
          justifyContent: \\"flex-start\\",
          letterSpacing: \\"0.010000000000000009px\\",
          width: \\"701px\\",
          shrink: \\"0\\",
          alignSelf: \\"stretch\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
          children:
            \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco.\\",
        },
        \\"Flex.Flex[0].Flex[0].Flex[0]\\": {
          gap: \\"16px\\",
          direction: \\"column\\",
          justifyContent: \\"center\\",
          alignItems: \\"center\\",
          shrink: \\"0\\",
          alignSelf: \\"stretch\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
        },
        \\"Flex.Flex[0].Flex[0].Button[0]\\": {
          display: \\"flex\\",
          shrink: \\"0\\",
          width: \\"206px\\",
          size: \\"large\\",
          variation: \\"primary\\",
          children: \\"Primary Button\\",
        },
        \\"Flex.Flex[0].Flex[0]\\": {
          gap: \\"24px\\",
          direction: \\"column\\",
          justifyContent: \\"center\\",
          alignItems: \\"center\\",
          shrink: \\"0\\",
          alignSelf: \\"stretch\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
        },
        \\"Flex.Flex[0]\\": {
          gap: \\"10px\\",
          direction: \\"column\\",
          height: \\"324px\\",
          justifyContent: \\"center\\",
          alignItems: \\"center\\",
          grow: \\"1\\",
          basis: \\"941px\\",
          alignSelf: \\"stretch\\",
          overflow: \\"hidden\\",
          position: \\"relative\\",
          padding: \\"120px 120px 120px 120px\\",
          backgroundColor: \\"rgba(255,255,255,1)\\",
        },
        Flex: {
          gap: \\"0\\",
          direction: \\"row\\",
          width: \\"941px\\",
          height: \\"324px\\",
          justifyContent: \\"center\\",
          alignItems: \\"center\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
        },
      },
    },
    {
      nodeId: \\"2878:3272\\",
      variantValues: { mode: \\"Dark\\" },
      overrides: {
        \\"Flex.Flex[0].Flex[0].Text[0]\\": {
          fontFamily: \\"Inter\\",
          fontSize: \\"16px\\",
          fontWeight: \\"700\\",
          color:
            \\"rgba(233.00000131130219,249.00000035762787,252.00000017881393,1)\\",
          lineHeight: \\"20px\\",
          textAlign: \\"center\\",
          display: \\"flex\\",
          direction: \\"column\\",
          justifyContent: \\"flex-start\\",
          letterSpacing: \\"0.49px\\",
          width: \\"445px\\",
          shrink: \\"0\\",
          alignSelf: \\"stretch\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
          children: \\"TestMessage1\\",
        },
        \\"Flex.Flex[0].Flex[0].Flex[0].Text[0]\\": {
          fontFamily: \\"Inter\\",
          fontSize: \\"40px\\",
          fontWeight: \\"700\\",
          color:
            \\"rgba(233.00000131130219,249.00000035762787,252.00000017881393,1)\\",
          lineHeight: \\"48px\\",
          textAlign: \\"center\\",
          display: \\"flex\\",
          direction: \\"column\\",
          justifyContent: \\"flex-start\\",
          width: \\"445px\\",
          shrink: \\"0\\",
          alignSelf: \\"stretch\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
          children: \\"TestMessage2\\",
        },
        \\"Flex.Flex[0].Flex[0].Flex[0].Text[1]\\": {
          fontFamily: \\"Inter\\",
          fontSize: \\"16px\\",
          fontWeight: \\"400\\",
          color:
            \\"rgba(233.00000131130219,249.00000035762787,252.00000017881393,1)\\",
          lineHeight: \\"24px\\",
          textAlign: \\"center\\",
          display: \\"flex\\",
          direction: \\"column\\",
          justifyContent: \\"flex-start\\",
          letterSpacing: \\"0.010000000000000009px\\",
          width: \\"445px\\",
          shrink: \\"0\\",
          alignSelf: \\"stretch\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
          children: \\"TestMessage3\\",
        },
        \\"Flex.Flex[0].Flex[0].Flex[0]\\": {
          gap: \\"16px\\",
          direction: \\"column\\",
          justifyContent: \\"center\\",
          alignItems: \\"center\\",
          shrink: \\"0\\",
          alignSelf: \\"stretch\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
        },
        \\"Flex.Flex[0].Flex[0].Button[0]\\": {
          display: \\"flex\\",
          shrink: \\"0\\",
          width: \\"174px\\",
          size: \\"large\\",
          variation: \\"primary\\",
          children: \\"TestButton1\\",
        },
        \\"Flex.Flex[0].Flex[0]\\": {
          gap: \\"24px\\",
          direction: \\"column\\",
          justifyContent: \\"center\\",
          alignItems: \\"center\\",
          shrink: \\"0\\",
          alignSelf: \\"stretch\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
        },
        \\"Flex.Flex[0]\\": {
          gap: \\"10px\\",
          direction: \\"column\\",
          height: \\"422px\\",
          justifyContent: \\"center\\",
          alignItems: \\"center\\",
          grow: \\"1\\",
          basis: \\"685px\\",
          alignSelf: \\"stretch\\",
          overflow: \\"hidden\\",
          position: \\"relative\\",
          padding: \\"120px 120px 120px 120px\\",
          backgroundColor: \\"rgba(0,63.750030398368835,76.50000303983688,1)\\",
        },
        Flex: {
          gap: \\"0\\",
          direction: \\"row\\",
          width: \\"908px\\",
          height: \\"422px\\",
          justifyContent: \\"center\\",
          alignItems: \\"center\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
        },
      },
    },
  ];
  const mergeVariantsAndOverrides = (
    variants: EscapeHatchProps,
    overrides: EscapeHatchProps
  ): EscapeHatchProps => {
    const overrideKeys = new Set(Object.keys(overrides));
    const sharedKeys = Object.keys(variants).filter((variantKey) =>
      overrideKeys.has(variantKey)
    );
    const merged = Object.fromEntries(
      sharedKeys.map((sharedKey) => [
        sharedKey,
        { ...variants[sharedKey], ...overrides[sharedKey] },
      ])
    );
    return {
      ...variants,
      ...overrides,
      ...merged,
    };
  };
  const overrides = mergeVariantsAndOverrides(
    getOverridesFromVariants(variants, props),
    overridesProp || {}
  );
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      gap=\\"0\\"
      direction=\\"row\\"
      width=\\"941px\\"
      height=\\"324px\\"
      justifyContent=\\"center\\"
      alignItems=\\"center\\"
      position=\\"relative\\"
      padding=\\"0px 0px 0px 0px\\"
      {...rest}
      {...getOverrideProps(overrides, \\"Flex\\")}
    >
      <Flex
        gap=\\"10px\\"
        direction=\\"column\\"
        height=\\"324px\\"
        justifyContent=\\"center\\"
        alignItems=\\"center\\"
        grow=\\"1\\"
        basis=\\"941px\\"
        alignSelf=\\"stretch\\"
        overflow=\\"hidden\\"
        position=\\"relative\\"
        padding=\\"120px 120px 120px 120px\\"
        backgroundColor=\\"rgba(255,255,255,1)\\"
        {...getOverrideProps(overrides, \\"Flex.Flex[0]\\")}
      >
        <Flex
          gap=\\"24px\\"
          direction=\\"column\\"
          justifyContent=\\"center\\"
          alignItems=\\"center\\"
          shrink=\\"0\\"
          alignSelf=\\"stretch\\"
          position=\\"relative\\"
          padding=\\"0px 0px 0px 0px\\"
          {...getOverrideProps(overrides, \\"Flex.Flex[0].Flex[0]\\")}
        >
          <Text
            fontFamily=\\"Inter\\"
            fontSize=\\"16px\\"
            fontWeight=\\"700\\"
            color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
            lineHeight=\\"20px\\"
            textAlign=\\"center\\"
            display=\\"flex\\"
            direction=\\"column\\"
            justifyContent=\\"flex-start\\"
            letterSpacing=\\"0.49px\\"
            width=\\"701px\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            children=\\"LOREM IPSUM\\"
            {...getOverrideProps(overrides, \\"Flex.Flex[0].Flex[0].Text[0]\\")}
          ></Text>
          <Flex
            gap=\\"16px\\"
            direction=\\"column\\"
            justifyContent=\\"center\\"
            alignItems=\\"center\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            {...getOverrideProps(overrides, \\"Flex.Flex[0].Flex[0].Flex[0]\\")}
          >
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"40px\\"
              fontWeight=\\"700\\"
              color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
              lineHeight=\\"48px\\"
              textAlign=\\"center\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              width=\\"701px\\"
              shrink=\\"0\\"
              alignSelf=\\"stretch\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Ut enim ad minim veniam quis nostrud\\"
              {...getOverrideProps(
                overrides,
                \\"Flex.Flex[0].Flex[0].Flex[0].Text[0]\\"
              )}
            ></Text>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"center\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              width=\\"701px\\"
              shrink=\\"0\\"
              alignSelf=\\"stretch\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco.\\"
              {...getOverrideProps(
                overrides,
                \\"Flex.Flex[0].Flex[0].Flex[0].Text[1]\\"
              )}
            ></Text>
          </Flex>
          <Button
            display=\\"flex\\"
            shrink=\\"0\\"
            width=\\"206px\\"
            size=\\"large\\"
            variation=\\"primary\\"
            children=\\"Primary Button\\"
            {...getOverrideProps(overrides, \\"Flex.Flex[0].Flex[0].Button[0]\\")}
          ></Button>
        </Flex>
      </Flex>
    </Flex>
  );
}
"
`;

exports[`amplify render tests component with binding should render build property on Text 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Text, TextProps } from \\"@aws-amplify/ui-react\\";

export type TextWithDataBindingProps = React.PropsWithChildren<
  Partial<TextProps> & {
    textValue?: String;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function TextWithDataBinding(
  props: TextWithDataBindingProps
): React.ReactElement {
  const { textValue, overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Text
      color=\\"#ff0000\\"
      width=\\"20px\\"
      children={textValue}
      {...rest}
      {...getOverrideProps(overrides, \\"Text\\")}
    ></Text>
  );
}
"
`;

exports[`amplify render tests component with data binding should add model imports 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User } from \\"../models\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type ComponentWithDataBindingProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    width?: Number;
    isDisabled?: Boolean;
    buttonUser?: User;
    buttonColor?: String;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComponentWithDataBinding(
  props: ComponentWithDataBindingProps
): React.ReactElement {
  const {
    width,
    isDisabled,
    buttonUser,
    buttonColor,
    overrides: overridesProp,
    ...rest
  } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Button
      labelWidth={width}
      disabled={isDisabled}
      children={buttonUser?.username || \\"hspain@gmail.com\\"}
      {...rest}
      {...getOverrideProps(overrides, \\"Button\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests component with data binding should not have useDataStoreBinding when there is no predicate 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { UntitledModel } from \\"../models\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, Text } from \\"@aws-amplify/ui-react\\";

export type SectionHeadingProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    newProp6fd1?: UntitledModel;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function SectionHeading(
  props: SectionHeadingProps
): React.ReactElement {
  const { newProp6fd1, overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      padding=\\"0px 0px 10px 0px\\"
      backgroundColor=\\"rgb(255,255,255)\\"
      direction=\\"column\\"
      {...rest}
      {...getOverrideProps(overrides, \\"Flex\\")}
    >
      <Flex
        tes={newProp6fd1.untitledfield}
        {...getOverrideProps(overrides, \\"Flex.Flex[0]\\")}
      >
        <Text
          fontFamily=\\"Inter\\"
          color=\\"rgb(15.539060980081558,29.73937589675188,47.8125)\\"
          textAlign=\\"left\\"
          fontSize=\\"48px\\"
          lineHeight=\\"48px\\"
          fontWeight=\\"300\\"
          children=\\"Heading 2\\"
          {...getOverrideProps(overrides, \\"Flex.Flex[0].Text[0]\\")}
        ></Text>
      </Flex>
      <Text
        fontFamily=\\"Inter\\"
        color=\\"rgb(0,0,0)\\"
        textAlign=\\"left\\"
        fontSize=\\"32px\\"
        lineHeight=\\"48px\\"
        fontWeight=\\"400\\"
        children=\\"subtitle\\"
        {...getOverrideProps(overrides, \\"Flex.Text[0]\\")}
      ></Text>
    </Flex>
  );
}
"
`;

exports[`amplify render tests component with data binding should render with data binding in child elements 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps, Text } from \\"@aws-amplify/ui-react\\";

export type ChildComponentWithDataBindingProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    textValue?: String;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ChildComponentWithDataBinding(
  props: ChildComponentWithDataBindingProps
): React.ReactElement {
  const { textValue, overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Button {...rest} {...getOverrideProps(overrides, \\"Button\\")}>
      <Text
        children={textValue}
        {...getOverrideProps(overrides, \\"Button.Text[0]\\")}
      ></Text>
    </Button>
  );
}
"
`;

exports[`amplify render tests component with variants and not override children prop should render variants with options provided, and not override children prop 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  Variant,
  getOverrideProps,
  getOverridesFromVariants,
} from \\"@aws-amplify/ui-react/internal\\";
import { View, ViewProps } from \\"@aws-amplify/ui-react\\";

export type ViewPrimitiveProps = React.PropsWithChildren<
  Partial<ViewProps> & {
    variant?: \\"primary\\";
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ViewPrimitive(
  props: ViewPrimitiveProps
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const variants: Variant[] = [
    {
      variantValues: { variant: \\"primary\\" },
      overrides: { View: { label: \\"componentWithVariantsWithLabelProp\\" } },
    },
  ];
  const mergeVariantsAndOverrides = (
    variants: EscapeHatchProps,
    overrides: EscapeHatchProps
  ): EscapeHatchProps => {
    const overrideKeys = new Set(Object.keys(overrides));
    const sharedKeys = Object.keys(variants).filter((variantKey) =>
      overrideKeys.has(variantKey)
    );
    const merged = Object.fromEntries(
      sharedKeys.map((sharedKey) => [
        sharedKey,
        { ...variants[sharedKey], ...overrides[sharedKey] },
      ])
    );
    return {
      ...variants,
      ...overrides,
      ...merged,
    };
  };
  const overrides = mergeVariantsAndOverrides(
    getOverridesFromVariants(variants, props),
    overridesProp || {}
  );
  return (
    /* @ts-ignore: TS2322 */
    <View
      children=\\"Nice view! 🏔\\"
      {...rest}
      {...getOverrideProps(overrides, \\"View\\")}
    ></View>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests component with variants should render variants with options provided 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  Variant,
  getOverrideProps,
  getOverridesFromVariants,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    variant?: \\"primary\\" | \\"secondary\\";
    size?: \\"large\\";
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CustomButton(
  props: CustomButtonProps
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const variants: Variant[] = [
    {
      variantValues: { variant: \\"primary\\" },
      overrides: { Button: { fontSize: \\"12px\\" } },
    },
    {
      variantValues: { variant: \\"secondary\\" },
      overrides: {
        Button: { fontSize: \\"40px\\" },
        \\"Button.Text\\": { fontSize: \\"40px\\" },
      },
    },
    {
      variantValues: { variant: \\"primary\\", size: \\"large\\" },
      overrides: { Button: { width: \\"500\\" } },
    },
  ];
  const mergeVariantsAndOverrides = (
    variants: EscapeHatchProps,
    overrides: EscapeHatchProps
  ): EscapeHatchProps => {
    const overrideKeys = new Set(Object.keys(overrides));
    const sharedKeys = Object.keys(variants).filter((variantKey) =>
      overrideKeys.has(variantKey)
    );
    const merged = Object.fromEntries(
      sharedKeys.map((sharedKey) => [
        sharedKey,
        { ...variants[sharedKey], ...overrides[sharedKey] },
      ])
    );
    return {
      ...variants,
      ...overrides,
      ...merged,
    };
  };
  const overrides = mergeVariantsAndOverrides(
    getOverridesFromVariants(variants, props),
    overridesProp || {}
  );
  return (
    /* @ts-ignore: TS2322 */
    <Button {...rest} {...getOverrideProps(overrides, \\"Button\\")}></Button>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests component with variants with mapped children prop should render variants with options provided, and mapped children prop 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  Variant,
  getOverrideProps,
  getOverridesFromVariants,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    variant?: \\"primary\\" | \\"secondary\\";
    size?: \\"large\\";
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CustomButton(
  props: CustomButtonProps
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const variants: Variant[] = [
    {
      variantValues: { variant: \\"primary\\" },
      overrides: {
        Button: {
          label: \\"componentWithVariantsWithMappedChildrenProp\\",
          children: \\"componentWithVariantsWithChildrenProp\\",
          fontSize: \\"12px\\",
        },
      },
    },
    {
      variantValues: { variant: \\"secondary\\" },
      overrides: {
        Button: { fontSize: \\"40px\\" },
        \\"Button.Text\\": {
          fontSize: \\"40px\\",
          label: \\"componentWithVariantsWithMappedChildrenProp\\",
          children: \\"componentWithVariantsWithChildrenProp\\",
        },
      },
    },
    {
      variantValues: { variant: \\"primary\\", size: \\"large\\" },
      overrides: {
        Button: {
          width: \\"500\\",
          children: \\"componentWithVariantsWithMappedChildrenProp\\",
        },
      },
    },
  ];
  const mergeVariantsAndOverrides = (
    variants: EscapeHatchProps,
    overrides: EscapeHatchProps
  ): EscapeHatchProps => {
    const overrideKeys = new Set(Object.keys(overrides));
    const sharedKeys = Object.keys(variants).filter((variantKey) =>
      overrideKeys.has(variantKey)
    );
    const merged = Object.fromEntries(
      sharedKeys.map((sharedKey) => [
        sharedKey,
        { ...variants[sharedKey], ...overrides[sharedKey] },
      ])
    );
    return {
      ...variants,
      ...overrides,
      ...merged,
    };
  };
  const overrides = mergeVariantsAndOverrides(
    getOverridesFromVariants(variants, props),
    overridesProp || {}
  );
  return (
    /* @ts-ignore: TS2322 */
    <Button {...rest} {...getOverrideProps(overrides, \\"Button\\")}></Button>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests concat and conditional transform should render child component with data bound concatenation 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps, Text } from \\"@aws-amplify/ui-react\\";

export type ChildComponentWithDataBoundConcatenationProps =
  React.PropsWithChildren<
    Partial<ButtonProps> & {
      textValue?: String;
    } & {
      overrides?: EscapeHatchProps | undefined | null;
    }
  >;
export default function ChildComponentWithDataBoundConcatenation(
  props: ChildComponentWithDataBoundConcatenationProps
): React.ReactElement {
  const { textValue, overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Button {...rest} {...getOverrideProps(overrides, \\"Button\\")}>
      <Text
        children={\`\${buttonUser?.firstname || \\"Harrison\\"}\${\\" \\"}\${
          buttonUser?.lastname || \\"Spain\\"
        }\`}
        {...getOverrideProps(overrides, \\"Button.Text[0]\\")}
      ></Text>
    </Button>
  );
}
"
`;

exports[`amplify render tests concat and conditional transform should render child component with static concatenation 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps, Text } from \\"@aws-amplify/ui-react\\";

export type ChildComponentWithStaticConcatenationProps =
  React.PropsWithChildren<
    Partial<ButtonProps> & {
      overrides?: EscapeHatchProps | undefined | null;
    }
  >;
export default function ChildComponentWithStaticConcatenation(
  props: ChildComponentWithStaticConcatenationProps
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Button {...rest} {...getOverrideProps(overrides, \\"Button\\")}>
      <Text
        children={\`\${\\"Concatenate\\"}\${\\" \\"}\${\\"Me!\\"}\`}
        {...getOverrideProps(overrides, \\"Button.Text[0]\\")}
      ></Text>
    </Button>
  );
}
"
`;

exports[`amplify render tests concat and conditional transform should render component with concatenation prop 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User } from \\"../models\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    width?: Number;
    buttonUser?: User;
    buttonColor?: String;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CustomButton(
  props: CustomButtonProps
): React.ReactElement {
  const {
    width,
    buttonUser,
    buttonColor,
    overrides: overridesProp,
    ...rest
  } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Button
      labelWidth={width}
      children={\`\${buttonUser?.firstname || \\"Harrison\\"}\${\\" \\"}\${
        buttonUser?.lastname || \\"Spain\\"
      }\`}
      {...rest}
      {...getOverrideProps(overrides, \\"Button\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests concat and conditional transform should render component with conditional data binding prop 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User } from \\"../models\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    width?: Number;
    buttonUser?: User;
    buttonColor?: String;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CustomButton(
  props: CustomButtonProps
): React.ReactElement {
  const {
    width,
    buttonUser,
    buttonColor,
    overrides: overridesProp,
    ...rest
  } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Button
      labelWidth={width}
      disabled={
        buttonUser?.isLoggedIn && buttonUser?.isLoggedIn == true ? true : false
      }
      prompt={
        buttonUser?.age && buttonUser?.age > 18
          ? \`\${buttonUser?.firstname}\${\\", cast your vote.\\"}\`
          : \\"Sorry you cannot vote\\"
      }
      backgroundColor={
        buttonUser?.isLoggedIn && buttonUser?.isLoggedIn == true
          ? buttonUser?.loggedInColor
          : buttonUser?.loggedOutColor
      }
      children={\`\${buttonUser?.firstname || \\"Harrison\\"}\${\\" \\"}\${
        buttonUser?.lastname || \\"Spain\\"
      }\`}
      {...rest}
      {...getOverrideProps(overrides, \\"Button\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests concat and conditional transform should render component with conditional data binding prop from a bug 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { Student } from \\"../models\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, Flex, FlexProps, Text } from \\"@aws-amplify/ui-react\\";

export type ConditionalComponentWithDataBindingProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    student?: Student;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ConditionalComponentWithDataBinding(
  props: ConditionalComponentWithDataBindingProps
): React.ReactElement {
  const { student, overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Flex {...rest} {...getOverrideProps(overrides, \\"Flex\\")}>
      <Text
        value={
          student?.id && student?.id == \\"idstringuserinput\\"
            ? student?.createdAt
            : student?.id
        }
        children={
          student?.id && student?.id == \\"idstringuserinput\\"
            ? student?.createdAt
            : student?.id
        }
        {...getOverrideProps(overrides, \\"Flex.Text[0]\\")}
      ></Text>
      <Button
        value={
          student?.id && student?.id == \\"idstringuserinput\\"
            ? student?.createdAt
            : student?.id
        }
        {...getOverrideProps(overrides, \\"Flex.Button[0]\\")}
      ></Button>
    </Flex>
  );
}
"
`;

exports[`amplify render tests concat and conditional transform should render component with conditional simple binding prop 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    buttonColor?: String;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CustomButton(
  props: CustomButtonProps
): React.ReactElement {
  const { buttonColor, overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Button
      disabled={buttonColor && buttonColor == \\"red\\" ? true : false}
      {...rest}
      {...getOverrideProps(overrides, \\"Button\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests custom components custom children should render component with custom children 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import CustomButton from \\"./CustomButton\\";
import MyView, { MyViewProps } from \\"./MyView\\";

export type CustomChildrenProps = React.PropsWithChildren<
  Partial<MyViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CustomChildren(
  props: CustomChildrenProps
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <MyView {...rest} {...getOverrideProps(overrides, \\"MyView\\")}>
      <CustomButton
        {...getOverrideProps(overrides, \\"MyView.CustomButton[0]\\")}
      ></CustomButton>
    </MyView>
  );
}
"
`;

exports[`amplify render tests custom components custom children should render component with custom children with ES5 1`] = `
"var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
var __rest =
  (this && this.__rest) ||
  function (s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (
          e.indexOf(p[i]) < 0 &&
          Object.prototype.propertyIsEnumerable.call(s, p[i])
        )
          t[p[i]] = s[p[i]];
      }
    return t;
  };
/* eslint-disable */
import React from \\"react\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import CustomButton from \\"./CustomButton\\";
import MyView from \\"./MyView\\";
export default function CustomChildren(props) {
  var overridesProp = props.overrides,
    rest = __rest(props, [\\"overrides\\"]);
  var overrides = __assign({}, overridesProp);
  return React.createElement(
    MyView,
    __assign({}, rest, getOverrideProps(overrides, \\"MyView\\")),
    React.createElement(
      CustomButton,
      __assign({}, getOverrideProps(overrides, \\"MyView.CustomButton[0]\\"))
    )
  );
}
"
`;

exports[`amplify render tests custom components custom children should render declarations 1`] = `
"import React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { MyViewProps } from \\"./MyView\\";
export declare type CustomChildrenProps = React.PropsWithChildren<Partial<MyViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
}>;
export default function CustomChildren(props: CustomChildrenProps): React.ReactElement;
"
`;

exports[`amplify render tests custom components custom parent and children should render component with custom parent and children 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import CustomButton from \\"./CustomButton\\";
import ViewTest, { ViewTestProps } from \\"./ViewTest\\";

export type CustomParentAndChildrenProps = React.PropsWithChildren<
  Partial<ViewTestProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CustomParentAndChildren(
  props: CustomParentAndChildrenProps
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <ViewTest {...rest} {...getOverrideProps(overrides, \\"ViewTest\\")}>
      <CustomButton
        {...getOverrideProps(overrides, \\"ViewTest.CustomButton[0]\\")}
      ></CustomButton>
    </ViewTest>
  );
}
"
`;

exports[`amplify render tests custom components custom parent and children should render component with custom parent and children with ES5 1`] = `
"var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
var __rest =
  (this && this.__rest) ||
  function (s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (
          e.indexOf(p[i]) < 0 &&
          Object.prototype.propertyIsEnumerable.call(s, p[i])
        )
          t[p[i]] = s[p[i]];
      }
    return t;
  };
/* eslint-disable */
import React from \\"react\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import CustomButton from \\"./CustomButton\\";
import ViewTest from \\"./ViewTest\\";
export default function CustomParentAndChildren(props) {
  var overridesProp = props.overrides,
    rest = __rest(props, [\\"overrides\\"]);
  var overrides = __assign({}, overridesProp);
  return React.createElement(
    ViewTest,
    __assign({}, rest, getOverrideProps(overrides, \\"ViewTest\\")),
    React.createElement(
      CustomButton,
      __assign({}, getOverrideProps(overrides, \\"ViewTest.CustomButton[0]\\"))
    )
  );
}
"
`;

exports[`amplify render tests custom components custom parent and children should render declarations 1`] = `
"import React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { ViewTestProps } from \\"./ViewTest\\";
export declare type CustomParentAndChildrenProps = React.PropsWithChildren<Partial<ViewTestProps> & {
    overrides?: EscapeHatchProps | undefined | null;
}>;
export default function CustomParentAndChildren(props: CustomParentAndChildrenProps): React.ReactElement;
"
`;

exports[`amplify render tests custom components custom parent should render component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button } from \\"@aws-amplify/ui-react\\";
import MyView, { MyViewProps } from \\"./MyView\\";

export type CustomParentProps = React.PropsWithChildren<
  Partial<MyViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CustomParent(
  props: CustomParentProps
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <MyView {...rest} {...getOverrideProps(overrides, \\"MyView\\")}>
      <Button {...getOverrideProps(overrides, \\"MyView.Button[0]\\")}></Button>
    </MyView>
  );
}
"
`;

exports[`amplify render tests custom components custom parent should render component with ES5 1`] = `
"var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
var __rest =
  (this && this.__rest) ||
  function (s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (
          e.indexOf(p[i]) < 0 &&
          Object.prototype.propertyIsEnumerable.call(s, p[i])
        )
          t[p[i]] = s[p[i]];
      }
    return t;
  };
/* eslint-disable */
import React from \\"react\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import { Button } from \\"@aws-amplify/ui-react\\";
import MyView from \\"./MyView\\";
export default function CustomParent(props) {
  var overridesProp = props.overrides,
    rest = __rest(props, [\\"overrides\\"]);
  var overrides = __assign({}, overridesProp);
  return React.createElement(
    MyView,
    __assign({}, rest, getOverrideProps(overrides, \\"MyView\\")),
    React.createElement(
      Button,
      __assign({}, getOverrideProps(overrides, \\"MyView.Button[0]\\"))
    )
  );
}
"
`;

exports[`amplify render tests custom components custom parent should render declarations 1`] = `
"import React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { MyViewProps } from \\"./MyView\\";
export declare type CustomParentProps = React.PropsWithChildren<Partial<MyViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
}>;
export default function CustomParent(props: CustomParentProps): React.ReactElement;
"
`;

exports[`amplify render tests custom render config should render ES5 1`] = `
"var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
var __rest =
  (this && this.__rest) ||
  function (s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (
          e.indexOf(p[i]) < 0 &&
          Object.prototype.propertyIsEnumerable.call(s, p[i])
        )
          t[p[i]] = s[p[i]];
      }
    return t;
  };
/* eslint-disable */
import React from \\"react\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import { Button, View } from \\"@aws-amplify/ui-react\\";
export default function ViewWithButton(props) {
  var overridesProp = props.overrides,
    rest = __rest(props, [\\"overrides\\"]);
  var overrides = __assign({}, overridesProp);
  return React.createElement(
    View,
    __assign({}, rest, getOverrideProps(overrides, \\"View\\")),
    React.createElement(
      Button,
      __assign(
        { color: \\"#ff0000\\", width: \\"20px\\" },
        getOverrideProps(overrides, \\"View.Button[0]\\")
      )
    )
  );
}
"
`;

exports[`amplify render tests custom render config should render JSX 1`] = `
"var __rest =
  (this && this.__rest) ||
  function (s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (
          e.indexOf(p[i]) < 0 &&
          Object.prototype.propertyIsEnumerable.call(s, p[i])
        )
          t[p[i]] = s[p[i]];
      }
    return t;
  };
/* eslint-disable */
import React from \\"react\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import { Button, View } from \\"@aws-amplify/ui-react\\";
export default function ViewWithButton(props) {
  const { overrides: overridesProp } = props,
    rest = __rest(props, [\\"overrides\\"]);
  const overrides = Object.assign({}, overridesProp);
  return (
    <View {...rest} {...getOverrideProps(overrides, \\"View\\")}>
      <Button
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...getOverrideProps(overrides, \\"View.Button[0]\\")}
      ></Button>
    </View>
  );
}
"
`;

exports[`amplify render tests custom render config should render common JS 1`] = `
"\\"use strict\\";
var __rest =
  (this && this.__rest) ||
  function (s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (
          e.indexOf(p[i]) < 0 &&
          Object.prototype.propertyIsEnumerable.call(s, p[i])
        )
          t[p[i]] = s[p[i]];
      }
    return t;
  };
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, \\"__esModule\\", { value: true });
/* eslint-disable */
const react_1 = __importDefault(require(\\"react\\"));
const internal_1 = require(\\"@aws-amplify/ui-react/internal\\");
const ui_react_1 = require(\\"@aws-amplify/ui-react\\");
function ViewWithButton(props) {
  const { overrides: overridesProp } = props,
    rest = __rest(props, [\\"overrides\\"]);
  const overrides = Object.assign({}, overridesProp);
  return react_1.default.createElement(
    ui_react_1.View,
    Object.assign(
      {},
      rest,
      (0, internal_1.getOverrideProps)(overrides, \\"View\\")
    ),
    react_1.default.createElement(
      ui_react_1.Button,
      Object.assign(
        { color: \\"#ff0000\\", width: \\"20px\\" },
        (0, internal_1.getOverrideProps)(overrides, \\"View.Button[0]\\")
      )
    )
  );
}
exports.default = ViewWithButton;
"
`;

exports[`amplify render tests declarations should render declarations 1`] = `
"import React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { FlexProps } from \\"@aws-amplify/ui-react\\";
export declare type ProfileProps = React.PropsWithChildren<Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
}>;
export default function Profile(props: ProfileProps): React.ReactElement;
"
`;

exports[`amplify render tests default value should render bound default value 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Text, TextProps } from \\"@aws-amplify/ui-react\\";

export type BoundDefaultValueProps = React.PropsWithChildren<
  Partial<TextProps> & {
    label?: String;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function BoundDefaultValue(
  props: BoundDefaultValueProps
): React.ReactElement {
  const { label, overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Text
      children={label || \\"Bound Default\\"}
      {...rest}
      {...getOverrideProps(overrides, \\"Text\\")}
    ></Text>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests default value should render collection default value 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useDataStoreBinding,
} from \\"@aws-amplify/ui-react/internal\\";
import { Collection, CollectionProps, Text } from \\"@aws-amplify/ui-react\\";
import { User } from \\"../models\\";

export type CollectionDefaultValueProps = React.PropsWithChildren<
  Partial<CollectionProps<any>> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CollectionDefaultValue(
  props: CollectionDefaultValueProps
): React.ReactElement {
  const { items, overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  const user =
    items !== undefined
      ? items
      : useDataStoreBinding({
          type: \\"collection\\",
          model: User,
        }).items;
  return (
    /* @ts-ignore: TS2322 */
    <Collection
      items={user || []}
      {...rest}
      {...getOverrideProps(overrides, \\"Collection\\")}
    >
      {(item, index) => (
        <Text
          key={item.id}
          children={item.username || \\"Collection Default Value\\"}
          {...getOverrideProps(overrides, \\"Collection.Text[0]\\")}
        ></Text>
      )}
    </Collection>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests default value should render simple and bound default value 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Text, TextProps } from \\"@aws-amplify/ui-react\\";

export type SimpleAndBoundDefaultValueProps = React.PropsWithChildren<
  Partial<TextProps> & {
    label?: String;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function SimpleAndBoundDefaultValue(
  props: SimpleAndBoundDefaultValueProps
): React.ReactElement {
  const {
    label = \\"Simple Double Default\\",
    overrides: overridesProp,
    ...rest
  } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Text
      children={label || \\"Bound Double Default\\"}
      {...rest}
      {...getOverrideProps(overrides, \\"Text\\")}
    ></Text>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests default value should render simple default value 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Text, TextProps } from \\"@aws-amplify/ui-react\\";

export type SimplePropertyBindingDefaultValueProps = React.PropsWithChildren<
  Partial<TextProps> & {
    label?: String;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function SimplePropertyBindingDefaultValue(
  props: SimplePropertyBindingDefaultValueProps
): React.ReactElement {
  const {
    label = \\"Default Binding Property\\",
    overrides: overridesProp,
    ...rest
  } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Text
      children={label}
      {...rest}
      {...getOverrideProps(overrides, \\"Text\\")}
    ></Text>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests icon-indices does not return negative indices for icons 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import {
  Flex,
  FlexProps,
  IconArrowForward,
  IconBookmarkBorder,
  IconMoreVert,
  IconShare,
  Image,
  Text,
} from \\"@aws-amplify/ui-react\\";

export type SocialAProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function SocialA(props: SocialAProps): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      width=\\"960px\\"
      padding=\\"24px 24px 24px 24px\\"
      backgroundColor=\\"rgba(255,255,255,1)\\"
      position=\\"relative\\"
      gap=\\"16px\\"
      direction=\\"column\\"
      {...rest}
      {...getOverrideProps(overrides, \\"Flex\\")}
    >
      <Flex
        padding=\\"0px 0px 0px 0px\\"
        alignSelf=\\"stretch\\"
        alignItems=\\"flex-start\\"
        shrink=\\"0\\"
        gap=\\"40px\\"
        position=\\"relative\\"
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"Flex.Flex[0]\\")}
      >
        <Flex
          padding=\\"0px 0px 0px 0px\\"
          grow=\\"1\\"
          gap=\\"16px\\"
          width=\\"712px\\"
          position=\\"relative\\"
          basis=\\"712px\\"
          direction=\\"column\\"
          height=\\"344px\\"
          {...getOverrideProps(overrides, \\"Flex.Flex[0].Flex[0]\\")}
        >
          <Flex
            padding=\\"0px 0px 0px 0px\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            shrink=\\"0\\"
            gap=\\"16px\\"
            direction=\\"column\\"
            {...getOverrideProps(overrides, \\"Flex.Flex[0].Flex[0].Flex[0]\\")}
          >
            <Text
              padding=\\"0px 0px 0px 0px\\"
              alignSelf=\\"stretch\\"
              color=\\"rgba(0,0,0,1)\\"
              textAlign=\\"left\\"
              shrink=\\"0\\"
              display=\\"flex\\"
              justifyContent=\\"flex-start\\"
              fontFamily=\\"Inter\\"
              width=\\"712px\\"
              fontSize=\\"32px\\"
              lineHeight=\\"40px\\"
              position=\\"relative\\"
              fontWeight=\\"700\\"
              direction=\\"column\\"
              children=\\"New Amplify Studio gives designers the ability to export UI to React code\\"
              {...getOverrideProps(
                overrides,
                \\"Flex.Flex[0].Flex[0].Flex[0].Text[0]\\"
              )}
            ></Text>
            <Flex
              padding=\\"0px 0px 0px 0px\\"
              alignSelf=\\"stretch\\"
              alignItems=\\"flex-start\\"
              shrink=\\"0\\"
              gap=\\"16px\\"
              position=\\"relative\\"
              direction=\\"row\\"
              {...getOverrideProps(
                overrides,
                \\"Flex.Flex[0].Flex[0].Flex[0].Flex[0]\\"
              )}
            >
              <Text
                padding=\\"0px 0px 0px 0px\\"
                color=\\"rgba(128.0000075697899,128.0000075697899,128.0000075697899,1)\\"
                textAlign=\\"left\\"
                shrink=\\"0\\"
                display=\\"flex\\"
                letterSpacing=\\"0.010000000000000009px\\"
                justifyContent=\\"flex-start\\"
                fontFamily=\\"Inter\\"
                fontSize=\\"16px\\"
                lineHeight=\\"24px\\"
                position=\\"relative\\"
                fontWeight=\\"400\\"
                direction=\\"column\\"
                children=\\"Nikhil S\\"
                {...getOverrideProps(
                  overrides,
                  \\"Flex.Flex[0].Flex[0].Flex[0].Flex[0].Text[0]\\"
                )}
              ></Text>
              <Text
                padding=\\"0px 0px 0px 0px\\"
                color=\\"rgba(128.0000075697899,128.0000075697899,128.0000075697899,1)\\"
                textAlign=\\"left\\"
                shrink=\\"0\\"
                display=\\"flex\\"
                letterSpacing=\\"0.010000000000000009px\\"
                justifyContent=\\"flex-start\\"
                fontFamily=\\"Inter\\"
                width=\\"1396px\\"
                fontSize=\\"16px\\"
                lineHeight=\\"24px\\"
                position=\\"relative\\"
                fontWeight=\\"400\\"
                direction=\\"column\\"
                children=\\"2nd December 2021\\"
                {...getOverrideProps(
                  overrides,
                  \\"Flex.Flex[0].Flex[0].Flex[0].Flex[0].Text[1]\\"
                )}
              ></Text>
            </Flex>
          </Flex>
          <Flex
            padding=\\"0px 0px 0px 0px\\"
            alignSelf=\\"stretch\\"
            alignItems=\\"flex-start\\"
            shrink=\\"0\\"
            gap=\\"16px\\"
            position=\\"relative\\"
            direction=\\"row\\"
            {...getOverrideProps(overrides, \\"Flex.Flex[0].Flex[0].Flex[1]\\")}
          >
            <IconArrowForward
              padding=\\"0px 0px 0px 0px\\"
              overflow=\\"hidden\\"
              color=\\"rgba(207.00000286102295,77.00001060962677,193.99995803833008,1)\\"
              shrink=\\"0\\"
              width=\\"24px\\"
              fontSize=\\"24px\\"
              position=\\"relative\\"
              type=\\"arrow_forward\\"
              height=\\"24px\\"
              {...getOverrideProps(
                overrides,
                \\"Flex.Flex[0].Flex[0].Flex[1].IconArrowForward[0]\\"
              )}
            ></IconArrowForward>
            <Text
              padding=\\"0px 0px 0px 0px\\"
              grow=\\"1\\"
              color=\\"rgba(0,0,0,1)\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              basis=\\"672px\\"
              justifyContent=\\"flex-start\\"
              fontFamily=\\"Inter\\"
              width=\\"672px\\"
              fontSize=\\"16px\\"
              lineHeight=\\"24px\\"
              position=\\"relative\\"
              fontWeight=\\"400\\"
              direction=\\"column\\"
              children=\\"AWS Amplify Studio is a visual development environment for building full-stack web and mobile apps that grows with your business. Studio builds on existing backend building capabilities in AWS Amplify, allowing you to build your UI faster with a set of ready-to-use UI components that are editable in Figma. With Studio, you can quickly build an entire web app, front-to-back, with minimal coding, while still maintaining full control over your app design and behavior through code. Ship faster, scale effortlessly, and delight every user.\\"
              {...getOverrideProps(
                overrides,
                \\"Flex.Flex[0].Flex[0].Flex[1].Text[0]\\"
              )}
            ></Text>
          </Flex>
          <Flex
            padding=\\"0px 0px 0px 0px\\"
            alignItems=\\"flex-start\\"
            shrink=\\"0\\"
            gap=\\"16px\\"
            width=\\"165px\\"
            position=\\"relative\\"
            direction=\\"row\\"
            {...getOverrideProps(overrides, \\"Flex.Flex[0].Flex[0].Flex[2]\\")}
          >
            <Text
              padding=\\"0px 0px 0px 0px\\"
              color=\\"rgba(128.0000075697899,128.0000075697899,128.0000075697899,1)\\"
              textAlign=\\"left\\"
              shrink=\\"0\\"
              display=\\"flex\\"
              letterSpacing=\\"0.010000000000000009px\\"
              justifyContent=\\"flex-start\\"
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              lineHeight=\\"24px\\"
              position=\\"relative\\"
              fontWeight=\\"400\\"
              direction=\\"column\\"
              children=\\"Share\\"
              {...getOverrideProps(
                overrides,
                \\"Flex.Flex[0].Flex[0].Flex[2].Text[0]\\"
              )}
            ></Text>
            <IconBookmarkBorder
              padding=\\"0px 0px 0px 0px\\"
              overflow=\\"hidden\\"
              color=\\"rgba(0,0,0,1)\\"
              shrink=\\"0\\"
              width=\\"24px\\"
              fontSize=\\"24px\\"
              position=\\"relative\\"
              type=\\"bookmark_border\\"
              height=\\"24px\\"
              {...getOverrideProps(
                overrides,
                \\"Flex.Flex[0].Flex[0].Flex[2].IconBookmarkBorder[0]\\"
              )}
            ></IconBookmarkBorder>
            <IconShare
              padding=\\"0px 0px 0px 0px\\"
              overflow=\\"hidden\\"
              color=\\"rgba(0,0,0,1)\\"
              shrink=\\"0\\"
              width=\\"24px\\"
              fontSize=\\"24px\\"
              position=\\"relative\\"
              type=\\"share\\"
              height=\\"24px\\"
              {...getOverrideProps(
                overrides,
                \\"Flex.Flex[0].Flex[0].Flex[2].IconShare[0]\\"
              )}
            ></IconShare>
            <IconMoreVert
              padding=\\"0px 0px 0px 0px\\"
              overflow=\\"hidden\\"
              color=\\"rgba(0,0,0,1)\\"
              shrink=\\"0\\"
              width=\\"24px\\"
              fontSize=\\"24px\\"
              position=\\"relative\\"
              type=\\"more_vert\\"
              height=\\"24px\\"
              {...getOverrideProps(
                overrides,
                \\"Flex.Flex[0].Flex[0].Flex[2].IconMoreVert[0]\\"
              )}
            ></IconMoreVert>
          </Flex>
        </Flex>
        <Image
          width=\\"160px\\"
          padding=\\"0px 0px 0px 0px\\"
          position=\\"relative\\"
          borderRadius=\\"16px\\"
          shrink=\\"0\\"
          height=\\"160px\\"
          {...getOverrideProps(overrides, \\"Flex.Flex[0].Image[0]\\")}
        ></Image>
      </Flex>
      <Flex
        padding=\\"0px 0px 0px 0px\\"
        alignSelf=\\"stretch\\"
        alignItems=\\"flex-start\\"
        shrink=\\"0\\"
        gap=\\"16px\\"
        position=\\"relative\\"
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"Flex.Flex[1]\\")}
      >
        <IconArrowForward
          padding=\\"0px 0px 0px 0px\\"
          overflow=\\"hidden\\"
          color=\\"rgba(0,0,0,1)\\"
          shrink=\\"0\\"
          width=\\"24px\\"
          fontSize=\\"24px\\"
          position=\\"relative\\"
          type=\\"arrow_forward\\"
          height=\\"24px\\"
          {...getOverrideProps(overrides, \\"Flex.Flex[1].IconArrowForward[0]\\")}
        ></IconArrowForward>
        <Text
          padding=\\"0px 0px 0px 0px\\"
          grow=\\"1\\"
          color=\\"rgba(0,0,0,1)\\"
          textAlign=\\"left\\"
          display=\\"flex\\"
          letterSpacing=\\"0.010000000000000009px\\"
          textDecoration=\\"underline\\"
          basis=\\"872px\\"
          justifyContent=\\"flex-start\\"
          fontFamily=\\"Inter\\"
          width=\\"872px\\"
          fontSize=\\"16px\\"
          lineHeight=\\"24px\\"
          position=\\"relative\\"
          fontWeight=\\"400\\"
          direction=\\"column\\"
          children=\\"Read more\\"
          {...getOverrideProps(overrides, \\"Flex.Flex[1].Text[0]\\")}
        ></Text>
      </Flex>
    </Flex>
  );
}
"
`;

exports[`amplify render tests primitives Built-in Iconset 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import {
  IconBrightness_1,
  IconCloud,
  View,
  ViewProps,
} from \\"@aws-amplify/ui-react\\";

export type MyIconsProps = React.PropsWithChildren<
  Partial<ViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function MyIcons(props: MyIconsProps): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <View {...rest} {...getOverrideProps(overrides, \\"View\\")}>
      <IconCloud
        {...getOverrideProps(overrides, \\"View.IconCloud[0]\\")}
      ></IconCloud>
      <IconBrightness_1
        {...getOverrideProps(overrides, \\"View.IconBrightness_1[0]\\")}
      ></IconBrightness_1>
    </View>
  );
}
"
`;

exports[`amplify render tests primitives CheckboxField 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { CheckboxField, CheckboxFieldProps } from \\"@aws-amplify/ui-react\\";

export type CheckBoxFieldPrimitiveProps = React.PropsWithChildren<
  Partial<CheckboxFieldProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CheckBoxFieldPrimitive(
  props: CheckBoxFieldPrimitiveProps
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <CheckboxField
      label=\\"Subscribe\\"
      name=\\"subscribe\\"
      value=\\"yes\\"
      {...rest}
      {...getOverrideProps(overrides, \\"CheckboxField\\")}
    ></CheckboxField>
  );
}
"
`;

exports[`amplify render tests primitives Expander 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Expander, ExpanderItem, ExpanderProps } from \\"@aws-amplify/ui-react\\";

export type ExpanderPrimitiveProps = React.PropsWithChildren<
  Partial<ExpanderProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ExpanderPrimitive(
  props: ExpanderPrimitiveProps
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <Expander
      type=\\"single\\"
      isCollapsible={true}
      {...rest}
      {...getOverrideProps(overrides, \\"Expander\\")}
    >
      <ExpanderItem
        title=\\"title1\\"
        value=\\"ExpanderItem1\\"
        children=\\"ExpanderItem1Content\\"
        {...getOverrideProps(overrides, \\"Expander.ExpanderItem[0]\\")}
      ></ExpanderItem>
      <ExpanderItem
        title=\\"title2\\"
        value=\\"ExpanderItem2\\"
        children=\\"ExpanderItem2Content\\"
        {...getOverrideProps(overrides, \\"Expander.ExpanderItem[1]\\")}
      ></ExpanderItem>
    </Expander>
  );
}
"
`;

exports[`amplify render tests primitives ExpanderItem 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { ExpanderItem, ExpanderItemProps } from \\"@aws-amplify/ui-react\\";

export type ComponentWithoutNameProps = React.PropsWithChildren<
  Partial<ExpanderItemProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function unknown_component_name(
  props: unknown_component_nameProps
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <ExpanderItem
      title=\\"title1\\"
      value=\\"ExpanderItem1\\"
      children=\\"ExpanderItem1Content\\"
      {...rest}
      {...getOverrideProps(overrides, \\"ExpanderItem\\")}
    ></ExpanderItem>
  );
}
"
`;

exports[`amplify render tests primitives SliderField 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { SliderField, SliderFieldProps } from \\"@aws-amplify/ui-react\\";

export type SliderFieldPrimitiveProps = React.PropsWithChildren<
  Partial<SliderFieldProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function SliderFieldPrimitive(
  props: SliderFieldPrimitiveProps
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <SliderField
      name=\\"slider\\"
      label=\\"Slider\\"
      defaultValue={50}
      min={0}
      max={100}
      step={1}
      {...rest}
      {...getOverrideProps(overrides, \\"SliderField\\")}
    ></SliderField>
  );
}
"
`;

exports[`amplify render tests primitives TextField 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { TextField, TextFieldProps } from \\"@aws-amplify/ui-react\\";

export type TextFieldPrimitiveProps<Multiline extends boolean> =
  React.PropsWithChildren<
    Partial<TextFieldProps<Multiline>> & {
      overrides?: EscapeHatchProps | undefined | null;
    }
  >;
export default function TextFieldPrimitive<Multiline extends boolean>(
  props: TextFieldPrimitiveProps<Multiline>
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <TextField
      label=\\"Name\\"
      placeholder=\\"Holden\\"
      descriptiveText=\\"Please enter valid name\\"
      {...rest}
      {...getOverrideProps(overrides, \\"TextField\\")}
    ></TextField>
  );
}
"
`;

exports[`amplify render tests sample code snippet tests should generate a sample code snippet for components 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import CustomButton from \\"./CustomButton\\";
import { View, ViewProps } from \\"@aws-amplify/ui-react\\";

export type ViewWithButtonProps = React.PropsWithChildren<
  Partial<ViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ViewWithButton(
  props: ViewWithButtonProps
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <View padding-left {...rest} {...getOverrideProps(overrides, \\"View\\")}>
      <CustomButton
        color=\\"#ff0000\\"
        width=\\"20px\\"
        buttonText=\\"Click Me\\"
        {...getOverrideProps(overrides, \\"View.CustomButton[0]\\")}
      ></CustomButton>
    </View>
  );
}
"
`;

exports[`amplify render tests should render navigation actions 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, Flex, FlexProps, Heading } from \\"@aws-amplify/ui-react\\";

export type SiteHeaderProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function SiteHeader(props: SiteHeaderProps): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  const { invokeAction } = useActions({
    openAmplifyDocs: {
      type: \\"Navigation.Open\\",
      parameters: { href: \\"docs.amplify.aws\\" },
    },
    redirectToFooter: {
      type: \\"Navigation.Redirect\\",
      parameters: { href: \\"#footer-id\\", replaceHistory: true },
    },
    navigateToFAQPage: {
      type: \\"Navigation.Redirect\\",
      parameters: { href: \\"/faq\\" },
    },
    reloadPage: { type: \\"Navigation.Refresh\\" },
  });
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      direction=\\"row\\"
      justifyContent=\\"space-between\\"
      {...rest}
      {...getOverrideProps(overrides, \\"Flex\\")}
    >
      <Heading
        level={1}
        children=\\"Title\\"
        {...getOverrideProps(overrides, \\"Flex.Heading[0]\\")}
      ></Heading>
      <Button
        variation=\\"primary\\"
        children=\\"Open Amplify Docs\\"
        onClick={invokeAction(\\"openAmplifyDocs\\")}
        {...getOverrideProps(overrides, \\"Flex.Button[0]\\")}
      ></Button>
      <Button
        variation=\\"primary\\"
        children=\\"Navigate to FAQ Page\\"
        onClick={invokeAction(\\"navigateToFAQPage\\")}
        {...getOverrideProps(overrides, \\"Flex.Button[1]\\")}
      ></Button>
      <Button
        variation=\\"primary\\"
        children=\\"Reload Page\\"
        onClick={invokeAction(\\"reloadPage\\")}
        {...getOverrideProps(overrides, \\"Flex.Button[2]\\")}
      ></Button>
      <Button
        variation=\\"primary\\"
        children=\\"Redirect To Footer (No History Update)\\"
        onClick={invokeAction(\\"redirectToFooter\\")}
        {...getOverrideProps(overrides, \\"Flex.Button[3]\\")}
      ></Button>
    </Flex>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests should render parsed fixed values 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import Input from \\"./Input\\";
import { View, ViewProps } from \\"@aws-amplify/ui-react\\";

export type ParsedFixedValuesProps = React.PropsWithChildren<
  Partial<ViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ParsedFixedValues(
  props: ParsedFixedValuesProps
): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  return (
    /* @ts-ignore: TS2322 */
    <View
      id=\\"parsed-fixed-values\\"
      {...rest}
      {...getOverrideProps(overrides, \\"View\\")}
    >
      <Input
        id=\\"string-value\\"
        value=\\"raw string value\\"
        {...getOverrideProps(overrides, \\"View.Input[0]\\")}
      ></Input>
      <Input
        id=\\"number-value\\"
        value=\\"67548\\"
        {...getOverrideProps(overrides, \\"View.Input[1]\\")}
      ></Input>
      <Input
        id=\\"parsed-number-value\\"
        value={67548}
        {...getOverrideProps(overrides, \\"View.Input[2]\\")}
      ></Input>
      <Input
        id=\\"boolean-value\\"
        value=\\"true\\"
        {...getOverrideProps(overrides, \\"View.Input[3]\\")}
      ></Input>
      <Input
        id=\\"parsed-boolean-value\\"
        value={true}
        {...getOverrideProps(overrides, \\"View.Input[4]\\")}
      ></Input>
      <Input
        id=\\"json-value\\"
        value='{\\"foo\\": \\"bar\\"}'
        {...getOverrideProps(overrides, \\"View.Input[5]\\")}
      ></Input>
      <Input
        id=\\"parsed-json-value\\"
        value={{ foo: \\"bar\\" }}
        {...getOverrideProps(overrides, \\"View.Input[6]\\")}
      ></Input>
      <Input
        id=\\"array-value\\"
        value=\\"[1,2,3]\\"
        {...getOverrideProps(overrides, \\"View.Input[7]\\")}
      ></Input>
      <Input
        id=\\"parsed-array-value\\"
        value={[1, 2, 3]}
        {...getOverrideProps(overrides, \\"View.Input[8]\\")}
      ></Input>
      <Input
        id=\\"null-value\\"
        value=\\"null\\"
        {...getOverrideProps(overrides, \\"View.Input[9]\\")}
      ></Input>
      <Input
        id=\\"parsed-null-value\\"
        value={null}
        {...getOverrideProps(overrides, \\"View.Input[10]\\")}
      ></Input>
    </View>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests theme should render the theme 1`] = `
"/* eslint-disable */
import { createTheme } from \\"@aws-amplify/ui-react\\";
export default createTheme({
  name: \\"MyTheme\\",
  tokens: {
    components: {
      alert: {
        backgroundColor: \\"hsl(210, 5%, 90%)\\",
        padding: \\"0.75rem 1rem\\",
        info: { backgroundColor: \\"hsl(220, 85%, 85%)\\" },
        error: { backgroundColor: \\"hsl(0, 75%, 85%)\\" },
        warning: { backgroundColor: \\"hsl(30, 75%, 85%)\\" },
        success: { backgroundColor: \\"hsl(130, 75%, 85%)\\" },
      },
    },
  },
  overrides: [
    {
      colorMode: \\"dark\\",
      tokens: {
        colors: { black: { value: \\"#fff\\" }, white: { value: \\"#000\\" } },
      },
    },
  ],
});
"
`;

exports[`amplify render tests theme should render the theme with ES5 1`] = `
"/* eslint-disable */
import { createTheme } from \\"@aws-amplify/ui-react\\";
export default createTheme({
  name: \\"MyTheme\\",
  tokens: {
    components: {
      alert: {
        backgroundColor: \\"hsl(210, 5%, 90%)\\",
        padding: \\"0.75rem 1rem\\",
        info: { backgroundColor: \\"hsl(220, 85%, 85%)\\" },
        error: { backgroundColor: \\"hsl(0, 75%, 85%)\\" },
        warning: { backgroundColor: \\"hsl(30, 75%, 85%)\\" },
        success: { backgroundColor: \\"hsl(130, 75%, 85%)\\" },
      },
    },
  },
  overrides: [
    {
      colorMode: \\"dark\\",
      tokens: {
        colors: { black: { value: \\"#fff\\" }, white: { value: \\"#000\\" } },
      },
    },
  ],
});
"
`;

exports[`amplify render tests theme should render the theme with TSX 1`] = `
"/* eslint-disable */
import { createTheme } from \\"@aws-amplify/ui-react\\";
export default createTheme({
  name: \\"MyTheme\\",
  tokens: {
    components: {
      alert: {
        backgroundColor: \\"hsl(210, 5%, 90%)\\",
        padding: \\"0.75rem 1rem\\",
        info: { backgroundColor: \\"hsl(220, 85%, 85%)\\" },
        error: { backgroundColor: \\"hsl(0, 75%, 85%)\\" },
        warning: { backgroundColor: \\"hsl(30, 75%, 85%)\\" },
        success: { backgroundColor: \\"hsl(130, 75%, 85%)\\" },
      },
    },
  },
  overrides: [
    {
      colorMode: \\"dark\\",
      tokens: {
        colors: { black: { value: \\"#fff\\" }, white: { value: \\"#000\\" } },
      },
    },
  ],
});
"
`;

exports[`amplify render tests user specific attributes should render user specific attributes 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useAuth,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, Flex, FlexProps, Image } from \\"@aws-amplify/ui-react\\";

export type ProfileProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function Profile(props: ProfileProps): React.ReactElement {
  const { overrides: overridesProp, ...rest } = props;
  const overrides = { ...overridesProp };
  const {
    username,
    picture: userImage,
    [\\"custom:favorite_icecream\\"]: customUserAttributeIcecream,
  } = useAuth().user?.attributes ?? {};
  return (
    /* @ts-ignore: TS2322 */
    <Flex {...rest} {...getOverrideProps(overrides, \\"Flex\\")}>
      <Image
        src={userImage}
        {...getOverrideProps(overrides, \\"Flex.Image[0]\\")}
      ></Image>
      <Button
        children={username}
        {...getOverrideProps(overrides, \\"Flex.Button[0]\\")}
      ></Button>
      <Button
        children={customUserAttributeIcecream}
        {...getOverrideProps(overrides, \\"Flex.Button[1]\\")}
      ></Button>
    </Flex>
  );
}
"
`;
