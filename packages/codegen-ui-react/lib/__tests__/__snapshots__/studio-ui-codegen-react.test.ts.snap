// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`amplify render tests actions DataStore DataStoreCreateItem 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useDataStoreCreateAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Customer } from \\"../models\\";
import { schema } from \\"../models/schema\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type CreateCustomerButtonProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CreateCustomerButton(
  props: CreateCustomerButtonProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const createCustomerButtonOnClick = useDataStoreCreateAction({
    model: Customer,
    fields: { firstName: \\"Din\\", lastName: \\"Djarin\\" },
    schema: schema,
  });
  return (
    /* @ts-ignore: TS2322 */
    <Button
      children=\\"Create\\"
      onClick={() => {
        createCustomerButtonOnClick();
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"CreateCustomerButton\\")}
    ></Button>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests actions DataStore DataStoreDeleteItem 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useDataStoreDeleteAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Customer } from \\"../models\\";
import { schema } from \\"../models/schema\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type DeleteCustomerButtonProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function DeleteCustomerButton(
  props: DeleteCustomerButtonProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const deleteCustomerButtonOnClick = useDataStoreDeleteAction({
    model: Customer,
    id: \\"d9887268-47dd-4899-9568-db5809218751\\",
    schema: schema,
  });
  return (
    /* @ts-ignore: TS2322 */
    <Button
      children=\\"Delete\\"
      onClick={() => {
        deleteCustomerButtonOnClick();
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"DeleteCustomerButton\\")}
    ></Button>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests actions DataStore DataStoreUpdateItem 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useDataStoreUpdateAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Customer } from \\"../models\\";
import { schema } from \\"../models/schema\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type UpdateCustomerButtonProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function UpdateCustomerButton(
  props: UpdateCustomerButtonProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const updateCustomerButtonOnClick = useDataStoreUpdateAction({
    model: Customer,
    id: \\"d9887268-47dd-4899-9568-db5809218751\\",
    fields: { firstName: \\"Din\\", lastName: \\"Djarin\\" },
    schema: schema,
  });
  return (
    /* @ts-ignore: TS2322 */
    <Button
      children=\\"Update\\"
      onClick={() => {
        updateCustomerButtonOnClick();
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"UpdateCustomerButton\\")}
    ></Button>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests actions auth signs out 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useAuthSignOutAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type SignOutButtonProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function SignOutButton(
  props: SignOutButtonProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const signOutButtonOnClick = useAuthSignOutAction({ global: false });
  return (
    /* @ts-ignore: TS2322 */
    <Button
      children=\\"Sign out\\"
      onClick={() => {
        signOutButtonOnClick();
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"SignOutButton\\")}
    ></Button>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests actions navigation anchor navigation action 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useNavigateAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type NavigateButtonProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function NavigateButton(
  props: NavigateButtonProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const navigateButtonOnClick = useNavigateAction({
    type: \\"anchor\\",
    about: \\"#about\\",
  });
  return (
    /* @ts-ignore: TS2322 */
    <Button
      children=\\"Go to About section\\"
      onClick={() => {
        navigateButtonOnClick();
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"NavigateButton\\")}
    ></Button>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests actions navigation hard navigation action 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useNavigateAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type NavigateButtonProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function NavigateButton(
  props: NavigateButtonProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const navigateButtonOnClick = useNavigateAction({
    type: \\"url\\",
    url: \\"https://www.amazon.com/\\",
  });
  return (
    /* @ts-ignore: TS2322 */
    <Button
      children=\\"Go to Amazon.com\\"
      onClick={() => {
        navigateButtonOnClick();
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"NavigateButton\\")}
    ></Button>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests actions navigation new tab navigation action 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useNavigateAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type NavigateButtonProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function NavigateButton(
  props: NavigateButtonProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const navigateButtonOnClick = useNavigateAction({
    type: \\"url\\",
    url: \\"https://www.amazon.com/\\",
    target: \\"newtab\\",
  });
  return (
    /* @ts-ignore: TS2322 */
    <Button
      children=\\"Go to Amazon.com (Open in new tab)\\"
      onClick={() => {
        navigateButtonOnClick();
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"NavigateButton\\")}
    ></Button>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests actions navigation reload navigation action 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useNavigateAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type ReloadButtonProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ReloadButton(
  props: ReloadButtonProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const reloadButtonOnClick = useNavigateAction({ type: \\"reload\\" });
  return (
    /* @ts-ignore: TS2322 */
    <Button
      children=\\"Reload the page.\\"
      onClick={() => {
        reloadButtonOnClick();
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"ReloadButton\\")}
    ></Button>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests actions with conditional in parameters 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  createDataStorePredicate,
  getOverrideProps,
  useDataStoreBinding,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { User } from \\"../models\\";
import { Button, Flex, FlexProps, Text } from \\"@aws-amplify/ui-react\\";

export type ConditionalInMutationProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    user?: User;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ConditionalInMutation(
  props: ConditionalInMutationProps
): React.ReactElement {
  const { user: userProp, overrides, ...rest } = props;
  const userFilterObj = {
    field: \\"firstName\\",
    operand: \\"Johnny\\",
    operator: \\"eq\\",
  };
  const userFilter = createDataStorePredicate<User>(userFilterObj);
  const userDataStore = useDataStoreBinding({
    type: \\"collection\\",
    model: User,
    criteria: userFilter,
  }).items[0];
  const user = userProp !== undefined ? userProp : userDataStore;
  const [mutatedValueChildren, setMutatedValueChildren] =
    useStateMutationAction(\\"Default Value\\");
  const conditionalPropertyMutationOnClick = () => {
    setMutatedValueChildren(
      user?.age && user?.age == 45 ? \\"Conditional Value\\" : \\"Unconditional Value\\"
    );
  };
  return (
    /* @ts-ignore: TS2322 */
    <Flex {...rest} {...getOverrideProps(overrides, \\"ConditionalInMutation\\")}>
      <Text
        children={mutatedValueChildren}
        {...getOverrideProps(overrides, \\"MutatedValue\\")}
      ></Text>
      <Button
        children=\\"Apply Conditional Property Mutation\\"
        onClick={() => {
          conditionalPropertyMutationOnClick();
        }}
        {...getOverrideProps(overrides, \\"ConditionalPropertyMutation\\")}
      ></Button>
    </Flex>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests basic component tests should generate a simple button component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CustomButton(
  props: CustomButtonProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Button
      color=\\"#ff0000\\"
      width={20}
      isDisabled={true}
      {...rest}
      {...getOverrideProps(overrides, \\"CustomButton\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests basic component tests should generate a simple text component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Text, TextProps } from \\"@aws-amplify/ui-react\\";

export type CustomTextProps = React.PropsWithChildren<
  Partial<TextProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CustomText(props: CustomTextProps): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Text
      color=\\"#ff0000\\"
      width=\\"20px\\"
      children=\\"Text Value\\"
      {...rest}
      {...getOverrideProps(overrides, \\"CustomText\\")}
    ></Text>
  );
}
"
`;

exports[`amplify render tests basic component tests should generate a simple view component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { View, ViewProps } from \\"@aws-amplify/ui-react\\";

export type TestProps = React.PropsWithChildren<
  Partial<ViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function Test(props: TestProps): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <View
      fontFamily=\\"Times New Roman\\"
      fontSize=\\"20px\\"
      {...rest}
      {...getOverrideProps(overrides, \\"Test\\")}
    ></View>
  );
}
"
`;

exports[`amplify render tests bindings auth supports auth bindings in actions 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useAuth,
  useDataStoreCreateAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Customer } from \\"../models\\";
import { schema } from \\"../models/schema\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type ComponentWithAuthEventBindingProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComponentWithAuthEventBinding(
  props: ComponentWithAuthEventBindingProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const authAttributes = useAuth().user?.attributes ?? {};
  const componentWithAuthEventBindingOnClick = useDataStoreCreateAction({
    model: Customer,
    fields: {
      userName: authAttributes[\\"username\\"],
      favoriteIceCream: authAttributes[\\"custom:favorite_icecream\\"],
    },
    schema: schema,
  });
  return (
    /* @ts-ignore: TS2322 */
    <Button
      children=\\"Create\\"
      onClick={() => {
        componentWithAuthEventBindingOnClick();
      }}
      {...rest}
      {...getOverrideProps(overrides, \\"ComponentWithAuthEventBinding\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests bindings data supports bindings with reserved keywords 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { Class } from \\"../models\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Text, TextProps } from \\"@aws-amplify/ui-react\\";

export type DataBindingNamedClassProps = React.PropsWithChildren<
  Partial<TextProps> & {
    class?: Class;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function DataBindingNamedClass(
  props: DataBindingNamedClassProps
): React.ReactElement {
  const { class: classProp, overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Text
      children={classProp?.name}
      {...rest}
      {...getOverrideProps(overrides, \\"DataBindingNamedClass\\")}
    ></Text>
  );
}
"
`;

exports[`amplify render tests collection should not render nested query if the data schema is not provided 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { Author } from \\"../models\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useDataStoreBinding,
} from \\"@aws-amplify/ui-react/internal\\";
import AuthorProfile, { AuthorProfileProps } from \\"./AuthorProfile\\";
import { Collection, CollectionProps } from \\"@aws-amplify/ui-react\\";

export type AuthorProfileCollectionProps = React.PropsWithChildren<
  Partial<CollectionProps<any>> & {
    items?: any[];
    overrideItems?: (collectionItem: {
      item: any;
      index: number;
    }) => AuthorProfileProps;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function AuthorProfileCollection(
  props: AuthorProfileCollectionProps
): React.ReactElement {
  const { items: itemsProp, overrideItems, overrides, ...rest } = props;
  const itemsDataStore = useDataStoreBinding({
    type: \\"collection\\",
    model: Author,
  }).items;
  const items = itemsProp !== undefined ? itemsProp : itemsDataStore;
  return (
    /* @ts-ignore: TS2322 */
    <Collection
      type=\\"list\\"
      itemsPerPage={6}
      templateColumns=\\"1fr 1fr\\"
      autoFlow=\\"row\\"
      alignItems=\\"stretch\\"
      justifyContent=\\"stretch\\"
      items={items || []}
      {...rest}
      {...getOverrideProps(overrides, \\"AuthorProfileCollection\\")}
    >
      {(item, index) => (
        <AuthorProfile
          author={item}
          key={item.id}
          {...(overrideItems && overrideItems({ item, index }))}
        ></AuthorProfile>
      )}
    </Collection>
  );
}
"
`;

exports[`amplify render tests collection should render collection with data binding 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  createDataStorePredicate,
  getOverrideProps,
  useDataStoreBinding,
} from \\"@aws-amplify/ui-react/internal\\";
import { User, UserPreferences } from \\"../models\\";
import {
  Button,
  Collection,
  CollectionProps,
  Flex,
} from \\"@aws-amplify/ui-react\\";
import { MyFlexProps } from \\"./MyFlex\\";

export type CollectionOfCustomButtonsProps = React.PropsWithChildren<
  Partial<CollectionProps<any>> & {
    width?: Number;
    backgroundColor?: String;
    buttonColor?: UserPreferences;
    items?: any[];
    overrideItems?: (collectionItem: {
      item: any;
      index: number;
    }) => MyFlexProps;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CollectionOfCustomButtons(
  props: CollectionOfCustomButtonsProps
): React.ReactElement {
  const {
    width,
    backgroundColor,
    buttonColor: buttonColorProp,
    items,
    overrideItems,
    overrides,
    ...rest
  } = props;
  const buttonUserFilterObj = {
    and: [
      { field: \\"age\\", operand: \\"10\\", operator: \\"gt\\" },
      { field: \\"lastName\\", operand: \\"L\\", operator: \\"beginsWith\\" },
    ],
  };
  const buttonUserFilter = createDataStorePredicate<User>(buttonUserFilterObj);
  const buttonUserDataStore = useDataStoreBinding({
    type: \\"collection\\",
    model: User,
    criteria: buttonUserFilter,
  }).items;
  const buttonUser = items !== undefined ? items : buttonUserDataStore;
  const buttonColorFilterObj = {
    field: \\"userID\\",
    operand: \\"user@email.com\\",
    operator: \\"eq\\",
  };
  const buttonColorFilter =
    createDataStorePredicate<UserPreferences>(buttonColorFilterObj);
  const buttonColorDataStore = useDataStoreBinding({
    type: \\"collection\\",
    model: UserPreferences,
    criteria: buttonColorFilter,
  }).items[0];
  const buttonColor =
    buttonColorProp !== undefined ? buttonColorProp : buttonColorDataStore;
  return (
    /* @ts-ignore: TS2322 */
    <Collection
      type=\\"list\\"
      isPaginated={true}
      gap=\\"1.5rem\\"
      backgroundColor={backgroundColor}
      items={buttonUser || []}
      {...rest}
      {...getOverrideProps(overrides, \\"CollectionOfCustomButtons\\")}
    >
      {(item, index) => (
        <Flex
          key={item.id}
          {...(overrideItems && overrideItems({ item, index }))}
        >
          <Button
            labelWidth={width}
            backgroundColor={buttonColor?.favoriteColor}
            disabled={isDisabled}
            children={item.username || \\"hspain@gmail.com\\"}
            {...(overrideItems && overrideItems({ item, index }))}
          ></Button>
        </Flex>
      )}
    </Collection>
  );
}
"
`;

exports[`amplify render tests collection should render collection with data binding and sort 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  createDataStorePredicate,
  getOverrideProps,
  useDataStoreBinding,
} from \\"@aws-amplify/ui-react/internal\\";
import { SortDirection, SortPredicate } from \\"@aws-amplify/datastore\\";
import { User, UserPreferences } from \\"../models\\";
import {
  Button,
  Collection,
  CollectionProps,
  Flex,
} from \\"@aws-amplify/ui-react\\";
import { MyFlexProps } from \\"./MyFlex\\";

export type CollectionOfCustomButtonsProps = React.PropsWithChildren<
  Partial<CollectionProps<any>> & {
    width?: Number;
    backgroundColor?: String;
    buttonColor?: UserPreferences;
    items?: any[];
    overrideItems?: (collectionItem: {
      item: any;
      index: number;
    }) => MyFlexProps;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CollectionOfCustomButtons(
  props: CollectionOfCustomButtonsProps
): React.ReactElement {
  const {
    width,
    backgroundColor,
    buttonColor: buttonColorProp,
    items,
    overrideItems,
    overrides,
    ...rest
  } = props;
  const buttonUserFilterObj = {
    and: [
      { field: \\"age\\", operand: \\"10\\", operator: \\"gt\\" },
      { field: \\"lastName\\", operand: \\"L\\", operator: \\"beginsWith\\" },
    ],
  };
  const buttonUserFilter = createDataStorePredicate<User>(buttonUserFilterObj);
  const buttonUserPagination = {
    sort: (s: SortPredicate<User>) =>
      s.firstName(SortDirection.ASCENDING).lastName(SortDirection.DESCENDING),
  };
  const buttonUserDataStore = useDataStoreBinding({
    type: \\"collection\\",
    model: User,
    criteria: buttonUserFilter,
    pagination: buttonUserPagination,
  }).items;
  const buttonUser = items !== undefined ? items : buttonUserDataStore;
  const buttonColorFilterObj = {
    field: \\"userID\\",
    operand: \\"user@email.com\\",
    operator: \\"eq\\",
  };
  const buttonColorFilter =
    createDataStorePredicate<UserPreferences>(buttonColorFilterObj);
  const buttonColorDataStore = useDataStoreBinding({
    type: \\"collection\\",
    model: UserPreferences,
    criteria: buttonColorFilter,
  }).items[0];
  const buttonColor =
    buttonColorProp !== undefined ? buttonColorProp : buttonColorDataStore;
  return (
    /* @ts-ignore: TS2322 */
    <Collection
      type=\\"list\\"
      isPaginated={true}
      gap=\\"1.5rem\\"
      backgroundColor={backgroundColor}
      items={buttonUser || []}
      {...rest}
      {...getOverrideProps(overrides, \\"CollectionOfCustomButtons\\")}
    >
      {(item, index) => (
        <Flex
          key={item.id}
          {...(overrideItems && overrideItems({ item, index }))}
        >
          <Button
            labelWidth={width}
            backgroundColor={buttonColor?.favoriteColor}
            disabled={isDisabled}
            children={item.username || \\"hspain@gmail.com\\"}
            {...(overrideItems && overrideItems({ item, index }))}
          ></Button>
        </Flex>
      )}
    </Collection>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests collection should render collection with data binding if binding name is items 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  createDataStorePredicate,
  getOverrideProps,
  useDataStoreBinding,
} from \\"@aws-amplify/ui-react/internal\\";
import { User, UserPreferences } from \\"../models\\";
import {
  Button,
  Collection,
  CollectionProps,
  Flex,
} from \\"@aws-amplify/ui-react\\";
import { MyFlexProps } from \\"./MyFlex\\";

export type CollectionOfCustomButtonsProps = React.PropsWithChildren<
  Partial<CollectionProps<any>> & {
    width?: Number;
    backgroundColor?: String;
    buttonColor?: UserPreferences;
    items?: any[];
    overrideItems?: (collectionItem: {
      item: any;
      index: number;
    }) => MyFlexProps;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CollectionOfCustomButtons(
  props: CollectionOfCustomButtonsProps
): React.ReactElement {
  const {
    width,
    backgroundColor,
    buttonColor: buttonColorProp,
    items: itemsProp,
    overrideItems,
    overrides,
    ...rest
  } = props;
  const itemsFilterObj = {
    and: [
      { field: \\"age\\", operand: \\"10\\", operator: \\"gt\\" },
      { field: \\"lastName\\", operand: \\"L\\", operator: \\"beginsWith\\" },
    ],
  };
  const itemsFilter = createDataStorePredicate<User>(itemsFilterObj);
  const itemsDataStore = useDataStoreBinding({
    type: \\"collection\\",
    model: User,
    criteria: itemsFilter,
  }).items;
  const items = itemsProp !== undefined ? itemsProp : itemsDataStore;
  const buttonColorFilterObj = {
    field: \\"userID\\",
    operand: \\"user@email.com\\",
    operator: \\"eq\\",
  };
  const buttonColorFilter =
    createDataStorePredicate<UserPreferences>(buttonColorFilterObj);
  const buttonColorDataStore = useDataStoreBinding({
    type: \\"collection\\",
    model: UserPreferences,
    criteria: buttonColorFilter,
  }).items[0];
  const buttonColor =
    buttonColorProp !== undefined ? buttonColorProp : buttonColorDataStore;
  return (
    /* @ts-ignore: TS2322 */
    <Collection
      type=\\"list\\"
      isPaginated={true}
      gap=\\"1.5rem\\"
      backgroundColor={backgroundColor}
      items={items || []}
      {...rest}
      {...getOverrideProps(overrides, \\"CollectionOfCustomButtons\\")}
    >
      {(item, index) => (
        <Flex
          key={item.id}
          {...(overrideItems && overrideItems({ item, index }))}
        >
          <Button
            labelWidth={width}
            backgroundColor={buttonColor?.favoriteColor}
            disabled={isDisabled}
            children={item.username || \\"hspain@gmail.com\\"}
            {...(overrideItems && overrideItems({ item, index }))}
          ></Button>
        </Flex>
      )}
    </Collection>
  );
}
"
`;

exports[`amplify render tests collection should render collection with data binding with no predicate 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { UntitledModel } from \\"../models\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useDataStoreBinding,
} from \\"@aws-amplify/ui-react/internal\\";
import ListingCard, { ListingCardProps } from \\"./ListingCard\\";
import { Collection, CollectionProps } from \\"@aws-amplify/ui-react\\";

export type ListingCardCollectionProps = React.PropsWithChildren<
  Partial<CollectionProps<any>> & {
    items?: any[];
    overrideItems?: (collectionItem: {
      item: any;
      index: number;
    }) => ListingCardProps;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ListingCardCollection(
  props: ListingCardCollectionProps
): React.ReactElement {
  const { items, overrideItems, overrides, ...rest } = props;
  const bananasDataStore = useDataStoreBinding({
    type: \\"collection\\",
    model: UntitledModel,
  }).items;
  const bananas = items !== undefined ? items : bananasDataStore;
  return (
    /* @ts-ignore: TS2322 */
    <Collection
      isPaginated=\\"true\\"
      collectionType=\\"grid\\"
      type=\\"list\\"
      columns=\\"2\\"
      order=\\"left-to-right\\"
      items={bananas || []}
      {...rest}
      {...getOverrideProps(overrides, \\"ListingCardCollection\\")}
    >
      {(item, index) => (
        <ListingCard
          marginRight=\\"0\\"
          marginBottom=\\"0\\"
          marginTop=\\"0\\"
          marginLeft=\\"0\\"
          key={item.id}
          {...(overrideItems && overrideItems({ item, index }))}
        ></ListingCard>
      )}
    </Collection>
  );
}
"
`;

exports[`amplify render tests collection should render collection without data binding 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import ListingCard, { ListingCardProps } from \\"./ListingCard\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Collection, CollectionProps } from \\"@aws-amplify/ui-react\\";

export type ListingCardCollectionProps = React.PropsWithChildren<
  Partial<CollectionProps<any>> & {
    items?: any[];
    overrideItems?: (collectionItem: {
      item: any;
      index: number;
    }) => ListingCardProps;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ListingCardCollection(
  props: ListingCardCollectionProps
): React.ReactElement {
  const { items, overrideItems, overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Collection
      type=\\"list\\"
      isPaginated=\\"true\\"
      items={items || []}
      {...rest}
      {...getOverrideProps(overrides, \\"ListingCardCollection\\")}
    >
      {(item, index) => (
        <ListingCard
          key={item.id}
          {...(overrideItems && overrideItems({ item, index }))}
        ></ListingCard>
      )}
    </Collection>
  );
}
"
`;

exports[`amplify render tests collection should render nested query if model has a hasMany relationship 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { Author, Book } from \\"../models\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useDataStoreBinding,
} from \\"@aws-amplify/ui-react/internal\\";
import AuthorProfile, { AuthorProfileProps } from \\"./AuthorProfile\\";
import { Collection, CollectionProps } from \\"@aws-amplify/ui-react\\";

export type AuthorProfileCollectionProps = React.PropsWithChildren<
  Partial<CollectionProps<any>> & {
    items?: any[];
    overrideItems?: (collectionItem: {
      item: any;
      index: number;
    }) => AuthorProfileProps;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function AuthorProfileCollection(
  props: AuthorProfileCollectionProps
): React.ReactElement {
  const { items: itemsProp, overrideItems, overrides, ...rest } = props;
  const bookItems = useDataStoreBinding({
    type: \\"collection\\",
    model: Book,
  }).items;
  const itemsDataStore = useDataStoreBinding({
    type: \\"collection\\",
    model: Author,
  }).items.map((item) => ({
    ...item,
    books: bookItems.filter((model) => model.authorID === item.id),
  }));
  const items = itemsProp !== undefined ? itemsProp : itemsDataStore;
  return (
    /* @ts-ignore: TS2322 */
    <Collection
      type=\\"list\\"
      itemsPerPage={6}
      templateColumns=\\"1fr 1fr\\"
      autoFlow=\\"row\\"
      alignItems=\\"stretch\\"
      justifyContent=\\"stretch\\"
      items={items || []}
      {...rest}
      {...getOverrideProps(overrides, \\"AuthorProfileCollection\\")}
    >
      {(item, index) => (
        <AuthorProfile
          author={item}
          key={item.id}
          {...(overrideItems && overrideItems({ item, index }))}
        ></AuthorProfile>
      )}
    </Collection>
  );
}
"
`;

exports[`amplify render tests complex component tests should generate a button within a view component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, View, ViewProps } from \\"@aws-amplify/ui-react\\";

export type ViewWithButtonProps = React.PropsWithChildren<
  Partial<ViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ViewWithButton(
  props: ViewWithButtonProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <View {...rest} {...getOverrideProps(overrides, \\"ViewWithButton\\")}>
      <Button
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...getOverrideProps(overrides, \\"MyButton\\")}
      ></Button>
    </View>
  );
}
"
`;

exports[`amplify render tests complex component tests should generate a component with custom child 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import CustomButton from \\"./CustomButton\\";
import { View, ViewProps } from \\"@aws-amplify/ui-react\\";

export type ViewWithCustomButtonProps = React.PropsWithChildren<
  Partial<ViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ViewWithCustomButton(
  props: ViewWithCustomButtonProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <View {...rest} {...getOverrideProps(overrides, \\"ViewWithCustomButton\\")}>
      <CustomButton
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...getOverrideProps(overrides, \\"MyCustomButton\\")}
      ></CustomButton>
    </View>
  );
}
"
`;

exports[`amplify render tests complex component tests should generate a component with exposeAs prop 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, View, ViewProps } from \\"@aws-amplify/ui-react\\";

export type ViewWithButtonProps = React.PropsWithChildren<
  Partial<ViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ViewWithButton(
  props: ViewWithButtonProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <View {...rest} {...getOverrideProps(overrides, \\"ViewWithButton\\")}>
      <Button
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...getOverrideProps(overrides, \\"MyButton\\")}
      ></Button>
    </View>
  );
}
"
`;

exports[`amplify render tests complex examples should render complex sample 1 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, Text } from \\"@aws-amplify/ui-react\\";

export type ComplexTest1Props = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComplexTest1(
  props: ComplexTest1Props
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      padding=\\"34px 56px 34px 56px\\"
      backgroundColor=\\"rgb(255,255,255)\\"
      overflow=\\"hidden\\"
      alignItems=\\"flex-start\\"
      gap=\\"10px\\"
      position=\\"relative\\"
      direction=\\"row\\"
      {...rest}
      {...getOverrideProps(overrides, \\"ComplexTest1\\")}
    >
      <Text
        padding=\\"0px 0px 0px 0px\\"
        fontFamily=\\"Roboto\\"
        color=\\"rgb(0,0,0)\\"
        textAlign=\\"left\\"
        width=\\"52px\\"
        fontSize=\\"12px\\"
        lineHeight=\\"14.0625px\\"
        position=\\"relative\\"
        fontWeight=\\"400\\"
        height=\\"14px\\"
        children=\\"Hi harriso\\"
        {...getOverrideProps(overrides, \\"Hi harriso\\")}
      ></Text>
    </Flex>
  );
}
"
`;

exports[`amplify render tests complex examples should render complex sample 2 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, View } from \\"@aws-amplify/ui-react\\";

export type ComplexTest2Props = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComplexTest2(
  props: ComplexTest2Props
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      padding=\\"0px 0px 0px 0px\\"
      backgroundColor=\\"rgb(255,255,255)\\"
      alignItems=\\"flex-start\\"
      gap=\\"0\\"
      width=\\"153px\\"
      position=\\"relative\\"
      direction=\\"row\\"
      height=\\"289px\\"
      {...rest}
      {...getOverrideProps(overrides, \\"ComplexTest2\\")}
    >
      <Flex
        padding=\\"10px 10px 10px 10px\\"
        alignSelf=\\"stretch\\"
        flexGrow=\\"1\\"
        overflow=\\"hidden\\"
        gap=\\"10px\\"
        width=\\"100%\\"
        position=\\"relative\\"
        height=\\"100%\\"
        direction=\\"column\\"
        {...getOverrideProps(overrides, \\"Container\\")}
      >
        <View
          width=\\"123px\\"
          padding=\\"0px 0px 0px 0px\\"
          backgroundColor=\\"rgb(255,0,0)\\"
          position=\\"relative\\"
          src=\\"https://via.placeholder.com/153x289?text=Amplify+Studio+is+Awesome!\\"
          height=\\"125px\\"
          {...getOverrideProps(overrides, \\"RectangleRed\\")}
        ></View>
        <View
          width=\\"123px\\"
          padding=\\"0px 0px 0px 0px\\"
          backgroundColor=\\"rgb(219.30000364780426,255,0)\\"
          position=\\"relative\\"
          src=\\"https://via.placeholder.com/153x289?text=Amplify+Studio+is+Awesome!\\"
          height=\\"122px\\"
          {...getOverrideProps(overrides, \\"RectangleYellow\\")}
        ></View>
      </Flex>
    </Flex>
  );
}
"
`;

exports[`amplify render tests complex examples should render complex sample 3 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, Text, View } from \\"@aws-amplify/ui-react\\";
import ReneButton from \\"./ReneButton\\";

export type ComplexTest3Props = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComplexTest3(
  props: ComplexTest3Props
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      padding=\\"20px 20px 20px 20px\\"
      backgroundColor=\\"rgb(255,255,255)\\"
      overflow=\\"hidden\\"
      alignItems=\\"center\\"
      gap=\\"80px\\"
      position=\\"relative\\"
      justifyContent=\\"center\\"
      direction=\\"column\\"
      {...rest}
      {...getOverrideProps(overrides, \\"ComplexTest3\\")}
    >
      <Text
        padding=\\"0px 0px 0px 0px\\"
        fontFamily=\\"Inter\\"
        color=\\"rgb(0,0,0)\\"
        textAlign=\\"left\\"
        width=\\"146px\\"
        fontSize=\\"24px\\"
        lineHeight=\\"28.80000114440918px\\"
        position=\\"relative\\"
        fontWeight=\\"400\\"
        height=\\"29px\\"
        children=\\"Hello World!\\"
        {...getOverrideProps(overrides, \\"Hello World!\\")}
      ></Text>
      <View
        width=\\"390px\\"
        padding=\\"0px 0px 0px 0px\\"
        backgroundColor=\\"rgb(196.00000351667404,196.00000351667404,196.00000351667404)\\"
        position=\\"relative\\"
        src=\\"https://via.placeholder.com/430x452?text=Amplify+Studio+is+Awesome!\\"
        height=\\"69px\\"
        {...getOverrideProps(overrides, \\"Rectangle 58\\")}
      ></View>
      <ReneButton
        width=\\"293px\\"
        height=\\"45px\\"
        {...getOverrideProps(overrides, \\"ReneButton\\")}
      ></ReneButton>
      <Text
        padding=\\"0px 0px 0px 0px\\"
        fontFamily=\\"Inter\\"
        color=\\"rgb(0,0,0)\\"
        textAlign=\\"left\\"
        width=\\"138px\\"
        fontSize=\\"24px\\"
        lineHeight=\\"28.80000114440918px\\"
        position=\\"relative\\"
        fontWeight=\\"400\\"
        height=\\"29px\\"
        children=\\"Testing 123\\"
        {...getOverrideProps(overrides, \\"Testing 123\\")}
      ></Text>
    </Flex>
  );
}
"
`;

exports[`amplify render tests complex examples should render complex sample 4 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  Variant,
  getOverrideProps,
  getOverridesFromVariants,
  mergeVariantsAndOverrides,
} from \\"@aws-amplify/ui-react/internal\\";
import {
  Flex,
  FlexProps,
  View,
  useBreakpointValue,
} from \\"@aws-amplify/ui-react\\";

export type ComplexTest4Props = React.PropsWithChildren<
  Partial<FlexProps> & {
    colors?: \\"Red/Orange\\";
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComplexTest4(
  props: ComplexTest4Props
): React.ReactElement {
  const { overrides: overridesProp, ...restProp } = props;
  const variants: Variant[] = [
    {
      overrides: {
        ComplexTest4: {
          padding: \\"10px 10px 10px 10px\\",
          backgroundColor: \\"rgb(255,255,255)\\",
          overflow: \\"hidden\\",
          alignItems: \\"flex-start\\",
          gap: \\"10px\\",
          position: \\"relative\\",
          direction: \\"row\\",
        },
        RectangleBlue: {
          padding: \\"0px 0px 0px 0px\\",
          backgroundColor: \\"rgb(255,153.00000607967377,0)\\",
          top: \\"1px\\",
          left: \\"203px\\",
          src: \\"https://via.placeholder.com/323x123?text=Amplify+Studio+is+Awesome!\\",
          width: \\"120px\\",
          position: \\"absolute\\",
          height: \\"122px\\",
        },
        RectangleGreen: {
          padding: \\"0px 0px 0px 0px\\",
          backgroundColor: \\"rgb(255,0,0)\\",
          top: \\"0px\\",
          left: \\"0px\\",
          src: \\"https://via.placeholder.com/323x123?text=Amplify+Studio+is+Awesome!\\",
          width: \\"122px\\",
          position: \\"absolute\\",
          height: \\"123px\\",
        },
        GroupTest: {
          width: \\"323px\\",
          padding: \\"0px 0px 0px 0px\\",
          position: \\"relative\\",
          height: \\"123px\\",
        },
      },
      variantValues: { colors: \\"Red/Orange\\" },
    },
  ];
  const breakpointHook = useBreakpointValue({
    base: \\"base\\",
    large: \\"large\\",
    medium: \\"medium\\",
    small: \\"small\\",
    xl: \\"xl\\",
    xxl: \\"xxl\\",
  });
  const rest = { style: { transition: \\"all 0.25s\\" }, ...restProp };
  const overrides = mergeVariantsAndOverrides(
    getOverridesFromVariants(variants, {
      breakpoint: breakpointHook,
      ...props,
    }),
    overridesProp || {}
  );
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      padding=\\"10px 10px 10px 10px\\"
      backgroundColor=\\"rgb(255,255,255)\\"
      overflow=\\"hidden\\"
      alignItems=\\"flex-start\\"
      gap=\\"10px\\"
      position=\\"relative\\"
      direction=\\"row\\"
      {...rest}
      {...getOverrideProps(overrides, \\"ComplexTest4\\")}
    >
      <Flex
        width=\\"323px\\"
        padding=\\"0px 0px 0px 0px\\"
        position=\\"relative\\"
        height=\\"123px\\"
        {...getOverrideProps(overrides, \\"GroupTest\\")}
      >
        <View
          padding=\\"0px 0px 0px 0px\\"
          backgroundColor=\\"rgb(35.699965953826904,0,255)\\"
          top=\\"0px\\"
          left=\\"0px\\"
          src=\\"https://via.placeholder.com/323x123?text=Amplify+Studio+is+Awesome!\\"
          width=\\"122px\\"
          position=\\"absolute\\"
          height=\\"123px\\"
          {...getOverrideProps(overrides, \\"RectangleGreen\\")}
        ></View>
        <View
          padding=\\"0px 0px 0px 0px\\"
          backgroundColor=\\"rgb(0,255,25.49997568130493)\\"
          top=\\"1px\\"
          left=\\"203px\\"
          src=\\"https://via.placeholder.com/323x123?text=Amplify+Studio+is+Awesome!\\"
          width=\\"120px\\"
          position=\\"absolute\\"
          height=\\"122px\\"
          {...getOverrideProps(overrides, \\"RectangleBlue\\")}
        ></View>
      </Flex>
    </Flex>
  );
}
"
`;

exports[`amplify render tests complex examples should render complex sample 5 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, View } from \\"@aws-amplify/ui-react\\";

export type ComplexTest5Props = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComplexTest5(
  props: ComplexTest5Props
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      padding=\\"0px 0px 0px 0px\\"
      backgroundColor=\\"rgb(255,255,255)\\"
      position=\\"relative\\"
      alignItems=\\"flex-start\\"
      gap=\\"0\\"
      direction=\\"row\\"
      {...rest}
      {...getOverrideProps(overrides, \\"ComplexTest5\\")}
    >
      <View
        width=\\"120px\\"
        padding=\\"0px 0px 0px 0px\\"
        backgroundColor=\\"rgb(35.699965953826904,0,255)\\"
        position=\\"relative\\"
        src=\\"https://via.placeholder.com/240x120?text=Amplify+Studio+is+Awesome!\\"
        height=\\"120px\\"
        {...getOverrideProps(overrides, \\"RectangleGreen\\")}
      ></View>
      <View
        width=\\"120px\\"
        padding=\\"0px 0px 0px 0px\\"
        backgroundColor=\\"rgb(0,255,25.49997568130493)\\"
        position=\\"relative\\"
        src=\\"https://via.placeholder.com/240x120?text=Amplify+Studio+is+Awesome!\\"
        height=\\"120px\\"
        {...getOverrideProps(overrides, \\"RectangleBlue\\")}
      ></View>
    </Flex>
  );
}
"
`;

exports[`amplify render tests complex examples should render complex sample 6 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, Text } from \\"@aws-amplify/ui-react\\";

export type ComplexTest6Props = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComplexTest6(
  props: ComplexTest6Props
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      padding=\\"21px 42px 21px 42px\\"
      backgroundColor=\\"rgb(255,255,255)\\"
      overflow=\\"hidden\\"
      position=\\"relative\\"
      gap=\\"22px\\"
      direction=\\"column\\"
      {...rest}
      {...getOverrideProps(overrides, \\"ComplexTest6\\")}
    >
      <Text
        padding=\\"0px 0px 0px 0px\\"
        fontFamily=\\"Inter\\"
        color=\\"rgb(0,0,0)\\"
        textAlign=\\"left\\"
        width=\\"68px\\"
        fontSize=\\"24px\\"
        lineHeight=\\"28.125px\\"
        position=\\"relative\\"
        fontWeight=\\"700\\"
        height=\\"29px\\"
        children=\\"Name\\"
        {...getOverrideProps(overrides, \\"Name\\")}
      ></Text>
      <Text
        padding=\\"0px 0px 0px 0px\\"
        fontFamily=\\"Roboto\\"
        color=\\"rgb(0,0,0)\\"
        textAlign=\\"left\\"
        width=\\"83px\\"
        fontSize=\\"12px\\"
        lineHeight=\\"14.0625px\\"
        position=\\"relative\\"
        fontWeight=\\"400\\"
        height=\\"14px\\"
        children=\\"Price / Address\\"
        {...getOverrideProps(overrides, \\"Price / Address\\")}
      ></Text>
      <Text
        padding=\\"0px 0px 0px 0px\\"
        fontFamily=\\"Roboto\\"
        color=\\"rgb(0,0,0)\\"
        textAlign=\\"left\\"
        width=\\"23px\\"
        fontSize=\\"12px\\"
        lineHeight=\\"14.0625px\\"
        position=\\"relative\\"
        fontWeight=\\"400\\"
        height=\\"14px\\"
        children=\\"Sqft\\"
        {...getOverrideProps(overrides, \\"Sqft\\")}
      ></Text>
    </Flex>
  );
}
"
`;

exports[`amplify render tests complex examples should render complex sample 7 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Image, Text, View, ViewProps } from \\"@aws-amplify/ui-react\\";

export type ComplexTest7Props = React.PropsWithChildren<
  Partial<ViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComplexTest7(
  props: ComplexTest7Props
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <View
      width=\\"401px\\"
      padding=\\"0px 0px 0px 0px\\"
      position=\\"relative\\"
      height=\\"192px\\"
      {...rest}
      {...getOverrideProps(overrides, \\"ComplexTest7\\")}
    >
      <Image
        border=\\"4px SOLID rgb(0,0,0)\\"
        padding=\\"0px 0px 0px 0px\\"
        top=\\"0px\\"
        borderRadius=\\"45px\\"
        left=\\"254.15074157714844px\\"
        src=\\"https://via.placeholder.com/401x192?text=Amplify+Studio+is+Awesome!\\"
        width=\\"150.84925842285156px\\"
        position=\\"absolute\\"
        height=\\"196px\\"
        {...getOverrideProps(overrides, \\"Imageexy\\")}
      ></Image>
      <Text
        padding=\\"0px 0px 0px 0px\\"
        color=\\"rgb(0,0,0)\\"
        textAlign=\\"left\\"
        fontFamily=\\"Inter\\"
        top=\\"0px\\"
        left=\\"187.4011993408203px\\"
        width=\\"54.426666259765625px\\"
        fontSize=\\"24px\\"
        lineHeight=\\"28.80000114440918px\\"
        position=\\"absolute\\"
        fontWeight=\\"400\\"
        height=\\"27.839996337890625px\\"
        children=\\"Test\\"
        {...getOverrideProps(overrides, \\"Test\\")}
      ></Text>
      <Image
        border=\\"4px SOLID rgb(0,0,0)\\"
        padding=\\"0px 0px 0px 0px\\"
        top=\\"0px\\"
        borderRadius=\\"27px\\"
        left=\\"0px\\"
        src=\\"https://via.placeholder.com/401x192?text=Amplify+Studio+is+Awesome!\\"
        width=\\"169.42330932617188px\\"
        position=\\"absolute\\"
        height=\\"189.0880126953125px\\"
        {...getOverrideProps(overrides, \\"Imagecgh\\")}
      ></Image>
    </View>
  );
}
"
`;

exports[`amplify render tests complex examples should render complex sample 8 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, View } from \\"@aws-amplify/ui-react\\";

export type ComplexTest8Props = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComplexTest8(
  props: ComplexTest8Props
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      padding=\\"0px 0px 0px 0px\\"
      backgroundColor=\\"rgb(255,255,255)\\"
      alignItems=\\"flex-start\\"
      gap=\\"0\\"
      width=\\"145px\\"
      position=\\"relative\\"
      direction=\\"row\\"
      height=\\"243px\\"
      {...rest}
      {...getOverrideProps(overrides, \\"ComplexTest8\\")}
    >
      <Flex
        padding=\\"0px 0px 0px 0px\\"
        flexGrow=\\"0\\"
        gap=\\"0\\"
        width=\\"472px\\"
        position=\\"relative\\"
        height=\\"723px\\"
        direction=\\"column\\"
        {...getOverrideProps(overrides, \\"Frame 107\\")}
      >
        <View
          width=\\"145px\\"
          padding=\\"0px 0px 0px 0px\\"
          backgroundColor=\\"rgb(219.30000364780426,255,0)\\"
          position=\\"relative\\"
          src=\\"https://via.placeholder.com/472x723?text=Amplify+Studio+is+Awesome!\\"
          height=\\"119px\\"
          {...getOverrideProps(overrides, \\"Rectangle 57\\")}
        ></View>
        <View
          width=\\"145px\\"
          padding=\\"0px 0px 0px 0px\\"
          backgroundColor=\\"rgb(255,0,0)\\"
          position=\\"relative\\"
          src=\\"https://via.placeholder.com/472x723?text=Amplify+Studio+is+Awesome!\\"
          height=\\"124px\\"
          {...getOverrideProps(overrides, \\"Rectangle 56\\")}
        ></View>
      </Flex>
    </Flex>
  );
}
"
`;

exports[`amplify render tests complex examples should render complex sample 9 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  Variant,
  getOverrideProps,
  getOverridesFromVariants,
  mergeVariantsAndOverrides,
} from \\"@aws-amplify/ui-react/internal\\";
import {
  Button,
  Flex,
  FlexProps,
  Text,
  useBreakpointValue,
} from \\"@aws-amplify/ui-react\\";

export type ComplexTest9Props = React.PropsWithChildren<
  Partial<FlexProps> & {
    mode?: \\"Dark\\" | \\"Light\\";
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComplexTest9(
  props: ComplexTest9Props
): React.ReactElement {
  const { overrides: overridesProp, ...restProp } = props;
  const variants: Variant[] = [
    {
      nodeId: \\"2878:3221\\",
      variantValues: { mode: \\"Light\\" },
      overrides: {
        \\"LOREM IPSUM\\": {
          fontFamily: \\"Inter\\",
          fontSize: \\"16px\\",
          fontWeight: \\"700\\",
          color:
            \\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\",
          lineHeight: \\"20px\\",
          textAlign: \\"center\\",
          display: \\"flex\\",
          direction: \\"column\\",
          justifyContent: \\"flex-start\\",
          letterSpacing: \\"0.49px\\",
          width: \\"701px\\",
          shrink: \\"0\\",
          alignSelf: \\"stretch\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
          children: \\"LOREM IPSUM\\",
        },
        \\"Ut enim ad minim veniam quis nostrud\\": {
          fontFamily: \\"Inter\\",
          fontSize: \\"40px\\",
          fontWeight: \\"700\\",
          color:
            \\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\",
          lineHeight: \\"48px\\",
          textAlign: \\"center\\",
          display: \\"flex\\",
          direction: \\"column\\",
          justifyContent: \\"flex-start\\",
          width: \\"701px\\",
          shrink: \\"0\\",
          alignSelf: \\"stretch\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
          children: \\"Ut enim ad minim veniam quis nostrud\\",
        },
        \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco.\\":
          {
            fontFamily: \\"Inter\\",
            fontSize: \\"16px\\",
            fontWeight: \\"400\\",
            color:
              \\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\",
            lineHeight: \\"24px\\",
            textAlign: \\"center\\",
            display: \\"flex\\",
            direction: \\"column\\",
            justifyContent: \\"flex-start\\",
            letterSpacing: \\"0.010000000000000009px\\",
            width: \\"701px\\",
            shrink: \\"0\\",
            alignSelf: \\"stretch\\",
            position: \\"relative\\",
            padding: \\"0px 0px 0px 0px\\",
            children:
              \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco.\\",
          },
        Message: {
          gap: \\"16px\\",
          direction: \\"column\\",
          justifyContent: \\"center\\",
          alignItems: \\"center\\",
          shrink: \\"0\\",
          alignSelf: \\"stretch\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
        },
        Button: {
          display: \\"flex\\",
          shrink: \\"0\\",
          width: \\"206px\\",
          size: \\"large\\",
          variation: \\"primary\\",
          children: \\"Primary Button\\",
        },
        HeroMessage: {
          gap: \\"24px\\",
          direction: \\"column\\",
          justifyContent: \\"center\\",
          alignItems: \\"center\\",
          shrink: \\"0\\",
          alignSelf: \\"stretch\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
        },
        Left: {
          gap: \\"10px\\",
          direction: \\"column\\",
          height: \\"324px\\",
          justifyContent: \\"center\\",
          alignItems: \\"center\\",
          grow: \\"1\\",
          basis: \\"941px\\",
          alignSelf: \\"stretch\\",
          overflow: \\"hidden\\",
          position: \\"relative\\",
          padding: \\"120px 120px 120px 120px\\",
          backgroundColor: \\"rgba(255,255,255,1)\\",
        },
        ComplexTest9: {
          gap: \\"0\\",
          direction: \\"row\\",
          width: \\"941px\\",
          height: \\"324px\\",
          justifyContent: \\"center\\",
          alignItems: \\"center\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
        },
      },
    },
    {
      nodeId: \\"2878:3272\\",
      variantValues: { mode: \\"Dark\\" },
      overrides: {
        \\"LOREM IPSUM\\": {
          fontFamily: \\"Inter\\",
          fontSize: \\"16px\\",
          fontWeight: \\"700\\",
          color:
            \\"rgba(233.00000131130219,249.00000035762787,252.00000017881393,1)\\",
          lineHeight: \\"20px\\",
          textAlign: \\"center\\",
          display: \\"flex\\",
          direction: \\"column\\",
          justifyContent: \\"flex-start\\",
          letterSpacing: \\"0.49px\\",
          width: \\"445px\\",
          shrink: \\"0\\",
          alignSelf: \\"stretch\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
          children: \\"TestMessage1\\",
        },
        \\"Ut enim ad minim veniam quis nostrud\\": {
          fontFamily: \\"Inter\\",
          fontSize: \\"40px\\",
          fontWeight: \\"700\\",
          color:
            \\"rgba(233.00000131130219,249.00000035762787,252.00000017881393,1)\\",
          lineHeight: \\"48px\\",
          textAlign: \\"center\\",
          display: \\"flex\\",
          direction: \\"column\\",
          justifyContent: \\"flex-start\\",
          width: \\"445px\\",
          shrink: \\"0\\",
          alignSelf: \\"stretch\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
          children: \\"TestMessage2\\",
        },
        \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco.\\":
          {
            fontFamily: \\"Inter\\",
            fontSize: \\"16px\\",
            fontWeight: \\"400\\",
            color:
              \\"rgba(233.00000131130219,249.00000035762787,252.00000017881393,1)\\",
            lineHeight: \\"24px\\",
            textAlign: \\"center\\",
            display: \\"flex\\",
            direction: \\"column\\",
            justifyContent: \\"flex-start\\",
            letterSpacing: \\"0.010000000000000009px\\",
            width: \\"445px\\",
            shrink: \\"0\\",
            alignSelf: \\"stretch\\",
            position: \\"relative\\",
            padding: \\"0px 0px 0px 0px\\",
            children: \\"TestMessage3\\",
          },
        Message: {
          gap: \\"16px\\",
          direction: \\"column\\",
          justifyContent: \\"center\\",
          alignItems: \\"center\\",
          shrink: \\"0\\",
          alignSelf: \\"stretch\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
        },
        Button: {
          display: \\"flex\\",
          shrink: \\"0\\",
          width: \\"174px\\",
          size: \\"large\\",
          variation: \\"primary\\",
          children: \\"TestButton1\\",
        },
        HeroMessage: {
          gap: \\"24px\\",
          direction: \\"column\\",
          justifyContent: \\"center\\",
          alignItems: \\"center\\",
          shrink: \\"0\\",
          alignSelf: \\"stretch\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
        },
        Left: {
          gap: \\"10px\\",
          direction: \\"column\\",
          height: \\"422px\\",
          justifyContent: \\"center\\",
          alignItems: \\"center\\",
          grow: \\"1\\",
          basis: \\"685px\\",
          alignSelf: \\"stretch\\",
          overflow: \\"hidden\\",
          position: \\"relative\\",
          padding: \\"120px 120px 120px 120px\\",
          backgroundColor: \\"rgba(0,63.750030398368835,76.50000303983688,1)\\",
        },
        ComplexTest9: {
          gap: \\"0\\",
          direction: \\"row\\",
          width: \\"908px\\",
          height: \\"422px\\",
          justifyContent: \\"center\\",
          alignItems: \\"center\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
        },
      },
    },
  ];
  const breakpointHook = useBreakpointValue({
    base: \\"base\\",
    large: \\"large\\",
    medium: \\"medium\\",
    small: \\"small\\",
    xl: \\"xl\\",
    xxl: \\"xxl\\",
  });
  const rest = { style: { transition: \\"all 0.25s\\" }, ...restProp };
  const overrides = mergeVariantsAndOverrides(
    getOverridesFromVariants(variants, {
      breakpoint: breakpointHook,
      ...props,
    }),
    overridesProp || {}
  );
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      gap=\\"0\\"
      direction=\\"row\\"
      width=\\"941px\\"
      height=\\"324px\\"
      justifyContent=\\"center\\"
      alignItems=\\"center\\"
      position=\\"relative\\"
      padding=\\"0px 0px 0px 0px\\"
      {...rest}
      {...getOverrideProps(overrides, \\"ComplexTest9\\")}
    >
      <Flex
        gap=\\"10px\\"
        direction=\\"column\\"
        height=\\"324px\\"
        justifyContent=\\"center\\"
        alignItems=\\"center\\"
        grow=\\"1\\"
        basis=\\"941px\\"
        alignSelf=\\"stretch\\"
        overflow=\\"hidden\\"
        position=\\"relative\\"
        padding=\\"120px 120px 120px 120px\\"
        backgroundColor=\\"rgba(255,255,255,1)\\"
        {...getOverrideProps(overrides, \\"Left\\")}
      >
        <Flex
          gap=\\"24px\\"
          direction=\\"column\\"
          justifyContent=\\"center\\"
          alignItems=\\"center\\"
          shrink=\\"0\\"
          alignSelf=\\"stretch\\"
          position=\\"relative\\"
          padding=\\"0px 0px 0px 0px\\"
          {...getOverrideProps(overrides, \\"HeroMessage\\")}
        >
          <Text
            fontFamily=\\"Inter\\"
            fontSize=\\"16px\\"
            fontWeight=\\"700\\"
            color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
            lineHeight=\\"20px\\"
            textAlign=\\"center\\"
            display=\\"flex\\"
            direction=\\"column\\"
            justifyContent=\\"flex-start\\"
            letterSpacing=\\"0.49px\\"
            width=\\"701px\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            children=\\"LOREM IPSUM\\"
            {...getOverrideProps(overrides, \\"LOREM IPSUM\\")}
          ></Text>
          <Flex
            gap=\\"16px\\"
            direction=\\"column\\"
            justifyContent=\\"center\\"
            alignItems=\\"center\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            {...getOverrideProps(overrides, \\"Message\\")}
          >
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"40px\\"
              fontWeight=\\"700\\"
              color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
              lineHeight=\\"48px\\"
              textAlign=\\"center\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              width=\\"701px\\"
              shrink=\\"0\\"
              alignSelf=\\"stretch\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Ut enim ad minim veniam quis nostrud\\"
              {...getOverrideProps(
                overrides,
                \\"Ut enim ad minim veniam quis nostrud\\"
              )}
            ></Text>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"center\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              width=\\"701px\\"
              shrink=\\"0\\"
              alignSelf=\\"stretch\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco.\\"
              {...getOverrideProps(
                overrides,
                \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco.\\"
              )}
            ></Text>
          </Flex>
          <Button
            display=\\"flex\\"
            shrink=\\"0\\"
            width=\\"206px\\"
            size=\\"large\\"
            variation=\\"primary\\"
            children=\\"Primary Button\\"
            {...getOverrideProps(overrides, \\"Button\\")}
          ></Button>
        </Flex>
      </Flex>
    </Flex>
  );
}
"
`;

exports[`amplify render tests complex examples should render complex sample 10 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import {
  Button,
  Divider,
  Flex,
  FlexProps,
  Icon,
  Text,
} from \\"@aws-amplify/ui-react\\";

export type ComplexTest10Props = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComplexTest10(
  props: ComplexTest10Props
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      gap=\\"24px\\"
      direction=\\"row\\"
      width=\\"1440px\\"
      justifyContent=\\"center\\"
      alignItems=\\"center\\"
      overflow=\\"hidden\\"
      position=\\"relative\\"
      padding=\\"40px 140px 40px 140px\\"
      backgroundColor=\\"rgba(239.00000095367432,240.00000089406967,240.00000089406967,1)\\"
      {...rest}
      {...getOverrideProps(overrides, \\"ComplexTest10\\")}
    >
      <Flex
        gap=\\"24px\\"
        direction=\\"row\\"
        width=\\"1160px\\"
        alignItems=\\"flex-start\\"
        grow=\\"1\\"
        basis=\\"1160px\\"
        height=\\"618px\\"
        position=\\"relative\\"
        padding=\\"0px 0px 0px 0px\\"
        {...getOverrideProps(overrides, \\"Frame 63\\")}
      >
        <Flex
          gap=\\"24px\\"
          direction=\\"column\\"
          width=\\"272px\\"
          justifyContent=\\"center\\"
          alignItems=\\"center\\"
          grow=\\"1\\"
          basis=\\"272px\\"
          height=\\"618px\\"
          position=\\"relative\\"
          padding=\\"24px 24px 24px 24px\\"
          backgroundColor=\\"rgba(255,255,255,1)\\"
          {...getOverrideProps(overrides, \\"Frame 390\\")}
        >
          <Text
            fontFamily=\\"Inter\\"
            fontSize=\\"40px\\"
            fontWeight=\\"700\\"
            color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
            lineHeight=\\"48px\\"
            textAlign=\\"center\\"
            display=\\"flex\\"
            direction=\\"column\\"
            justifyContent=\\"flex-start\\"
            width=\\"224px\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            children=\\"Free\\"
            {...getOverrideProps(overrides, \\"Free\\")}
          ></Text>
          <Text
            fontFamily=\\"Inter\\"
            fontSize=\\"32px\\"
            fontWeight=\\"700\\"
            color=\\"rgba(48.000000938773155,64.00000378489494,80.00000283122063,1)\\"
            lineHeight=\\"40px\\"
            textAlign=\\"center\\"
            display=\\"flex\\"
            direction=\\"column\\"
            justifyContent=\\"flex-start\\"
            width=\\"224px\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            children=\\"$0/mo\\"
            {...getOverrideProps(overrides, \\"$0/mo\\")}
          ></Text>
          <Button
            display=\\"flex\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            size=\\"large\\"
            variation=\\"primary\\"
            children=\\"Primary Button\\"
            {...getOverrideProps(overrides, \\"Buttondmi\\")}
          ></Button>
          <Divider
            width=\\"224px\\"
            height=\\"2px\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            size=\\"default\\"
            orientation=\\"horizontal\\"
            {...getOverrideProps(overrides, \\"Dividerxhd\\")}
          ></Divider>
          <Flex
            gap=\\"16px\\"
            direction=\\"row\\"
            alignItems=\\"flex-start\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            {...getOverrideProps(overrides, \\"Frame 138mkm\\")}
          >
            <Icon
              width=\\"24px\\"
              height=\\"24px\\"
              shrink=\\"0\\"
              overflow=\\"hidden\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              color=\\"rgba(63.999996185302734,169.83334600925446,191.00000381469727,1)\\"
              type=\\"check\\"
              fontSize=\\"24px\\"
              pathData=\\"M5.59 10.58L1.42 6.41L0 7.82L5.59 13.41L17.59 1.41L16.18 0L5.59 10.58Z\\"
              {...getOverrideProps(overrides, \\"Iconunz\\")}
            ></Icon>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(48.000000938773155,64.00000378489494,80.00000283122063,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              width=\\"184px\\"
              grow=\\"1\\"
              basis=\\"184px\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.\\"
              {...getOverrideProps(
                overrides,
                \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.oat\\"
              )}
            ></Text>
          </Flex>
          <Flex
            gap=\\"16px\\"
            direction=\\"row\\"
            alignItems=\\"flex-start\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            {...getOverrideProps(overrides, \\"Frame 139jki\\")}
          >
            <Icon
              width=\\"24px\\"
              height=\\"24px\\"
              shrink=\\"0\\"
              overflow=\\"hidden\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              color=\\"rgba(63.999996185302734,169.83334600925446,191.00000381469727,1)\\"
              type=\\"check\\"
              fontSize=\\"24px\\"
              pathData=\\"M5.59 10.58L1.42 6.41L0 7.82L5.59 13.41L17.59 1.41L16.18 0L5.59 10.58Z\\"
              {...getOverrideProps(overrides, \\"Iconrca\\")}
            ></Icon>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(48.000000938773155,64.00000378489494,80.00000283122063,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              width=\\"184px\\"
              grow=\\"1\\"
              basis=\\"184px\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.\\"
              {...getOverrideProps(
                overrides,
                \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.yfq\\"
              )}
            ></Text>
          </Flex>
          <Flex
            gap=\\"16px\\"
            direction=\\"row\\"
            alignItems=\\"flex-start\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            {...getOverrideProps(overrides, \\"Frame 137zde\\")}
          >
            <Icon
              width=\\"24px\\"
              height=\\"24px\\"
              shrink=\\"0\\"
              overflow=\\"hidden\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              color=\\"rgba(63.999996185302734,169.83334600925446,191.00000381469727,1)\\"
              type=\\"check\\"
              fontSize=\\"24px\\"
              pathData=\\"M5.59 10.58L1.42 6.41L0 7.82L5.59 13.41L17.59 1.41L16.18 0L5.59 10.58Z\\"
              {...getOverrideProps(overrides, \\"Iconwrc\\")}
            ></Icon>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(48.000000938773155,64.00000378489494,80.00000283122063,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              width=\\"184px\\"
              grow=\\"1\\"
              basis=\\"184px\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.\\"
              {...getOverrideProps(
                overrides,
                \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.lum\\"
              )}
            ></Text>
          </Flex>
        </Flex>
        <Flex
          gap=\\"24px\\"
          direction=\\"column\\"
          width=\\"272px\\"
          justifyContent=\\"center\\"
          alignItems=\\"center\\"
          grow=\\"1\\"
          basis=\\"272px\\"
          height=\\"618px\\"
          position=\\"relative\\"
          padding=\\"24px 24px 24px 24px\\"
          backgroundColor=\\"rgba(255,255,255,1)\\"
          {...getOverrideProps(overrides, \\"Frame 391\\")}
        >
          <Text
            fontFamily=\\"Inter\\"
            fontSize=\\"40px\\"
            fontWeight=\\"700\\"
            color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
            lineHeight=\\"48px\\"
            textAlign=\\"center\\"
            display=\\"flex\\"
            direction=\\"column\\"
            justifyContent=\\"flex-start\\"
            width=\\"224px\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            children=\\"Hobby\\"
            {...getOverrideProps(overrides, \\"Hobby\\")}
          ></Text>
          <Text
            fontFamily=\\"Inter\\"
            fontSize=\\"32px\\"
            fontWeight=\\"700\\"
            color=\\"rgba(48.000000938773155,64.00000378489494,80.00000283122063,1)\\"
            lineHeight=\\"40px\\"
            textAlign=\\"center\\"
            display=\\"flex\\"
            direction=\\"column\\"
            justifyContent=\\"flex-start\\"
            width=\\"224px\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            children=\\"$10/mo\\"
            {...getOverrideProps(overrides, \\"$10/mo\\")}
          ></Text>
          <Button
            display=\\"flex\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            size=\\"large\\"
            variation=\\"primary\\"
            children=\\"Primary Button\\"
            {...getOverrideProps(overrides, \\"Buttoncej\\")}
          ></Button>
          <Divider
            width=\\"224px\\"
            height=\\"2px\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            size=\\"default\\"
            orientation=\\"horizontal\\"
            {...getOverrideProps(overrides, \\"Dividerovm\\")}
          ></Divider>
          <Flex
            gap=\\"16px\\"
            direction=\\"row\\"
            alignItems=\\"flex-start\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            {...getOverrideProps(overrides, \\"Frame 138upy\\")}
          >
            <Icon
              width=\\"24px\\"
              height=\\"24px\\"
              shrink=\\"0\\"
              overflow=\\"hidden\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              color=\\"rgba(63.999996185302734,169.83334600925446,191.00000381469727,1)\\"
              type=\\"check\\"
              fontSize=\\"24px\\"
              pathData=\\"M5.59 10.58L1.42 6.41L0 7.82L5.59 13.41L17.59 1.41L16.18 0L5.59 10.58Z\\"
              {...getOverrideProps(overrides, \\"Iconxzy\\")}
            ></Icon>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(48.000000938773155,64.00000378489494,80.00000283122063,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              width=\\"184px\\"
              grow=\\"1\\"
              basis=\\"184px\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.\\"
              {...getOverrideProps(
                overrides,
                \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.vxv\\"
              )}
            ></Text>
          </Flex>
          <Flex
            gap=\\"16px\\"
            direction=\\"row\\"
            alignItems=\\"flex-start\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            {...getOverrideProps(overrides, \\"Frame 139tvb\\")}
          >
            <Icon
              width=\\"24px\\"
              height=\\"24px\\"
              shrink=\\"0\\"
              overflow=\\"hidden\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              color=\\"rgba(63.999996185302734,169.83334600925446,191.00000381469727,1)\\"
              type=\\"check\\"
              fontSize=\\"24px\\"
              pathData=\\"M5.59 10.58L1.42 6.41L0 7.82L5.59 13.41L17.59 1.41L16.18 0L5.59 10.58Z\\"
              {...getOverrideProps(overrides, \\"Iconpjz\\")}
            ></Icon>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(48.000000938773155,64.00000378489494,80.00000283122063,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              width=\\"184px\\"
              grow=\\"1\\"
              basis=\\"184px\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.\\"
              {...getOverrideProps(
                overrides,
                \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.gwp\\"
              )}
            ></Text>
          </Flex>
          <Flex
            gap=\\"16px\\"
            direction=\\"row\\"
            alignItems=\\"flex-start\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            {...getOverrideProps(overrides, \\"Frame 137fsd\\")}
          >
            <Icon
              width=\\"24px\\"
              height=\\"24px\\"
              shrink=\\"0\\"
              overflow=\\"hidden\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              color=\\"rgba(63.999996185302734,169.83334600925446,191.00000381469727,1)\\"
              type=\\"check\\"
              fontSize=\\"24px\\"
              pathData=\\"M5.59 10.58L1.42 6.41L0 7.82L5.59 13.41L17.59 1.41L16.18 0L5.59 10.58Z\\"
              {...getOverrideProps(overrides, \\"Iconhpq\\")}
            ></Icon>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(48.000000938773155,64.00000378489494,80.00000283122063,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              width=\\"184px\\"
              grow=\\"1\\"
              basis=\\"184px\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.\\"
              {...getOverrideProps(
                overrides,
                \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.riv\\"
              )}
            ></Text>
          </Flex>
        </Flex>
        <Flex
          gap=\\"24px\\"
          direction=\\"column\\"
          width=\\"272px\\"
          justifyContent=\\"center\\"
          alignItems=\\"center\\"
          grow=\\"1\\"
          basis=\\"272px\\"
          height=\\"618px\\"
          position=\\"relative\\"
          padding=\\"24px 24px 24px 24px\\"
          backgroundColor=\\"rgba(255,255,255,1)\\"
          {...getOverrideProps(overrides, \\"Frame 392\\")}
        >
          <Text
            fontFamily=\\"Inter\\"
            fontSize=\\"40px\\"
            fontWeight=\\"700\\"
            color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
            lineHeight=\\"48px\\"
            textAlign=\\"center\\"
            display=\\"flex\\"
            direction=\\"column\\"
            justifyContent=\\"flex-start\\"
            width=\\"224px\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            children=\\"Premium\\"
            {...getOverrideProps(overrides, \\"Premium\\")}
          ></Text>
          <Text
            fontFamily=\\"Inter\\"
            fontSize=\\"32px\\"
            fontWeight=\\"700\\"
            color=\\"rgba(48.000000938773155,64.00000378489494,80.00000283122063,1)\\"
            lineHeight=\\"40px\\"
            textAlign=\\"center\\"
            display=\\"flex\\"
            direction=\\"column\\"
            justifyContent=\\"flex-start\\"
            width=\\"224px\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            children=\\"$100/mo\\"
            {...getOverrideProps(overrides, \\"$100/mo\\")}
          ></Text>
          <Button
            display=\\"flex\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            size=\\"large\\"
            variation=\\"primary\\"
            children=\\"Primary Button\\"
            {...getOverrideProps(overrides, \\"Buttonizv\\")}
          ></Button>
          <Divider
            width=\\"224px\\"
            height=\\"2px\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            size=\\"default\\"
            orientation=\\"horizontal\\"
            {...getOverrideProps(overrides, \\"Dividerftq\\")}
          ></Divider>
          <Flex
            gap=\\"16px\\"
            direction=\\"row\\"
            alignItems=\\"flex-start\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            {...getOverrideProps(overrides, \\"Frame 138lgm\\")}
          >
            <Icon
              width=\\"24px\\"
              height=\\"24px\\"
              shrink=\\"0\\"
              overflow=\\"hidden\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              color=\\"rgba(63.999996185302734,169.83334600925446,191.00000381469727,1)\\"
              type=\\"check\\"
              fontSize=\\"24px\\"
              pathData=\\"M5.59 10.58L1.42 6.41L0 7.82L5.59 13.41L17.59 1.41L16.18 0L5.59 10.58Z\\"
              {...getOverrideProps(overrides, \\"Iconoyx\\")}
            ></Icon>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(48.000000938773155,64.00000378489494,80.00000283122063,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              width=\\"184px\\"
              grow=\\"1\\"
              basis=\\"184px\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.\\"
              {...getOverrideProps(
                overrides,
                \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.kai\\"
              )}
            ></Text>
          </Flex>
          <Flex
            gap=\\"16px\\"
            direction=\\"row\\"
            alignItems=\\"flex-start\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            {...getOverrideProps(overrides, \\"Frame 139vsq\\")}
          >
            <Icon
              width=\\"24px\\"
              height=\\"24px\\"
              shrink=\\"0\\"
              overflow=\\"hidden\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              color=\\"rgba(63.999996185302734,169.83334600925446,191.00000381469727,1)\\"
              type=\\"check\\"
              fontSize=\\"24px\\"
              pathData=\\"M5.59 10.58L1.42 6.41L0 7.82L5.59 13.41L17.59 1.41L16.18 0L5.59 10.58Z\\"
              {...getOverrideProps(overrides, \\"Iconcsj\\")}
            ></Icon>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(48.000000938773155,64.00000378489494,80.00000283122063,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              width=\\"184px\\"
              grow=\\"1\\"
              basis=\\"184px\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.\\"
              {...getOverrideProps(
                overrides,
                \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.nuy\\"
              )}
            ></Text>
          </Flex>
          <Flex
            gap=\\"16px\\"
            direction=\\"row\\"
            alignItems=\\"flex-start\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            {...getOverrideProps(overrides, \\"Frame 137kjg\\")}
          >
            <Icon
              width=\\"24px\\"
              height=\\"24px\\"
              shrink=\\"0\\"
              overflow=\\"hidden\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              color=\\"rgba(63.999996185302734,169.83334600925446,191.00000381469727,1)\\"
              type=\\"check\\"
              fontSize=\\"24px\\"
              pathData=\\"M5.59 10.58L1.42 6.41L0 7.82L5.59 13.41L17.59 1.41L16.18 0L5.59 10.58Z\\"
              {...getOverrideProps(overrides, \\"Icongvd\\")}
            ></Icon>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(48.000000938773155,64.00000378489494,80.00000283122063,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              width=\\"184px\\"
              grow=\\"1\\"
              basis=\\"184px\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.\\"
              {...getOverrideProps(
                overrides,
                \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.hjl\\"
              )}
            ></Text>
          </Flex>
        </Flex>
        <Flex
          gap=\\"24px\\"
          direction=\\"column\\"
          width=\\"272px\\"
          justifyContent=\\"center\\"
          alignItems=\\"center\\"
          grow=\\"1\\"
          basis=\\"272px\\"
          height=\\"618px\\"
          position=\\"relative\\"
          padding=\\"24px 24px 24px 24px\\"
          backgroundColor=\\"rgba(255,255,255,1)\\"
          {...getOverrideProps(overrides, \\"Frame 393\\")}
        >
          <Text
            fontFamily=\\"Inter\\"
            fontSize=\\"40px\\"
            fontWeight=\\"700\\"
            color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
            lineHeight=\\"48px\\"
            textAlign=\\"center\\"
            display=\\"flex\\"
            direction=\\"column\\"
            justifyContent=\\"flex-start\\"
            width=\\"224px\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            children=\\"Enterprise\\"
            {...getOverrideProps(overrides, \\"Enterprise\\")}
          ></Text>
          <Text
            fontFamily=\\"Inter\\"
            fontSize=\\"32px\\"
            fontWeight=\\"700\\"
            color=\\"rgba(48.000000938773155,64.00000378489494,80.00000283122063,1)\\"
            lineHeight=\\"40px\\"
            textAlign=\\"center\\"
            display=\\"flex\\"
            direction=\\"column\\"
            justifyContent=\\"flex-start\\"
            width=\\"224px\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            children=\\"Contact us\\"
            {...getOverrideProps(overrides, \\"Contact us\\")}
          ></Text>
          <Button
            display=\\"flex\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            size=\\"large\\"
            variation=\\"primary\\"
            children=\\"Primary Button\\"
            {...getOverrideProps(overrides, \\"Buttonwez\\")}
          ></Button>
          <Divider
            width=\\"224px\\"
            height=\\"2px\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            size=\\"default\\"
            orientation=\\"horizontal\\"
            {...getOverrideProps(overrides, \\"Dividerzxk\\")}
          ></Divider>
          <Flex
            gap=\\"16px\\"
            direction=\\"row\\"
            alignItems=\\"flex-start\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            {...getOverrideProps(overrides, \\"Frame 138udv\\")}
          >
            <Icon
              width=\\"24px\\"
              height=\\"24px\\"
              shrink=\\"0\\"
              overflow=\\"hidden\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              color=\\"rgba(63.999996185302734,169.83334600925446,191.00000381469727,1)\\"
              type=\\"check\\"
              fontSize=\\"24px\\"
              pathData=\\"M5.59 10.58L1.42 6.41L0 7.82L5.59 13.41L17.59 1.41L16.18 0L5.59 10.58Z\\"
              {...getOverrideProps(overrides, \\"Iconkmb\\")}
            ></Icon>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(48.000000938773155,64.00000378489494,80.00000283122063,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              width=\\"184px\\"
              grow=\\"1\\"
              basis=\\"184px\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor123123.\\"
              {...getOverrideProps(
                overrides,
                \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.zfj\\"
              )}
            ></Text>
          </Flex>
          <Flex
            gap=\\"16px\\"
            direction=\\"row\\"
            alignItems=\\"flex-start\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            {...getOverrideProps(overrides, \\"Frame 139cwp\\")}
          >
            <Icon
              width=\\"24px\\"
              height=\\"24px\\"
              shrink=\\"0\\"
              overflow=\\"hidden\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              color=\\"rgba(63.999996185302734,169.83334600925446,191.00000381469727,1)\\"
              type=\\"check\\"
              fontSize=\\"24px\\"
              pathData=\\"M5.59 10.58L1.42 6.41L0 7.82L5.59 13.41L17.59 1.41L16.18 0L5.59 10.58Z\\"
              {...getOverrideProps(overrides, \\"Iconzyv\\")}
            ></Icon>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(48.000000938773155,64.00000378489494,80.00000283122063,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              width=\\"184px\\"
              grow=\\"1\\"
              basis=\\"184px\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.\\"
              {...getOverrideProps(
                overrides,
                \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.dcz\\"
              )}
            ></Text>
          </Flex>
          <Flex
            gap=\\"16px\\"
            direction=\\"row\\"
            alignItems=\\"flex-start\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 0px 0px 0px\\"
            {...getOverrideProps(overrides, \\"Frame 137pog\\")}
          >
            <Icon
              width=\\"24px\\"
              height=\\"24px\\"
              shrink=\\"0\\"
              overflow=\\"hidden\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              color=\\"rgba(63.999996185302734,169.83334600925446,191.00000381469727,1)\\"
              type=\\"check\\"
              fontSize=\\"24px\\"
              pathData=\\"M5.59 10.58L1.42 6.41L0 7.82L5.59 13.41L17.59 1.41L16.18 0L5.59 10.58Z\\"
              {...getOverrideProps(overrides, \\"Iconsrt\\")}
            ></Icon>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(48.000000938773155,64.00000378489494,80.00000283122063,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              width=\\"184px\\"
              grow=\\"1\\"
              basis=\\"184px\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.\\"
              {...getOverrideProps(
                overrides,
                \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor.rug\\"
              )}
            ></Text>
          </Flex>
        </Flex>
      </Flex>
    </Flex>
  );
}
"
`;

exports[`amplify render tests complex examples should render complex sample 11 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import {
  Badge,
  Button,
  Divider,
  Flex,
  FlexProps,
  Icon,
  Image,
  SelectField,
  Text,
  TextField,
  View,
} from \\"@aws-amplify/ui-react\\";

export type ComplexTest11Props = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComplexTest11(
  props: ComplexTest11Props
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      gap=\\"24px\\"
      direction=\\"row\\"
      width=\\"1160px\\"
      alignItems=\\"flex-start\\"
      position=\\"relative\\"
      padding=\\"0px 0px 0px 0px\\"
      {...rest}
      {...getOverrideProps(overrides, \\"ComplexTest11\\")}
    >
      <Flex
        gap=\\"0\\"
        direction=\\"row\\"
        width=\\"667px\\"
        alignItems=\\"flex-start\\"
        grow=\\"1\\"
        basis=\\"667px\\"
        height=\\"1148px\\"
        position=\\"relative\\"
        padding=\\"32px 0px 32px 0px\\"
        backgroundColor=\\"rgba(255,255,255,1)\\"
        {...getOverrideProps(overrides, \\"Frame 411\\")}
      >
        <Flex
          gap=\\"32px\\"
          direction=\\"column\\"
          width=\\"667px\\"
          justifyContent=\\"center\\"
          alignItems=\\"center\\"
          grow=\\"1\\"
          basis=\\"667px\\"
          height=\\"1084px\\"
          position=\\"relative\\"
          padding=\\"0px 0px 0px 0px\\"
          {...getOverrideProps(overrides, \\"Frame 313vza\\")}
        >
          <Flex
            gap=\\"24px\\"
            direction=\\"column\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 32px 0px 32px\\"
            {...getOverrideProps(overrides, \\"Frame 406\\")}
          >
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"700\\"
              color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              shrink=\\"0\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Info\\"
              {...getOverrideProps(overrides, \\"Info\\")}
            ></Text>
            <TextField
              display=\\"flex\\"
              shrink=\\"0\\"
              alignSelf=\\"stretch\\"
              label=\\"Label\\"
              size=\\"large\\"
              variation=\\"default\\"
              {...getOverrideProps(overrides, \\"TextFieldlrg\\")}
            ></TextField>
            <TextField
              display=\\"flex\\"
              shrink=\\"0\\"
              alignSelf=\\"stretch\\"
              label=\\"Label\\"
              size=\\"large\\"
              variation=\\"default\\"
              {...getOverrideProps(overrides, \\"TextFieldbcu\\")}
            ></TextField>
          </Flex>
          <Divider
            width=\\"667px\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            size=\\"small\\"
            orientation=\\"horizontal\\"
            {...getOverrideProps(overrides, \\"Dividervgv\\")}
          ></Divider>
          <Flex
            gap=\\"24px\\"
            direction=\\"column\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 32px 0px 32px\\"
            {...getOverrideProps(overrides, \\"Frame 409\\")}
          >
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"700\\"
              color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              shrink=\\"0\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Shipping\\"
              {...getOverrideProps(overrides, \\"Shippinguim\\")}
            ></Text>
            <TextField
              display=\\"flex\\"
              shrink=\\"0\\"
              alignSelf=\\"stretch\\"
              label=\\"Label\\"
              size=\\"large\\"
              variation=\\"default\\"
              {...getOverrideProps(overrides, \\"TextFieldxak\\")}
            ></TextField>
            <TextField
              display=\\"flex\\"
              shrink=\\"0\\"
              alignSelf=\\"stretch\\"
              label=\\"Label\\"
              size=\\"large\\"
              variation=\\"default\\"
              {...getOverrideProps(overrides, \\"TextFieldsju\\")}
            ></TextField>
            <Flex
              gap=\\"24px\\"
              direction=\\"row\\"
              alignItems=\\"flex-start\\"
              shrink=\\"0\\"
              alignSelf=\\"stretch\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              {...getOverrideProps(overrides, \\"Frame 407\\")}
            >
              <TextField
                width=\\"289.5px\\"
                display=\\"flex\\"
                grow=\\"1\\"
                basis=\\"289.5px\\"
                height=\\"74px\\"
                label=\\"Label\\"
                size=\\"large\\"
                variation=\\"default\\"
                {...getOverrideProps(overrides, \\"TextFieldmoq\\")}
              ></TextField>
              <SelectField
                width=\\"289.5px\\"
                display=\\"flex\\"
                grow=\\"1\\"
                basis=\\"289.5px\\"
                height=\\"74px\\"
                label=\\"Label\\"
                size=\\"large\\"
                variation=\\"default\\"
                {...getOverrideProps(overrides, \\"SelectFieldqqj\\")}
              ></SelectField>
            </Flex>
            <Flex
              gap=\\"24px\\"
              direction=\\"row\\"
              alignItems=\\"flex-start\\"
              shrink=\\"0\\"
              alignSelf=\\"stretch\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              {...getOverrideProps(overrides, \\"Frame 408\\")}
            >
              <TextField
                width=\\"289.5px\\"
                display=\\"flex\\"
                grow=\\"1\\"
                basis=\\"289.5px\\"
                height=\\"74px\\"
                label=\\"Label\\"
                size=\\"large\\"
                variation=\\"default\\"
                {...getOverrideProps(overrides, \\"TextFieldnts\\")}
              ></TextField>
              <SelectField
                width=\\"289.5px\\"
                display=\\"flex\\"
                grow=\\"1\\"
                basis=\\"289.5px\\"
                height=\\"74px\\"
                label=\\"Label\\"
                size=\\"large\\"
                variation=\\"default\\"
                {...getOverrideProps(overrides, \\"SelectFieldpiz\\")}
              ></SelectField>
            </Flex>
          </Flex>
          <Divider
            width=\\"667px\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            size=\\"small\\"
            orientation=\\"horizontal\\"
            {...getOverrideProps(overrides, \\"Dividerluf\\")}
          ></Divider>
          <Flex
            gap=\\"24px\\"
            direction=\\"column\\"
            shrink=\\"0\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            padding=\\"0px 32px 0px 32px\\"
            {...getOverrideProps(overrides, \\"Frame 313pea\\")}
          >
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"700\\"
              color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              shrink=\\"0\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Card info\\"
              {...getOverrideProps(overrides, \\"Card info\\")}
            ></Text>
            <TextField
              display=\\"flex\\"
              shrink=\\"0\\"
              alignSelf=\\"stretch\\"
              label=\\"Label\\"
              size=\\"large\\"
              variation=\\"default\\"
              {...getOverrideProps(overrides, \\"TextFieldavv\\")}
            ></TextField>
            <TextField
              display=\\"flex\\"
              shrink=\\"0\\"
              alignSelf=\\"stretch\\"
              label=\\"Label\\"
              size=\\"large\\"
              variation=\\"default\\"
              {...getOverrideProps(overrides, \\"TextFieldakg\\")}
            ></TextField>
            <Flex
              gap=\\"24px\\"
              direction=\\"row\\"
              alignItems=\\"flex-start\\"
              shrink=\\"0\\"
              alignSelf=\\"stretch\\"
              position=\\"relative\\"
              padding=\\"0px 0px 0px 0px\\"
              {...getOverrideProps(overrides, \\"Frame 410\\")}
            >
              <SelectField
                width=\\"289.5px\\"
                display=\\"flex\\"
                grow=\\"1\\"
                basis=\\"289.5px\\"
                height=\\"74px\\"
                label=\\"Label\\"
                size=\\"large\\"
                variation=\\"default\\"
                {...getOverrideProps(overrides, \\"SelectFieldugk\\")}
              ></SelectField>
              <SelectField
                width=\\"289.5px\\"
                display=\\"flex\\"
                grow=\\"1\\"
                basis=\\"289.5px\\"
                height=\\"74px\\"
                label=\\"Label\\"
                size=\\"large\\"
                variation=\\"default\\"
                {...getOverrideProps(overrides, \\"SelectFieldqku\\")}
              ></SelectField>
            </Flex>
          </Flex>
        </Flex>
      </Flex>
      <Flex
        gap=\\"10px\\"
        direction=\\"row\\"
        alignItems=\\"flex-start\\"
        shrink=\\"0\\"
        height=\\"934px\\"
        position=\\"relative\\"
        padding=\\"32px 0px 32px 0px\\"
        backgroundColor=\\"rgba(255,255,255,1)\\"
        {...getOverrideProps(overrides, \\"Frame 412\\")}
      >
        <Flex
          padding=\\"0px 0px 0px 0px\\"
          width=\\"469px\\"
          height=\\"870px\\"
          shrink=\\"0\\"
          position=\\"relative\\"
          {...getOverrideProps(overrides, \\"Group 320\\")}
        >
          <View
            padding=\\"0px 0px 0px 0px\\"
            width=\\"405px\\"
            height=\\"134px\\"
            position=\\"absolute\\"
            left=\\"32px\\"
            top=\\"194px\\"
            {...getOverrideProps(overrides, \\"Group 314\\")}
          >
            <Image
              width=\\"89px\\"
              height=\\"130px\\"
              position=\\"absolute\\"
              left=\\"0px\\"
              top=\\"0px\\"
              padding=\\"0px 0px 0px 0px\\"
              {...getOverrideProps(overrides, \\"imagefpq\\")}
            ></Image>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"700\\"
              color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
              lineHeight=\\"20px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.49px\\"
              position=\\"absolute\\"
              left=\\"121px\\"
              top=\\"112px\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Order Summary\\"
              {...getOverrideProps(overrides, \\"Order Summaryogp\\")}
            ></Text>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(92.00000211596489,102.00000151991844,112.000000923872,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              position=\\"absolute\\"
              left=\\"121px\\"
              top=\\"32px\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Black\\"
              {...getOverrideProps(overrides, \\"Blackjlp\\")}
            ></Text>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              position=\\"absolute\\"
              left=\\"121px\\"
              top=\\"0px\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Basic Tee\\"
              {...getOverrideProps(overrides, \\"Basic Teebko\\")}
            ></Text>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(92.00000211596489,102.00000151991844,112.000000923872,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              position=\\"absolute\\"
              left=\\"121px\\"
              top=\\"64px\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Large\\"
              {...getOverrideProps(overrides, \\"Largeqzy\\")}
            ></Text>
            <Icon
              width=\\"24px\\"
              height=\\"24px\\"
              overflow=\\"hidden\\"
              position=\\"absolute\\"
              left=\\"381px\\"
              top=\\"0px\\"
              padding=\\"0px 0px 0px 0px\\"
              color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
              type=\\"delete\\"
              fontSize=\\"24px\\"
              pathData=\\"M5.59 10.58L1.42 6.41L0 7.82L5.59 13.41L17.59 1.41L16.18 0L5.59 10.58Z\\"
              {...getOverrideProps(overrides, \\"Iconvrz\\")}
            ></Icon>
            <SelectField
              width=\\"64px\\"
              position=\\"absolute\\"
              display=\\"flex\\"
              left=\\"341px\\"
              top=\\"104px\\"
              size=\\"small\\"
              labelHidden=\\"true\\"
              variation=\\"default\\"
              {...getOverrideProps(overrides, \\"SelectFieldglx\\")}
            ></SelectField>
          </View>
          <Divider
            width=\\"469px\\"
            position=\\"absolute\\"
            left=\\"0px\\"
            top=\\"362px\\"
            size=\\"small\\"
            orientation=\\"horizontal\\"
            {...getOverrideProps(overrides, \\"Dividerqbo\\")}
          ></Divider>
          <Divider
            width=\\"469px\\"
            position=\\"absolute\\"
            left=\\"0px\\"
            top=\\"161px\\"
            size=\\"small\\"
            orientation=\\"horizontal\\"
            {...getOverrideProps(overrides, \\"Dividerxgl\\")}
          ></Divider>
          <Divider
            width=\\"469px\\"
            position=\\"absolute\\"
            left=\\"0px\\"
            top=\\"72px\\"
            size=\\"small\\"
            orientation=\\"horizontal\\"
            {...getOverrideProps(overrides, \\"Dividerpxl\\")}
          ></Divider>
          <View
            padding=\\"0px 0px 0px 0px\\"
            width=\\"405px\\"
            height=\\"134px\\"
            position=\\"absolute\\"
            left=\\"32px\\"
            top=\\"395px\\"
            {...getOverrideProps(overrides, \\"Group 315\\")}
          >
            <Image
              width=\\"89px\\"
              height=\\"130px\\"
              position=\\"absolute\\"
              left=\\"0px\\"
              top=\\"0px\\"
              padding=\\"0px 0px 0px 0px\\"
              {...getOverrideProps(overrides, \\"imageklz\\")}
            ></Image>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"700\\"
              color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
              lineHeight=\\"20px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.49px\\"
              position=\\"absolute\\"
              left=\\"121px\\"
              top=\\"112px\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Order Summary\\"
              {...getOverrideProps(overrides, \\"Order Summaryiil\\")}
            ></Text>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(92.00000211596489,102.00000151991844,112.000000923872,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              position=\\"absolute\\"
              left=\\"121px\\"
              top=\\"32px\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Black\\"
              {...getOverrideProps(overrides, \\"Blackrig\\")}
            ></Text>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              position=\\"absolute\\"
              left=\\"121px\\"
              top=\\"0px\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Basic Tee\\"
              {...getOverrideProps(overrides, \\"Basic Teeyvl\\")}
            ></Text>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(92.00000211596489,102.00000151991844,112.000000923872,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              position=\\"absolute\\"
              left=\\"121px\\"
              top=\\"64px\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Large\\"
              {...getOverrideProps(overrides, \\"Largedkg\\")}
            ></Text>
            <Icon
              width=\\"24px\\"
              height=\\"24px\\"
              overflow=\\"hidden\\"
              position=\\"absolute\\"
              left=\\"381px\\"
              top=\\"0px\\"
              padding=\\"0px 0px 0px 0px\\"
              color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
              type=\\"delete\\"
              fontSize=\\"24px\\"
              pathData=\\"M5.59 10.58L1.42 6.41L0 7.82L5.59 13.41L17.59 1.41L16.18 0L5.59 10.58Z\\"
              {...getOverrideProps(overrides, \\"Iconzad\\")}
            ></Icon>
            <SelectField
              width=\\"64px\\"
              position=\\"absolute\\"
              display=\\"flex\\"
              left=\\"341px\\"
              top=\\"104px\\"
              size=\\"small\\"
              labelHidden=\\"true\\"
              variation=\\"default\\"
              {...getOverrideProps(overrides, \\"SelectFieldawu\\")}
            ></SelectField>
          </View>
          <Divider
            width=\\"469px\\"
            position=\\"absolute\\"
            left=\\"0px\\"
            top=\\"563px\\"
            size=\\"small\\"
            orientation=\\"horizontal\\"
            {...getOverrideProps(overrides, \\"Dividercos\\")}
          ></Divider>
          <View
            padding=\\"0px 0px 0px 0px\\"
            width=\\"405px\\"
            height=\\"24px\\"
            position=\\"absolute\\"
            left=\\"32px\\"
            top=\\"596px\\"
            {...getOverrideProps(overrides, \\"Group 316\\")}
          >
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(48.000000938773155,64.00000378489494,80.00000283122063,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              width=\\"77.75053405761719px\\"
              position=\\"absolute\\"
              left=\\"0px\\"
              top=\\"0px\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Subtotal\\"
              {...getOverrideProps(overrides, \\"Subtotal\\")}
            ></Text>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"right\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              position=\\"absolute\\"
              left=\\"340px\\"
              top=\\"0px\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"$320.00\\"
              {...getOverrideProps(overrides, \\"$320.00\\")}
            ></Text>
          </View>
          <View
            padding=\\"0px 0px 0px 0px\\"
            width=\\"405px\\"
            height=\\"24px\\"
            position=\\"absolute\\"
            left=\\"32px\\"
            top=\\"636px\\"
            {...getOverrideProps(overrides, \\"Group 317\\")}
          >
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(48.000000938773155,64.00000378489494,80.00000283122063,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              width=\\"80.14285278320312px\\"
              position=\\"absolute\\"
              left=\\"0px\\"
              top=\\"0px\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Shipping\\"
              {...getOverrideProps(overrides, \\"Shippingtjp\\")}
            ></Text>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"right\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              position=\\"absolute\\"
              left=\\"353px\\"
              top=\\"0px\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"$15.00\\"
              {...getOverrideProps(overrides, \\"$15.00\\")}
            ></Text>
          </View>
          <View
            padding=\\"0px 0px 0px 0px\\"
            width=\\"405px\\"
            height=\\"24px\\"
            position=\\"absolute\\"
            left=\\"32px\\"
            top=\\"676px\\"
            {...getOverrideProps(overrides, \\"Group 318\\")}
          >
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(48.000000938773155,64.00000378489494,80.00000283122063,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              width=\\"53.82728958129883px\\"
              position=\\"absolute\\"
              left=\\"0px\\"
              top=\\"0px\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Taxes\\"
              {...getOverrideProps(overrides, \\"Taxes\\")}
            ></Text>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"400\\"
              color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"right\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.010000000000000009px\\"
              position=\\"absolute\\"
              left=\\"350px\\"
              top=\\"0px\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"$26.80\\"
              {...getOverrideProps(overrides, \\"$26.80\\")}
            ></Text>
          </View>
          <Divider
            width=\\"405px\\"
            position=\\"absolute\\"
            left=\\"32px\\"
            top=\\"716px\\"
            size=\\"small\\"
            orientation=\\"horizontal\\"
            {...getOverrideProps(overrides, \\"Dividerelu\\")}
          ></Divider>
          <View
            padding=\\"0px 0px 0px 0px\\"
            width=\\"405px\\"
            height=\\"20px\\"
            position=\\"absolute\\"
            left=\\"32px\\"
            top=\\"733px\\"
            {...getOverrideProps(overrides, \\"Group 319\\")}
          >
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"700\\"
              color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
              lineHeight=\\"20px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.49px\\"
              width=\\"50.23880386352539px\\"
              position=\\"absolute\\"
              left=\\"0px\\"
              top=\\"0px\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Total\\"
              {...getOverrideProps(overrides, \\"Total\\")}
            ></Text>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"700\\"
              color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
              lineHeight=\\"20px\\"
              textAlign=\\"right\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              letterSpacing=\\"0.49px\\"
              position=\\"absolute\\"
              left=\\"336px\\"
              top=\\"0px\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"$361.80\\"
              {...getOverrideProps(overrides, \\"$361.80\\")}
            ></Text>
          </View>
          <Divider
            width=\\"469px\\"
            position=\\"absolute\\"
            left=\\"0px\\"
            top=\\"789px\\"
            size=\\"small\\"
            orientation=\\"horizontal\\"
            {...getOverrideProps(overrides, \\"Divideruix\\")}
          ></Divider>
          <Button
            position=\\"absolute\\"
            display=\\"flex\\"
            width=\\"405px\\"
            left=\\"32px\\"
            top=\\"822px\\"
            size=\\"large\\"
            variation=\\"primary\\"
            children=\\"Place Order\\"
            {...getOverrideProps(overrides, \\"Button\\")}
          ></Button>
          <View
            padding=\\"0px 0px 0px 0px\\"
            width=\\"405px\\"
            height=\\"24px\\"
            position=\\"absolute\\"
            left=\\"32px\\"
            top=\\"105px\\"
            {...getOverrideProps(overrides, \\"Group 313\\")}
          >
            <Icon
              width=\\"24px\\"
              height=\\"24px\\"
              overflow=\\"hidden\\"
              position=\\"absolute\\"
              left=\\"0px\\"
              top=\\"0px\\"
              padding=\\"0px 0px 0px 0px\\"
              type=\\"shopping_bag\\"
              fontSize=\\"24px\\"
              pathData=\\"M5.59 10.58L1.42 6.41L0 7.82L5.59 13.41L17.59 1.41L16.18 0L5.59 10.58Z\\"
              {...getOverrideProps(overrides, \\"Iconhpw\\")}
            ></Icon>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"700\\"
              color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              position=\\"absolute\\"
              left=\\"40px\\"
              top=\\"0px\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"Cart (2)\\"
              {...getOverrideProps(overrides, \\"Cart (2)\\")}
            ></Text>
            <Text
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              fontWeight=\\"700\\"
              color=\\"rgba(13.000000175088644,26.000000350177288,38.0000015348196,1)\\"
              lineHeight=\\"24px\\"
              textAlign=\\"right\\"
              display=\\"flex\\"
              direction=\\"column\\"
              justifyContent=\\"flex-start\\"
              position=\\"absolute\\"
              left=\\"343px\\"
              top=\\"0px\\"
              padding=\\"0px 0px 0px 0px\\"
              children=\\"$101.70\\"
              {...getOverrideProps(overrides, \\"$101.70\\")}
            ></Text>
          </View>
          <Badge
            color=\\"rgba(54.00000058114529,94.0000019967556,61.00000016391277,1)\\"
            position=\\"absolute\\"
            backgroundColor=\\"rgba(214.00000244379044,245.00000059604645,219.0000021457672,1)\\"
            display=\\"flex\\"
            width=\\"405px\\"
            left=\\"32px\\"
            top=\\"0px\\"
            fontFamily=\\"Inter\\"
            fontWeight=\\"700\\"
            fontSize=\\"16px\\"
            textAlign=\\"left\\"
            lineHeight=\\"20px\\"
            direction=\\"column\\"
            justifyContent=\\"flex-start\\"
            letterSpacing=\\"0.49px\\"
            size=\\"default\\"
            variation=\\"success\\"
            children=\\"Discount - 10% off\\"
            {...getOverrideProps(overrides, \\"Badge\\")}
          ></Badge>
        </Flex>
      </Flex>
    </Flex>
  );
}
"
`;

exports[`amplify render tests component with binding should render build property on Text 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Text, TextProps } from \\"@aws-amplify/ui-react\\";

export type TextWithDataBindingProps = React.PropsWithChildren<
  Partial<TextProps> & {
    textValue?: String;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function TextWithDataBinding(
  props: TextWithDataBindingProps
): React.ReactElement {
  const { textValue, overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Text
      color=\\"#ff0000\\"
      width=\\"20px\\"
      children={textValue}
      {...rest}
      {...getOverrideProps(overrides, \\"TextWithDataBinding\\")}
    ></Text>
  );
}
"
`;

exports[`amplify render tests component with binding should render slot binding 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, View } from \\"@aws-amplify/ui-react\\";

export type ComponentWithSlotBindingProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    mySlot?: React.ReactNode;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComponentWithSlotBinding(
  props: ComponentWithSlotBindingProps
): React.ReactElement {
  const { mySlot, overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      {...rest}
      {...getOverrideProps(overrides, \\"ComponentWithSlotBinding\\")}
    >
      <View
        children={mySlot}
        {...getOverrideProps(overrides, \\"Rectangle\\")}
      ></View>
    </Flex>
  );
}
"
`;

exports[`amplify render tests component with data binding should add model imports 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User } from \\"../models\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type ComponentWithDataBindingProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    width?: Number;
    isDisabled?: Boolean;
    buttonUser?: User;
    buttonColor?: String;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ComponentWithDataBinding(
  props: ComponentWithDataBindingProps
): React.ReactElement {
  const { width, isDisabled, buttonUser, buttonColor, overrides, ...rest } =
    props;
  return (
    /* @ts-ignore: TS2322 */
    <Button
      labelWidth={width}
      disabled={isDisabled}
      children={buttonUser?.username || \\"hspain@gmail.com\\"}
      {...rest}
      {...getOverrideProps(overrides, \\"ComponentWithDataBinding\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests component with data binding should not have useDataStoreBinding when there is no predicate 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { UntitledModel } from \\"../models\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, Text } from \\"@aws-amplify/ui-react\\";

export type SectionHeadingProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    newProp6fd1?: UntitledModel;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function SectionHeading(
  props: SectionHeadingProps
): React.ReactElement {
  const { newProp6fd1, overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      padding=\\"0px 0px 10px 0px\\"
      backgroundColor=\\"rgb(255,255,255)\\"
      direction=\\"column\\"
      {...rest}
      {...getOverrideProps(overrides, \\"SectionHeading\\")}
    >
      <Flex
        tes={newProp6fd1.untitledfield}
        {...getOverrideProps(overrides, \\"Heading\\")}
      >
        <Text
          fontFamily=\\"Inter\\"
          color=\\"rgb(15.539060980081558,29.73937589675188,47.8125)\\"
          textAlign=\\"left\\"
          fontSize=\\"48px\\"
          lineHeight=\\"48px\\"
          fontWeight=\\"300\\"
          children=\\"Heading 2\\"
          {...getOverrideProps(overrides, \\"Heading 2\\")}
        ></Text>
      </Flex>
      <Text
        fontFamily=\\"Inter\\"
        color=\\"rgb(0,0,0)\\"
        textAlign=\\"left\\"
        fontSize=\\"32px\\"
        lineHeight=\\"48px\\"
        fontWeight=\\"400\\"
        children=\\"subtitle\\"
        {...getOverrideProps(overrides, \\"subtitle\\")}
      ></Text>
    </Flex>
  );
}
"
`;

exports[`amplify render tests component with data binding should render with data binding in child elements 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps, Text } from \\"@aws-amplify/ui-react\\";

export type ChildComponentWithDataBindingProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    textValue?: String;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ChildComponentWithDataBinding(
  props: ChildComponentWithDataBindingProps
): React.ReactElement {
  const { textValue, overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Button
      {...rest}
      {...getOverrideProps(overrides, \\"ChildComponentWithDataBinding\\")}
    >
      <Text
        children={textValue}
        {...getOverrideProps(overrides, \\"TextWithDataBinding\\")}
      ></Text>
    </Button>
  );
}
"
`;

exports[`amplify render tests component with variants and not override children prop should render variants with options provided, and not override children prop 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  Variant,
  getOverrideProps,
  getOverridesFromVariants,
  mergeVariantsAndOverrides,
} from \\"@aws-amplify/ui-react/internal\\";
import { View, ViewProps, useBreakpointValue } from \\"@aws-amplify/ui-react\\";

export type ViewPrimitiveProps = React.PropsWithChildren<
  Partial<ViewProps> & {
    variant?: \\"primary\\";
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ViewPrimitive(
  props: ViewPrimitiveProps
): React.ReactElement {
  const { overrides: overridesProp, ...restProp } = props;
  const variants: Variant[] = [
    {
      variantValues: { variant: \\"primary\\" },
      overrides: {
        ViewPrimitive: { label: \\"componentWithVariantsWithLabelProp\\" },
      },
    },
  ];
  const breakpointHook = useBreakpointValue({
    base: \\"base\\",
    large: \\"large\\",
    medium: \\"medium\\",
    small: \\"small\\",
    xl: \\"xl\\",
    xxl: \\"xxl\\",
  });
  const rest = { style: { transition: \\"all 0.25s\\" }, ...restProp };
  const overrides = mergeVariantsAndOverrides(
    getOverridesFromVariants(variants, {
      breakpoint: breakpointHook,
      ...props,
    }),
    overridesProp || {}
  );
  return (
    /* @ts-ignore: TS2322 */
    <View
      children=\\"Nice view! 🏔\\"
      {...rest}
      {...getOverrideProps(overrides, \\"ViewPrimitive\\")}
    ></View>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests component with variants should render object variants 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  Variant,
  getOverrideProps,
  getOverridesFromVariants,
  mergeVariantsAndOverrides,
} from \\"@aws-amplify/ui-react/internal\\";
import { Icon, IconProps, useBreakpointValue } from \\"@aws-amplify/ui-react\\";

export type IconVariantsProps = React.PropsWithChildren<
  Partial<IconProps> & {
    variant?: \\"primary\\" | \\"secondary\\";
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function IconVariants(
  props: IconVariantsProps
): React.ReactElement {
  const { overrides: overridesProp, ...restProp } = props;
  const variants: Variant[] = [
    {
      variantValues: { variant: \\"primary\\" },
      overrides: {
        IconVariants: {
          paths: [
            {
              d: \\"M18 6V4h2V2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h14v-2h-4.03c1.23-.91 2.03-2.36 2.03-4v-5H8v5c0 1.64.81 3.09 2.03 4H6V4h2v2c0 .55.45 1 1 1h8c.55 0 1-.45 1-1z\\",
              fill: \\"black\\",
            },
          ],
        },
      },
    },
    {
      variantValues: { variant: \\"secondary\\" },
      overrides: {
        IconVariants: {
          paths: [
            {
              d: \\"M18 6V4h2V2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h14v-2h-4.03c1.23-.91 2.03-2.36 2.03-4v-5H8v5c0 1.64.81 3.09 2.03 4H6V4h2v2c0 .55.45 1 1 1h8c.55 0 1-.45 1-1z\\",
              fill: \\"black\\",
            },
            {
              d: \\"M18 6V4h2V2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h14v-2h-4.03c1.23-.91 2.03-2.36 2.03-4v-5H8v5c0 1.64.81 3.09 2.03 4H6V4h2v2c0 .55.45 1 1 1h8c.55 0 1-.45 1-1z\\",
              fill: \\"white\\",
            },
          ],
        },
      },
    },
  ];
  const breakpointHook = useBreakpointValue({
    base: \\"base\\",
    large: \\"large\\",
    medium: \\"medium\\",
    small: \\"small\\",
    xl: \\"xl\\",
    xxl: \\"xxl\\",
  });
  const rest = { style: { transition: \\"all 0.25s\\" }, ...restProp };
  const overrides = mergeVariantsAndOverrides(
    getOverridesFromVariants(variants, {
      breakpoint: breakpointHook,
      ...props,
    }),
    overridesProp || {}
  );
  return (
    /* @ts-ignore: TS2322 */
    <Icon {...rest} {...getOverrideProps(overrides, \\"IconVariants\\")}></Icon>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests component with variants should render variants with options provided 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  Variant,
  getOverrideProps,
  getOverridesFromVariants,
  mergeVariantsAndOverrides,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps, useBreakpointValue } from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    variant?: \\"primary\\" | \\"secondary\\";
    size?: \\"large\\";
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CustomButton(
  props: CustomButtonProps
): React.ReactElement {
  const { overrides: overridesProp, ...restProp } = props;
  const variants: Variant[] = [
    {
      variantValues: { variant: \\"primary\\" },
      overrides: { CustomButton: { fontSize: \\"12px\\" } },
    },
    {
      variantValues: { variant: \\"secondary\\" },
      overrides: { CustomButton: { fontSize: \\"40px\\" } },
    },
    {
      variantValues: { variant: \\"primary\\", size: \\"large\\" },
      overrides: { CustomButton: { width: \\"500\\" } },
    },
  ];
  const breakpointHook = useBreakpointValue({
    base: \\"base\\",
    large: \\"large\\",
    medium: \\"medium\\",
    small: \\"small\\",
    xl: \\"xl\\",
    xxl: \\"xxl\\",
  });
  const rest = { style: { transition: \\"all 0.25s\\" }, ...restProp };
  const overrides = mergeVariantsAndOverrides(
    getOverridesFromVariants(variants, {
      breakpoint: breakpointHook,
      ...props,
    }),
    overridesProp || {}
  );
  return (
    /* @ts-ignore: TS2322 */
    <Button {...rest} {...getOverrideProps(overrides, \\"CustomButton\\")}></Button>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests component with variants with mapped children prop should render variants with options provided, and mapped children prop 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  Variant,
  getOverrideProps,
  getOverridesFromVariants,
  mergeVariantsAndOverrides,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps, useBreakpointValue } from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    variant?: \\"primary\\" | \\"secondary\\";
    size?: \\"large\\";
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CustomButton(
  props: CustomButtonProps
): React.ReactElement {
  const { overrides: overridesProp, ...restProp } = props;
  const variants: Variant[] = [
    {
      variantValues: { variant: \\"primary\\" },
      overrides: {
        CustomButton: {
          label: \\"componentWithVariantsWithMappedChildrenProp\\",
          children: \\"componentWithVariantsWithChildrenProp\\",
          fontSize: \\"12px\\",
        },
      },
    },
    {
      variantValues: { variant: \\"secondary\\" },
      overrides: { CustomButton: { fontSize: \\"40px\\" } },
    },
    {
      variantValues: { variant: \\"primary\\", size: \\"large\\" },
      overrides: {
        CustomButton: {
          width: \\"500\\",
          children: \\"componentWithVariantsWithMappedChildrenProp\\",
        },
      },
    },
  ];
  const breakpointHook = useBreakpointValue({
    base: \\"base\\",
    large: \\"large\\",
    medium: \\"medium\\",
    small: \\"small\\",
    xl: \\"xl\\",
    xxl: \\"xxl\\",
  });
  const rest = { style: { transition: \\"all 0.25s\\" }, ...restProp };
  const overrides = mergeVariantsAndOverrides(
    getOverridesFromVariants(variants, {
      breakpoint: breakpointHook,
      ...props,
    }),
    overridesProp || {}
  );
  return (
    /* @ts-ignore: TS2322 */
    <Button {...rest} {...getOverrideProps(overrides, \\"CustomButton\\")}></Button>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests concat and conditional transform should render child component with data bound concatenation 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps, Text } from \\"@aws-amplify/ui-react\\";

export type ChildComponentWithDataBoundConcatenationProps =
  React.PropsWithChildren<
    Partial<ButtonProps> & {
      textValue?: String;
    } & {
      overrides?: EscapeHatchProps | undefined | null;
    }
  >;
export default function ChildComponentWithDataBoundConcatenation(
  props: ChildComponentWithDataBoundConcatenationProps
): React.ReactElement {
  const { textValue, overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Button
      {...rest}
      {...getOverrideProps(
        overrides,
        \\"ChildComponentWithDataBoundConcatenation\\"
      )}
    >
      <Text
        children={\`\${buttonUser?.firstname || \\"Harrison\\"}\${\\" \\"}\${
          buttonUser?.lastname || \\"Spain\\"
        }\`}
        {...getOverrideProps(overrides, \\"TextWithConcatenation\\")}
      ></Text>
    </Button>
  );
}
"
`;

exports[`amplify render tests concat and conditional transform should render child component with static concatenation 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps, Text } from \\"@aws-amplify/ui-react\\";

export type ChildComponentWithStaticConcatenationProps =
  React.PropsWithChildren<
    Partial<ButtonProps> & {
      overrides?: EscapeHatchProps | undefined | null;
    }
  >;
export default function ChildComponentWithStaticConcatenation(
  props: ChildComponentWithStaticConcatenationProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Button
      {...rest}
      {...getOverrideProps(overrides, \\"ChildComponentWithStaticConcatenation\\")}
    >
      <Text
        children={\`\${\\"Concatenate\\"}\${\\" \\"}\${\\"Me!\\"}\`}
        {...getOverrideProps(overrides, \\"TextWithConcatenation\\")}
      ></Text>
    </Button>
  );
}
"
`;

exports[`amplify render tests concat and conditional transform should render component with concatenation prop 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User } from \\"../models\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    width?: Number;
    buttonUser?: User;
    buttonColor?: String;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CustomButton(
  props: CustomButtonProps
): React.ReactElement {
  const { width, buttonUser, buttonColor, overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Button
      labelWidth={width}
      children={\`\${buttonUser?.firstname || \\"Harrison\\"}\${\\" \\"}\${
        buttonUser?.lastname || \\"Spain\\"
      }\`}
      {...rest}
      {...getOverrideProps(overrides, \\"CustomButton\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests concat and conditional transform should render component with conditional data binding prop 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { User } from \\"../models\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    width?: Number;
    buttonUser?: User;
    buttonColor?: String;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CustomButton(
  props: CustomButtonProps
): React.ReactElement {
  const { width, buttonUser, buttonColor, overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Button
      labelWidth={width}
      disabled={
        buttonUser?.isLoggedIn && buttonUser?.isLoggedIn == true ? true : false
      }
      prompt={
        buttonUser?.age && buttonUser?.age > 18
          ? \`\${buttonUser?.firstname}\${\\", cast your vote.\\"}\`
          : \\"Sorry you cannot vote\\"
      }
      backgroundColor={
        buttonUser?.isLoggedIn && buttonUser?.isLoggedIn == true
          ? buttonUser?.loggedInColor
          : buttonUser?.loggedOutColor
      }
      children={\`\${buttonUser?.firstname || \\"Harrison\\"}\${\\" \\"}\${
        buttonUser?.lastname || \\"Spain\\"
      }\`}
      {...rest}
      {...getOverrideProps(overrides, \\"CustomButton\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests concat and conditional transform should render component with conditional data binding prop from a bug 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import { Student } from \\"../models\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, Flex, FlexProps, Text } from \\"@aws-amplify/ui-react\\";

export type ConditionalComponentWithDataBindingProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    student?: Student;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ConditionalComponentWithDataBinding(
  props: ConditionalComponentWithDataBindingProps
): React.ReactElement {
  const { student, overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      {...rest}
      {...getOverrideProps(overrides, \\"ConditionalComponentWithDataBinding\\")}
    >
      <Text
        value={
          student?.id && student?.id == \\"idstringuserinput\\"
            ? student?.createdAt
            : student?.id
        }
        children={
          student?.id && student?.id == \\"idstringuserinput\\"
            ? student?.createdAt
            : student?.id
        }
        {...getOverrideProps(overrides, \\"Placeholder text\\")}
      ></Text>
      <Button
        value={
          student?.id && student?.id == \\"idstringuserinput\\"
            ? student?.createdAt
            : student?.id
        }
        {...getOverrideProps(overrides, \\"Placeholder Button\\")}
      ></Button>
    </Flex>
  );
}
"
`;

exports[`amplify render tests concat and conditional transform should render component with conditional simple binding prop 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, ButtonProps } from \\"@aws-amplify/ui-react\\";

export type CustomButtonProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    buttonColor?: String;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CustomButton(
  props: CustomButtonProps
): React.ReactElement {
  const { buttonColor, overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Button
      disabled={buttonColor && buttonColor == \\"red\\" ? true : false}
      {...rest}
      {...getOverrideProps(overrides, \\"CustomButton\\")}
    ></Button>
  );
}
"
`;

exports[`amplify render tests custom components custom children should render component with custom children 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import CustomButton from \\"./CustomButton\\";
import MyView, { MyViewProps } from \\"./MyView\\";

export type CustomChildrenProps = React.PropsWithChildren<
  Partial<MyViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CustomChildren(
  props: CustomChildrenProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <MyView {...rest} {...getOverrideProps(overrides, \\"CustomChildren\\")}>
      <CustomButton
        {...getOverrideProps(overrides, \\"MyCustomButton\\")}
      ></CustomButton>
    </MyView>
  );
}
"
`;

exports[`amplify render tests custom components custom children should render component with custom children with ES5 1`] = `
"var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
var __rest =
  (this && this.__rest) ||
  function (s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (
          e.indexOf(p[i]) < 0 &&
          Object.prototype.propertyIsEnumerable.call(s, p[i])
        )
          t[p[i]] = s[p[i]];
      }
    return t;
  };
/* eslint-disable */
import React from \\"react\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import CustomButton from \\"./CustomButton\\";
import MyView from \\"./MyView\\";
export default function CustomChildren(props) {
  var overrides = props.overrides,
    rest = __rest(props, [\\"overrides\\"]);
  return React.createElement(
    MyView,
    __assign({}, rest, getOverrideProps(overrides, \\"CustomChildren\\")),
    React.createElement(
      CustomButton,
      __assign({}, getOverrideProps(overrides, \\"MyCustomButton\\"))
    )
  );
}
"
`;

exports[`amplify render tests custom components custom children should render declarations 1`] = `
"import React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { MyViewProps } from \\"./MyView\\";
export declare type CustomChildrenProps = React.PropsWithChildren<Partial<MyViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
}>;
export default function CustomChildren(props: CustomChildrenProps): React.ReactElement;
"
`;

exports[`amplify render tests custom components custom parent and children should render component with custom parent and children 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import CustomButton from \\"./CustomButton\\";
import ViewTest, { ViewTestProps } from \\"./ViewTest\\";

export type CustomParentAndChildrenProps = React.PropsWithChildren<
  Partial<ViewTestProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CustomParentAndChildren(
  props: CustomParentAndChildrenProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <ViewTest
      {...rest}
      {...getOverrideProps(overrides, \\"CustomParentAndChildren\\")}
    >
      <CustomButton
        {...getOverrideProps(overrides, \\"MyCustomButton\\")}
      ></CustomButton>
    </ViewTest>
  );
}
"
`;

exports[`amplify render tests custom components custom parent and children should render component with custom parent and children with ES5 1`] = `
"var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
var __rest =
  (this && this.__rest) ||
  function (s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (
          e.indexOf(p[i]) < 0 &&
          Object.prototype.propertyIsEnumerable.call(s, p[i])
        )
          t[p[i]] = s[p[i]];
      }
    return t;
  };
/* eslint-disable */
import React from \\"react\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import CustomButton from \\"./CustomButton\\";
import ViewTest from \\"./ViewTest\\";
export default function CustomParentAndChildren(props) {
  var overrides = props.overrides,
    rest = __rest(props, [\\"overrides\\"]);
  return React.createElement(
    ViewTest,
    __assign({}, rest, getOverrideProps(overrides, \\"CustomParentAndChildren\\")),
    React.createElement(
      CustomButton,
      __assign({}, getOverrideProps(overrides, \\"MyCustomButton\\"))
    )
  );
}
"
`;

exports[`amplify render tests custom components custom parent and children should render declarations 1`] = `
"import React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { ViewTestProps } from \\"./ViewTest\\";
export declare type CustomParentAndChildrenProps = React.PropsWithChildren<Partial<ViewTestProps> & {
    overrides?: EscapeHatchProps | undefined | null;
}>;
export default function CustomParentAndChildren(props: CustomParentAndChildrenProps): React.ReactElement;
"
`;

exports[`amplify render tests custom components custom parent should render component 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button } from \\"@aws-amplify/ui-react\\";
import MyView, { MyViewProps } from \\"./MyView\\";

export type CustomParentProps = React.PropsWithChildren<
  Partial<MyViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CustomParent(
  props: CustomParentProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <MyView {...rest} {...getOverrideProps(overrides, \\"CustomParent\\")}>
      <Button {...getOverrideProps(overrides, \\"MyButton\\")}></Button>
    </MyView>
  );
}
"
`;

exports[`amplify render tests custom components custom parent should render component with ES5 1`] = `
"var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
var __rest =
  (this && this.__rest) ||
  function (s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (
          e.indexOf(p[i]) < 0 &&
          Object.prototype.propertyIsEnumerable.call(s, p[i])
        )
          t[p[i]] = s[p[i]];
      }
    return t;
  };
/* eslint-disable */
import React from \\"react\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import { Button } from \\"@aws-amplify/ui-react\\";
import MyView from \\"./MyView\\";
export default function CustomParent(props) {
  var overrides = props.overrides,
    rest = __rest(props, [\\"overrides\\"]);
  return React.createElement(
    MyView,
    __assign({}, rest, getOverrideProps(overrides, \\"CustomParent\\")),
    React.createElement(
      Button,
      __assign({}, getOverrideProps(overrides, \\"MyButton\\"))
    )
  );
}
"
`;

exports[`amplify render tests custom components custom parent should render declarations 1`] = `
"import React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { MyViewProps } from \\"./MyView\\";
export declare type CustomParentProps = React.PropsWithChildren<Partial<MyViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
}>;
export default function CustomParent(props: CustomParentProps): React.ReactElement;
"
`;

exports[`amplify render tests custom render config should render ES5 1`] = `
"var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
var __rest =
  (this && this.__rest) ||
  function (s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (
          e.indexOf(p[i]) < 0 &&
          Object.prototype.propertyIsEnumerable.call(s, p[i])
        )
          t[p[i]] = s[p[i]];
      }
    return t;
  };
/* eslint-disable */
import React from \\"react\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import { Button, View } from \\"@aws-amplify/ui-react\\";
export default function ViewWithButton(props) {
  var overrides = props.overrides,
    rest = __rest(props, [\\"overrides\\"]);
  return React.createElement(
    View,
    __assign({}, rest, getOverrideProps(overrides, \\"ViewWithButton\\")),
    React.createElement(
      Button,
      __assign(
        { color: \\"#ff0000\\", width: \\"20px\\" },
        getOverrideProps(overrides, \\"MyButton\\")
      )
    )
  );
}
"
`;

exports[`amplify render tests custom render config should render JSX 1`] = `
"var __rest =
  (this && this.__rest) ||
  function (s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (
          e.indexOf(p[i]) < 0 &&
          Object.prototype.propertyIsEnumerable.call(s, p[i])
        )
          t[p[i]] = s[p[i]];
      }
    return t;
  };
/* eslint-disable */
import React from \\"react\\";
import { getOverrideProps } from \\"@aws-amplify/ui-react/internal\\";
import { Button, View } from \\"@aws-amplify/ui-react\\";
export default function ViewWithButton(props) {
  const { overrides } = props,
    rest = __rest(props, [\\"overrides\\"]);
  return (
    <View {...rest} {...getOverrideProps(overrides, \\"ViewWithButton\\")}>
      <Button
        color=\\"#ff0000\\"
        width=\\"20px\\"
        {...getOverrideProps(overrides, \\"MyButton\\")}
      ></Button>
    </View>
  );
}
"
`;

exports[`amplify render tests custom render config should render common JS 1`] = `
"\\"use strict\\";
var __rest =
  (this && this.__rest) ||
  function (s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (
          e.indexOf(p[i]) < 0 &&
          Object.prototype.propertyIsEnumerable.call(s, p[i])
        )
          t[p[i]] = s[p[i]];
      }
    return t;
  };
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, \\"__esModule\\", { value: true });
/* eslint-disable */
const react_1 = __importDefault(require(\\"react\\"));
const internal_1 = require(\\"@aws-amplify/ui-react/internal\\");
const ui_react_1 = require(\\"@aws-amplify/ui-react\\");
function ViewWithButton(props) {
  const { overrides } = props,
    rest = __rest(props, [\\"overrides\\"]);
  return react_1.default.createElement(
    ui_react_1.View,
    Object.assign(
      {},
      rest,
      (0, internal_1.getOverrideProps)(overrides, \\"ViewWithButton\\")
    ),
    react_1.default.createElement(
      ui_react_1.Button,
      Object.assign(
        { color: \\"#ff0000\\", width: \\"20px\\" },
        (0, internal_1.getOverrideProps)(overrides, \\"MyButton\\")
      )
    )
  );
}
exports.default = ViewWithButton;
"
`;

exports[`amplify render tests declarations should render declarations 1`] = `
"import React from \\"react\\";
import { EscapeHatchProps } from \\"@aws-amplify/ui-react/internal\\";
import { FlexProps } from \\"@aws-amplify/ui-react\\";
export declare type ProfileProps = React.PropsWithChildren<Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
}>;
export default function Profile(props: ProfileProps): React.ReactElement;
"
`;

exports[`amplify render tests default value should render bound default value 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Text, TextProps } from \\"@aws-amplify/ui-react\\";

export type BoundDefaultValueProps = React.PropsWithChildren<
  Partial<TextProps> & {
    label?: String;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function BoundDefaultValue(
  props: BoundDefaultValueProps
): React.ReactElement {
  const { label, overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Text
      children={label || \\"Bound Default\\"}
      {...rest}
      {...getOverrideProps(overrides, \\"BoundDefaultValue\\")}
    ></Text>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests default value should render collection default value 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import { User } from \\"../models\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useDataStoreBinding,
} from \\"@aws-amplify/ui-react/internal\\";
import { Collection, CollectionProps, Text } from \\"@aws-amplify/ui-react\\";
import { MyTextProps } from \\"./MyText\\";

export type CollectionDefaultValueProps = React.PropsWithChildren<
  Partial<CollectionProps<any>> & {
    items?: any[];
    overrideItems?: (collectionItem: {
      item: any;
      index: number;
    }) => MyTextProps;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CollectionDefaultValue(
  props: CollectionDefaultValueProps
): React.ReactElement {
  const { items, overrideItems, overrides, ...rest } = props;
  const userDataStore = useDataStoreBinding({
    type: \\"collection\\",
    model: User,
  }).items;
  const user = items !== undefined ? items : userDataStore;
  return (
    /* @ts-ignore: TS2322 */
    <Collection
      items={user || []}
      {...rest}
      {...getOverrideProps(overrides, \\"CollectionDefaultValue\\")}
    >
      {(item, index) => (
        <Text
          children={item.username || \\"Collection Default Value\\"}
          key={item.id}
          {...(overrideItems && overrideItems({ item, index }))}
        ></Text>
      )}
    </Collection>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests default value should render simple and bound default value 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Text, TextProps } from \\"@aws-amplify/ui-react\\";

export type SimpleAndBoundDefaultValueProps = React.PropsWithChildren<
  Partial<TextProps> & {
    label?: String;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function SimpleAndBoundDefaultValue(
  props: SimpleAndBoundDefaultValueProps
): React.ReactElement {
  const { label = \\"Simple Double Default\\", overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Text
      children={label || \\"Bound Double Default\\"}
      {...rest}
      {...getOverrideProps(overrides, \\"SimpleAndBoundDefaultValue\\")}
    ></Text>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests default value should render simple default value 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Text, TextProps } from \\"@aws-amplify/ui-react\\";

export type SimplePropertyBindingDefaultValueProps = React.PropsWithChildren<
  Partial<TextProps> & {
    label?: String;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function SimplePropertyBindingDefaultValue(
  props: SimplePropertyBindingDefaultValueProps
): React.ReactElement {
  const { label = \\"Default Binding Property\\", overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Text
      children={label}
      {...rest}
      {...getOverrideProps(overrides, \\"SimplePropertyBindingDefaultValue\\")}
    ></Text>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests icon-indices does not return negative indices for icons 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, Icon, Image, Text } from \\"@aws-amplify/ui-react\\";

export type SocialAProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function SocialA(props: SocialAProps): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      width=\\"960px\\"
      padding=\\"24px 24px 24px 24px\\"
      backgroundColor=\\"rgba(255,255,255,1)\\"
      position=\\"relative\\"
      gap=\\"16px\\"
      direction=\\"column\\"
      {...rest}
      {...getOverrideProps(overrides, \\"SocialA\\")}
    >
      <Flex
        padding=\\"0px 0px 0px 0px\\"
        alignSelf=\\"stretch\\"
        alignItems=\\"flex-start\\"
        shrink=\\"0\\"
        gap=\\"40px\\"
        position=\\"relative\\"
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"Body\\")}
      >
        <Flex
          padding=\\"0px 0px 0px 0px\\"
          grow=\\"1\\"
          gap=\\"16px\\"
          width=\\"712px\\"
          position=\\"relative\\"
          basis=\\"712px\\"
          direction=\\"column\\"
          height=\\"344px\\"
          {...getOverrideProps(overrides, \\"Text\\")}
        >
          <Flex
            padding=\\"0px 0px 0px 0px\\"
            alignSelf=\\"stretch\\"
            position=\\"relative\\"
            shrink=\\"0\\"
            gap=\\"16px\\"
            direction=\\"column\\"
            {...getOverrideProps(overrides, \\"Headline\\")}
          >
            <Text
              padding=\\"0px 0px 0px 0px\\"
              alignSelf=\\"stretch\\"
              color=\\"rgba(0,0,0,1)\\"
              textAlign=\\"left\\"
              shrink=\\"0\\"
              display=\\"flex\\"
              justifyContent=\\"flex-start\\"
              fontFamily=\\"Inter\\"
              width=\\"712px\\"
              fontSize=\\"32px\\"
              lineHeight=\\"40px\\"
              position=\\"relative\\"
              fontWeight=\\"700\\"
              direction=\\"column\\"
              children=\\"New Amplify Studio gives designers the ability to export UI to React code\\"
              {...getOverrideProps(
                overrides,
                \\"New Amplify Studio gives designers the ability to export UI to React code\\"
              )}
            ></Text>
            <Flex
              padding=\\"0px 0px 0px 0px\\"
              alignSelf=\\"stretch\\"
              alignItems=\\"flex-start\\"
              shrink=\\"0\\"
              gap=\\"16px\\"
              position=\\"relative\\"
              direction=\\"row\\"
              {...getOverrideProps(overrides, \\"Frame\\")}
            >
              <Text
                padding=\\"0px 0px 0px 0px\\"
                color=\\"rgba(128.0000075697899,128.0000075697899,128.0000075697899,1)\\"
                textAlign=\\"left\\"
                shrink=\\"0\\"
                display=\\"flex\\"
                letterSpacing=\\"0.010000000000000009px\\"
                justifyContent=\\"flex-start\\"
                fontFamily=\\"Inter\\"
                fontSize=\\"16px\\"
                lineHeight=\\"24px\\"
                position=\\"relative\\"
                fontWeight=\\"400\\"
                direction=\\"column\\"
                children=\\"Nikhil S\\"
                {...getOverrideProps(overrides, \\"Nikhil S\\")}
              ></Text>
              <Text
                padding=\\"0px 0px 0px 0px\\"
                color=\\"rgba(128.0000075697899,128.0000075697899,128.0000075697899,1)\\"
                textAlign=\\"left\\"
                shrink=\\"0\\"
                display=\\"flex\\"
                letterSpacing=\\"0.010000000000000009px\\"
                justifyContent=\\"flex-start\\"
                fontFamily=\\"Inter\\"
                width=\\"1396px\\"
                fontSize=\\"16px\\"
                lineHeight=\\"24px\\"
                position=\\"relative\\"
                fontWeight=\\"400\\"
                direction=\\"column\\"
                children=\\"2nd December 2021\\"
                {...getOverrideProps(overrides, \\"2nd December 2021\\")}
              ></Text>
            </Flex>
          </Flex>
          <Flex
            padding=\\"0px 0px 0px 0px\\"
            alignSelf=\\"stretch\\"
            alignItems=\\"flex-start\\"
            shrink=\\"0\\"
            gap=\\"16px\\"
            position=\\"relative\\"
            direction=\\"row\\"
            {...getOverrideProps(overrides, \\"Article\\")}
          >
            <Icon
              padding=\\"0px 0px 0px 0px\\"
              overflow=\\"hidden\\"
              color=\\"rgba(207.00000286102295,77.00001060962677,193.99995803833008,1)\\"
              shrink=\\"0\\"
              width=\\"24px\\"
              fontSize=\\"24px\\"
              position=\\"relative\\"
              type=\\"arrow_forward\\"
              height=\\"24px\\"
              pathData=\\"M5.59 10.58L1.42 6.41L0 7.82L5.59 13.41L17.59 1.41L16.18 0L5.59 10.58Z\\"
              {...getOverrideProps(overrides, \\"Iconynp\\")}
            ></Icon>
            <Text
              padding=\\"0px 0px 0px 0px\\"
              grow=\\"1\\"
              color=\\"rgba(0,0,0,1)\\"
              textAlign=\\"left\\"
              display=\\"flex\\"
              basis=\\"672px\\"
              justifyContent=\\"flex-start\\"
              fontFamily=\\"Inter\\"
              width=\\"672px\\"
              fontSize=\\"16px\\"
              lineHeight=\\"24px\\"
              position=\\"relative\\"
              fontWeight=\\"400\\"
              direction=\\"column\\"
              children=\\"AWS Amplify Studio is a visual development environment for building full-stack web and mobile apps that grows with your business. Studio builds on existing backend building capabilities in AWS Amplify, allowing you to build your UI faster with a set of ready-to-use UI components that are editable in Figma. With Studio, you can quickly build an entire web app, front-to-back, with minimal coding, while still maintaining full control over your app design and behavior through code. Ship faster, scale effortlessly, and delight every user.\\"
              {...getOverrideProps(
                overrides,
                \\"AWS Amplify Studio is a visual development environment for building full-stack web and mobile apps that grows with your business. Studio builds on existing backend building capabilities in AWS Amplify, allowing you to build your UI faster with a set of ready-to-use UI components that are editable in Figma. With Studio, you can quickly build an entire web app, front-to-back, with minimal coding, while still maintaining full control over your app design and behavior through code. Ship faster, scale effortlessly, and delight every user.\\"
              )}
            ></Text>
          </Flex>
          <Flex
            padding=\\"0px 0px 0px 0px\\"
            alignItems=\\"flex-start\\"
            shrink=\\"0\\"
            gap=\\"16px\\"
            width=\\"165px\\"
            position=\\"relative\\"
            direction=\\"row\\"
            {...getOverrideProps(overrides, \\"Shareakz\\")}
          >
            <Text
              padding=\\"0px 0px 0px 0px\\"
              color=\\"rgba(128.0000075697899,128.0000075697899,128.0000075697899,1)\\"
              textAlign=\\"left\\"
              shrink=\\"0\\"
              display=\\"flex\\"
              letterSpacing=\\"0.010000000000000009px\\"
              justifyContent=\\"flex-start\\"
              fontFamily=\\"Inter\\"
              fontSize=\\"16px\\"
              lineHeight=\\"24px\\"
              position=\\"relative\\"
              fontWeight=\\"400\\"
              direction=\\"column\\"
              children=\\"Share\\"
              {...getOverrideProps(overrides, \\"Sharedgc\\")}
            ></Text>
            <Icon
              padding=\\"0px 0px 0px 0px\\"
              overflow=\\"hidden\\"
              color=\\"rgba(0,0,0,1)\\"
              shrink=\\"0\\"
              width=\\"24px\\"
              fontSize=\\"24px\\"
              position=\\"relative\\"
              type=\\"bookmark_border\\"
              height=\\"24px\\"
              pathData=\\"M5.59 10.58L1.42 6.41L0 7.82L5.59 13.41L17.59 1.41L16.18 0L5.59 10.58Z\\"
              {...getOverrideProps(overrides, \\"Iconsrv\\")}
            ></Icon>
            <Icon
              padding=\\"0px 0px 0px 0px\\"
              overflow=\\"hidden\\"
              color=\\"rgba(0,0,0,1)\\"
              shrink=\\"0\\"
              width=\\"24px\\"
              fontSize=\\"24px\\"
              position=\\"relative\\"
              type=\\"share\\"
              height=\\"24px\\"
              pathData=\\"M5.59 10.58L1.42 6.41L0 7.82L5.59 13.41L17.59 1.41L16.18 0L5.59 10.58Z\\"
              {...getOverrideProps(overrides, \\"Iconwdz\\")}
            ></Icon>
            <Icon
              padding=\\"0px 0px 0px 0px\\"
              overflow=\\"hidden\\"
              color=\\"rgba(0,0,0,1)\\"
              shrink=\\"0\\"
              width=\\"24px\\"
              fontSize=\\"24px\\"
              position=\\"relative\\"
              type=\\"more_vert\\"
              height=\\"24px\\"
              pathData=\\"M5.59 10.58L1.42 6.41L0 7.82L5.59 13.41L17.59 1.41L16.18 0L5.59 10.58Z\\"
              {...getOverrideProps(overrides, \\"Iconxpr\\")}
            ></Icon>
          </Flex>
        </Flex>
        <Image
          width=\\"160px\\"
          padding=\\"0px 0px 0px 0px\\"
          position=\\"relative\\"
          borderRadius=\\"16px\\"
          shrink=\\"0\\"
          height=\\"160px\\"
          {...getOverrideProps(overrides, \\"image\\")}
        ></Image>
      </Flex>
      <Flex
        padding=\\"0px 0px 0px 0px\\"
        alignSelf=\\"stretch\\"
        alignItems=\\"flex-start\\"
        shrink=\\"0\\"
        gap=\\"16px\\"
        position=\\"relative\\"
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"Read moreudv\\")}
      >
        <Icon
          padding=\\"0px 0px 0px 0px\\"
          overflow=\\"hidden\\"
          color=\\"rgba(0,0,0,1)\\"
          shrink=\\"0\\"
          width=\\"24px\\"
          fontSize=\\"24px\\"
          position=\\"relative\\"
          type=\\"arrow_forward\\"
          height=\\"24px\\"
          pathData=\\"M5.59 10.58L1.42 6.41L0 7.82L5.59 13.41L17.59 1.41L16.18 0L5.59 10.58Z\\"
          {...getOverrideProps(overrides, \\"Iconlxm\\")}
        ></Icon>
        <Text
          padding=\\"0px 0px 0px 0px\\"
          grow=\\"1\\"
          color=\\"rgba(0,0,0,1)\\"
          textAlign=\\"left\\"
          display=\\"flex\\"
          letterSpacing=\\"0.010000000000000009px\\"
          textDecoration=\\"underline\\"
          basis=\\"872px\\"
          justifyContent=\\"flex-start\\"
          fontFamily=\\"Inter\\"
          width=\\"872px\\"
          fontSize=\\"16px\\"
          lineHeight=\\"24px\\"
          position=\\"relative\\"
          fontWeight=\\"400\\"
          direction=\\"column\\"
          children=\\"Read more\\"
          {...getOverrideProps(overrides, \\"Read morepbe\\")}
        ></Text>
      </Flex>
    </Flex>
  );
}
"
`;

exports[`amplify render tests mutations controls an input that is modified by a button 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, Flex, FlexProps, TextField } from \\"@aws-amplify/ui-react\\";

export type InputMutationOnClickProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function InputMutationOnClick(
  props: InputMutationOnClickProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const [myInputValue, setMyInputValue] = useStateMutationAction(\\"\\");
  const setInputButtonOnClick = () => {
    setMyInputValue(\\"Razor Crest\\");
  };
  return (
    /* @ts-ignore: TS2322 */
    <Flex {...rest} {...getOverrideProps(overrides, \\"InputMutationOnClick\\")}>
      <TextField
        value={myInputValue}
        onChange={(event: SyntheticEvent) => {
          setMyInputValue(event.target.value);
        }}
        {...getOverrideProps(overrides, \\"MyInput\\")}
      ></TextField>
      <Button
        children=\\"Change Input\\"
        onClick={() => {
          setInputButtonOnClick();
        }}
        {...getOverrideProps(overrides, \\"SetInputButton\\")}
      ></Button>
    </Flex>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests mutations form 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useDataStoreUpdateAction,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Customer } from \\"../models\\";
import { schema } from \\"../models/schema\\";
import { Button, Flex, FlexProps, TextField } from \\"@aws-amplify/ui-react\\";

export type MyFormProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function MyForm(props: MyFormProps): React.ReactElement {
  const { overrides, ...rest } = props;
  const [usernameTextFieldValue, setUsernameTextFieldValue] =
    useStateMutationAction(\\"vizsla\\");
  const submitButtonOnClick = useDataStoreUpdateAction({
    model: Customer,
    id: \\"d9887268-47dd-4899-9568-db5809218751\\",
    fields: { username: usernameTextFieldValue },
    schema: schema,
  });
  return (
    /* @ts-ignore: TS2322 */
    <Flex {...rest} {...getOverrideProps(overrides, \\"MyForm\\")}>
      <TextField
        label=\\"Username\\"
        value={usernameTextFieldValue}
        onChange={(event: SyntheticEvent) => {
          setUsernameTextFieldValue(event.target.value);
        }}
        {...getOverrideProps(overrides, \\"UsernameTextField\\")}
      ></TextField>
      <Button
        children=\\"Submit\\"
        onClick={() => {
          submitButtonOnClick();
        }}
        {...getOverrideProps(overrides, \\"SubmitButton\\")}
      ></Button>
    </Flex>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests mutations internal mutation 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, Flex, FlexProps } from \\"@aws-amplify/ui-react\\";

export type ColorChangeOnClickProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ColorChangeOnClick(
  props: ColorChangeOnClickProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const [coloredBoxBackgroundColor, setColoredBoxBackgroundColor] =
    useStateMutationAction(\\"red\\");
  const colorChangerButtonOnClick = () => {
    setColoredBoxBackgroundColor(\\"blue\\");
  };
  return (
    /* @ts-ignore: TS2322 */
    <Flex {...rest} {...getOverrideProps(overrides, \\"ColorChangeOnClick\\")}>
      <Flex
        backgroundColor={coloredBoxBackgroundColor}
        {...getOverrideProps(overrides, \\"ColoredBox\\")}
      ></Flex>
      <Button
        children=\\"Change Color\\"
        onClick={() => {
          colorChangerButtonOnClick();
        }}
        {...getOverrideProps(overrides, \\"ColorChangerButton\\")}
      ></Button>
    </Flex>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests mutations modifies text in component on input change 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, Text, TextField } from \\"@aws-amplify/ui-react\\";

export type TwoWayBindingsProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function TwoWayBindings(
  props: TwoWayBindingsProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const [textFieldInputValue, setTextFieldInputValue] =
    useStateMutationAction(\\"\\");
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      direction=\\"column\\"
      {...rest}
      {...getOverrideProps(overrides, \\"TwoWayBindings\\")}
    >
      <TextField
        label=\\"Name\\"
        placeholder=\\"Galadriel\\"
        value={textFieldInputValue}
        onChange={(event: SyntheticEvent) => {
          setTextFieldInputValue(event.target.value);
        }}
        {...getOverrideProps(overrides, \\"TextFieldInput\\")}
      ></TextField>
      <Text
        children={textFieldInputValue}
        {...getOverrideProps(overrides, \\"TextFieldValue\\")}
      ></Text>
    </Flex>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests mutations supports a controlled checkbox primitive 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { CheckboxField, Flex, FlexProps, Text } from \\"@aws-amplify/ui-react\\";

export type CheckboxControlledElementProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CheckboxControlledElement(
  props: CheckboxControlledElementProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const [inputChecked, setInputChecked] = useStateMutationAction(false);
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      {...rest}
      {...getOverrideProps(overrides, \\"CheckboxControlledElement\\")}
    >
      <CheckboxField
        checked={inputChecked}
        onChange={(event: SyntheticEvent) => {
          setInputChecked(event.target.checked);
        }}
        {...getOverrideProps(overrides, \\"Input\\")}
      ></CheckboxField>
      <Text
        children={inputChecked}
        {...getOverrideProps(overrides, \\"CheckboxFieldValue\\")}
      ></Text>
    </Flex>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests mutations supports a controlled stepper primitive 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, StepperField, Text } from \\"@aws-amplify/ui-react\\";

export type StepperControlledElementProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function StepperControlledElement(
  props: StepperControlledElementProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const [inputValue, setInputValue] = useStateMutationAction(0);
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      {...rest}
      {...getOverrideProps(overrides, \\"StepperControlledElement\\")}
    >
      <StepperField
        label=\\"Stepper\\"
        min={0}
        max={10}
        step={1}
        labelHidden={true}
        value={inputValue}
        onStepChange={(value: number) => setInputValue(value)}
        {...getOverrideProps(overrides, \\"Input\\")}
      ></StepperField>
      <Text
        children={inputValue}
        {...getOverrideProps(overrides, \\"StepperFieldValue\\")}
      ></Text>
    </Flex>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests mutations supports a controlled switch primitive 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, SwitchField, Text } from \\"@aws-amplify/ui-react\\";

export type SwitchControlledElementProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function SwitchControlledElement(
  props: SwitchControlledElementProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const [inputIsChecked, setInputIsChecked] = useStateMutationAction(false);
  return (
    /* @ts-ignore: TS2322 */
    <Flex {...rest} {...getOverrideProps(overrides, \\"SwitchControlledElement\\")}>
      <SwitchField
        isChecked={inputIsChecked}
        onChange={() => setInputIsChecked(!inputIsChecked)}
        {...getOverrideProps(overrides, \\"Input\\")}
      ></SwitchField>
      <Text
        children={inputIsChecked}
        {...getOverrideProps(overrides, \\"SwitchFieldValue\\")}
      ></Text>
    </Flex>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests mutations supports all initial value binding types 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  createDataStorePredicate,
  getOverrideProps,
  useAuth,
  useDataStoreBinding,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { User } from \\"../models\\";
import { useEffect } from \\"react\\";
import {
  Button,
  Flex,
  FlexProps,
  Heading,
  Text,
  TextField,
} from \\"@aws-amplify/ui-react\\";

export type InitialValueBindingsProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    user?: User;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function InitialValueBindings(
  props: InitialValueBindingsProps
): React.ReactElement {
  const { user: userProp, overrides, ...rest } = props;
  const authAttributes = useAuth().user?.attributes ?? {};
  const userFilterObj = {
    field: \\"firstName\\",
    operand: \\"Johnny\\",
    operator: \\"eq\\",
  };
  const userFilter = createDataStorePredicate<User>(userFilterObj);
  const userDataStore = useDataStoreBinding({
    type: \\"collection\\",
    model: User,
    criteria: userFilter,
  }).items[0];
  const user = userProp !== undefined ? userProp : userDataStore;
  const [stateSourceChildren, setStateSourceChildren] =
    useStateMutationAction(\\"State Value\\");
  const [fixedValueContentsChildren, setFixedValueContentsChildren] =
    useStateMutationAction(\\"Fixed Value\\");
  const [boundValueContentsChildren, setBoundValueContentsChildren] =
    useStateMutationAction(undefined);
  const [concatValueContentsChildren, setConcatValueContentsChildren] =
    useStateMutationAction(\`\${\\"Concat\\"}\${\\" \\"}\${\\"Value\\"}\`);
  const [
    conditionalValueContentsChildren,
    setConditionalValueContentsChildren,
  ] = useStateMutationAction(undefined);
  const [authValueContentsChildren, setAuthValueContentsChildren] =
    useStateMutationAction(undefined);
  const [stateValueContentsChildren, setStateValueContentsChildren] =
    useStateMutationAction(stateSourceChildren);
  const [textFieldValueContentsValue, setTextFieldValueContentsValue] =
    useStateMutationAction(\\"\\");
  const fixedValueMutationOnClick = () => {
    setFixedValueContentsChildren(\\"Mutated Value\\");
  };
  const boundValueMutationOnClick = () => {
    setBoundValueContentsChildren(\\"Mutated Value\\");
  };
  const concatValueMutationOnClick = () => {
    setConcatValueContentsChildren(\\"Mutated Value\\");
  };
  const conditionalValueMutationOnClick = () => {
    setConditionalValueContentsChildren(\\"Mutated Value\\");
  };
  const authValueMutationOnClick = () => {
    setAuthValueContentsChildren(\\"Mutated Value\\");
  };
  const stateValueMutationOnClick = () => {
    setStateValueContentsChildren(\\"Mutated Value\\");
  };
  const textFieldValueMutationOnClick = () => {
    setTextFieldValueContentsValue(\\"Mutated Value\\");
  };
  useEffect(() => {
    if (
      boundValueContentsChildren === undefined &&
      user !== undefined &&
      user?.lastName !== undefined
    )
      setBoundValueContentsChildren(user?.lastName);
  }, [user]);
  useEffect(() => {
    if (
      conditionalValueContentsChildren === undefined &&
      user !== undefined &&
      (user?.lastName && user?.lastName == \\"Bound Value\\"
        ? \\"Conditional Value\\"
        : \\"Unconditional Value\\") !== undefined
    )
      setConditionalValueContentsChildren(
        user?.lastName && user?.lastName == \\"Bound Value\\"
          ? \\"Conditional Value\\"
          : \\"Unconditional Value\\"
      );
  }, [user]);
  useEffect(() => {
    if (
      authValueContentsChildren === undefined &&
      authAttributes !== undefined &&
      authAttributes[\\"email\\"] !== undefined
    )
      setAuthValueContentsChildren(authAttributes[\\"email\\"]);
  }, [authAttributes]);
  useEffect(() => {
    if (
      textFieldValueContentsValue === \\"\\" &&
      authAttributes !== undefined &&
      authAttributes[\\"email\\"] !== undefined
    )
      setTextFieldValueContentsValue(authAttributes[\\"email\\"]);
  }, [authAttributes]);
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      direction=\\"column\\"
      {...rest}
      {...getOverrideProps(overrides, \\"InitialValueBindings\\")}
    >
      <Heading
        level={3}
        children=\\"Mutation Initial Value Bindings\\"
        {...getOverrideProps(overrides, \\"Heading\\")}
      ></Heading>
      <Flex
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"FixedValueInitialBindingSection\\")}
      >
        <Heading
          level={5}
          children=\\"Fixed Initial Value\\"
          {...getOverrideProps(overrides, \\"FixedValueHeading\\")}
        ></Heading>
        <Text
          children={fixedValueContentsChildren}
          {...getOverrideProps(overrides, \\"FixedValueContents\\")}
        ></Text>
        <Button
          children=\\"Mutate\\"
          onClick={() => {
            fixedValueMutationOnClick();
          }}
          {...getOverrideProps(overrides, \\"FixedValueMutation\\")}
        ></Button>
      </Flex>
      <Flex
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"BoundValueInitialBindingSection\\")}
      >
        <Heading
          level={5}
          children=\\"Bound Initial Value\\"
          {...getOverrideProps(overrides, \\"BoundValueHeading\\")}
        ></Heading>
        <Text
          children={boundValueContentsChildren}
          {...getOverrideProps(overrides, \\"BoundValueContents\\")}
        ></Text>
        <Button
          children=\\"Mutate\\"
          onClick={() => {
            boundValueMutationOnClick();
          }}
          {...getOverrideProps(overrides, \\"BoundValueMutation\\")}
        ></Button>
      </Flex>
      <Flex
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"ConcatValueInitialBindingSection\\")}
      >
        <Heading
          level={5}
          children=\\"Concat Initial Value\\"
          {...getOverrideProps(overrides, \\"ConcatValueHeading\\")}
        ></Heading>
        <Text
          children={concatValueContentsChildren}
          {...getOverrideProps(overrides, \\"ConcatValueContents\\")}
        ></Text>
        <Button
          children=\\"Mutate\\"
          onClick={() => {
            concatValueMutationOnClick();
          }}
          {...getOverrideProps(overrides, \\"ConcatValueMutation\\")}
        ></Button>
      </Flex>
      <Flex
        direction=\\"row\\"
        {...getOverrideProps(
          overrides,
          \\"ConditionalValueInitialBindingSection\\"
        )}
      >
        <Heading
          level={5}
          children=\\"Conditional Initial Value\\"
          {...getOverrideProps(overrides, \\"ConditionalValueHeading\\")}
        ></Heading>
        <Text
          children={conditionalValueContentsChildren}
          {...getOverrideProps(overrides, \\"ConditionalValueContents\\")}
        ></Text>
        <Button
          children=\\"Mutate\\"
          onClick={() => {
            conditionalValueMutationOnClick();
          }}
          {...getOverrideProps(overrides, \\"ConditionalValueMutation\\")}
        ></Button>
      </Flex>
      <Flex
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"AuthValueInitialBindingSection\\")}
      >
        <Heading
          level={5}
          children=\\"Auth Initial Value\\"
          {...getOverrideProps(overrides, \\"AuthValueHeading\\")}
        ></Heading>
        <Text
          children={authValueContentsChildren}
          {...getOverrideProps(overrides, \\"AuthValueContents\\")}
        ></Text>
        <Button
          children=\\"Mutate\\"
          onClick={() => {
            authValueMutationOnClick();
          }}
          {...getOverrideProps(overrides, \\"AuthValueMutation\\")}
        ></Button>
      </Flex>
      <Flex
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"StateValueInitialBindingSection\\")}
      >
        <Heading
          level={5}
          children=\\"State Initial Value\\"
          {...getOverrideProps(overrides, \\"StateValueHeading\\")}
        ></Heading>
        <Text
          children={stateValueContentsChildren}
          {...getOverrideProps(overrides, \\"StateValueContents\\")}
        ></Text>
        <Button
          children=\\"Mutate\\"
          onClick={() => {
            stateValueMutationOnClick();
          }}
          {...getOverrideProps(overrides, \\"StateValueMutation\\")}
        ></Button>
        <Text
          children={stateSourceChildren}
          {...getOverrideProps(overrides, \\"StateSource\\")}
        ></Text>
      </Flex>
      <Flex
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"TextFieldValueInitialBindingSection\\")}
      >
        <Heading
          level={5}
          children=\\"Text Field Initial Value\\"
          {...getOverrideProps(overrides, \\"TextFieldValueHeading\\")}
        ></Heading>
        <TextField
          value={textFieldValueContentsValue}
          onChange={(event: SyntheticEvent) => {
            setTextFieldValueContentsValue(event.target.value);
          }}
          {...getOverrideProps(overrides, \\"TextFieldValueContents\\")}
        ></TextField>
        <Button
          children=\\"Mutate\\"
          onClick={() => {
            textFieldValueMutationOnClick();
          }}
          {...getOverrideProps(overrides, \\"TextFieldValueMutation\\")}
        ></Button>
      </Flex>
    </Flex>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests mutations supports invalid statement names for mutation targets 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Listing } from \\"../models\\";
import { Flex, FlexProps, Image, Text } from \\"@aws-amplify/ui-react\\";

export type CardAProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    listing?: Listing;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CardA(props: CardAProps): React.ReactElement {
  const { listing, overrides, ...rest } = props;
  const [classicLongSleeveTShirtChildren, setClassicLongSleeveTShirtChildren] =
    useStateMutationAction(\\"Classic Long Sleeve T-Shirt\\");
  const dollarNineNineOnClick = () => {
    setClassicLongSleeveTShirtChildren(listing?.titl);
  };
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      gap=\\"16px\\"
      direction=\\"column\\"
      justifyContent=\\"center\\"
      position=\\"relative\\"
      padding=\\"0px 0px 0px 0px\\"
      backgroundColor=\\"rgba(255,255,255,1)\\"
      {...rest}
      {...getOverrideProps(overrides, \\"CardA\\")}
    >
      <Image
        height=\\"400px\\"
        shrink=\\"0\\"
        alignSelf=\\"stretch\\"
        position=\\"relative\\"
        padding=\\"0px 0px 0px 0px\\"
        {...getOverrideProps(overrides, \\"image\\")}
      ></Image>
      <Flex
        gap=\\"8px\\"
        direction=\\"column\\"
        shrink=\\"0\\"
        alignSelf=\\"stretch\\"
        position=\\"relative\\"
        padding=\\"0px 0px 0px 0px\\"
        {...getOverrideProps(overrides, \\"Text Grouping\\")}
      >
        <Text
          fontFamily=\\"Inter\\"
          fontSize=\\"16px\\"
          fontWeight=\\"400\\"
          color=\\"rgba(0,0,0,1)\\"
          lineHeight=\\"24px\\"
          textAlign=\\"left\\"
          display=\\"flex\\"
          direction=\\"column\\"
          justifyContent=\\"flex-start\\"
          letterSpacing=\\"0.01px\\"
          shrink=\\"0\\"
          alignSelf=\\"stretch\\"
          position=\\"relative\\"
          padding=\\"0px 0px 0px 0px\\"
          whiteSpace=\\"pre-wrap\\"
          children={classicLongSleeveTShirtChildren}
          {...getOverrideProps(overrides, \\"Classic Long Sleeve T-Shirt\\")}
        ></Text>
        <Text
          fontFamily=\\"Inter\\"
          fontSize=\\"14px\\"
          fontWeight=\\"400\\"
          color=\\"rgba(43,51,59,1)\\"
          lineHeight=\\"24px\\"
          textAlign=\\"left\\"
          display=\\"flex\\"
          direction=\\"column\\"
          justifyContent=\\"flex-start\\"
          shrink=\\"0\\"
          alignSelf=\\"stretch\\"
          position=\\"relative\\"
          padding=\\"0px 0px 0px 0px\\"
          whiteSpace=\\"pre-wrap\\"
          children=\\"$99\\"
          onClick={() => {
            dollarNineNineOnClick();
          }}
          {...getOverrideProps(overrides, \\"$99\\")}
        ></Text>
      </Flex>
    </Flex>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests mutations supports invalid statement names for mutation targets with ES5 1`] = `
"var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
var __rest =
  (this && this.__rest) ||
  function (s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (
          e.indexOf(p[i]) < 0 &&
          Object.prototype.propertyIsEnumerable.call(s, p[i])
        )
          t[p[i]] = s[p[i]];
      }
    return t;
  };
/* eslint-disable */
import React from \\"react\\";
import {
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, Image, Text } from \\"@aws-amplify/ui-react\\";
export default function CardA(props) {
  var listing = props.listing,
    overrides = props.overrides,
    rest = __rest(props, [\\"listing\\", \\"overrides\\"]);
  var _a = useStateMutationAction(\\"Classic Long Sleeve T-Shirt\\"),
    classicLongSleeveTShirtChildren = _a[0],
    setClassicLongSleeveTShirtChildren = _a[1];
  var dollarNineNineOnClick = function () {
    setClassicLongSleeveTShirtChildren(
      listing === null || listing === void 0 ? void 0 : listing.titl
    );
  };
  return React.createElement(
    Flex,
    __assign(
      {
        gap: \\"16px\\",
        direction: \\"column\\",
        justifyContent: \\"center\\",
        position: \\"relative\\",
        padding: \\"0px 0px 0px 0px\\",
        backgroundColor: \\"rgba(255,255,255,1)\\",
      },
      rest,
      getOverrideProps(overrides, \\"CardA\\")
    ),
    React.createElement(
      Image,
      __assign(
        {
          height: \\"400px\\",
          shrink: \\"0\\",
          alignSelf: \\"stretch\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
        },
        getOverrideProps(overrides, \\"image\\")
      )
    ),
    React.createElement(
      Flex,
      __assign(
        {
          gap: \\"8px\\",
          direction: \\"column\\",
          shrink: \\"0\\",
          alignSelf: \\"stretch\\",
          position: \\"relative\\",
          padding: \\"0px 0px 0px 0px\\",
        },
        getOverrideProps(overrides, \\"Text Grouping\\")
      ),
      React.createElement(
        Text,
        __assign(
          {
            fontFamily: \\"Inter\\",
            fontSize: \\"16px\\",
            fontWeight: \\"400\\",
            color: \\"rgba(0,0,0,1)\\",
            lineHeight: \\"24px\\",
            textAlign: \\"left\\",
            display: \\"flex\\",
            direction: \\"column\\",
            justifyContent: \\"flex-start\\",
            letterSpacing: \\"0.01px\\",
            shrink: \\"0\\",
            alignSelf: \\"stretch\\",
            position: \\"relative\\",
            padding: \\"0px 0px 0px 0px\\",
            whiteSpace: \\"pre-wrap\\",
            children: classicLongSleeveTShirtChildren,
          },
          getOverrideProps(overrides, \\"Classic Long Sleeve T-Shirt\\")
        )
      ),
      React.createElement(
        Text,
        __assign(
          {
            fontFamily: \\"Inter\\",
            fontSize: \\"14px\\",
            fontWeight: \\"400\\",
            color: \\"rgba(43,51,59,1)\\",
            lineHeight: \\"24px\\",
            textAlign: \\"left\\",
            display: \\"flex\\",
            direction: \\"column\\",
            justifyContent: \\"flex-start\\",
            shrink: \\"0\\",
            alignSelf: \\"stretch\\",
            position: \\"relative\\",
            padding: \\"0px 0px 0px 0px\\",
            whiteSpace: \\"pre-wrap\\",
            children: \\"$99\\",
            onClick: function () {
              dollarNineNineOnClick();
            },
          },
          getOverrideProps(overrides, \\"$99\\")
        )
      )
    )
  );
}
"
`;

exports[`amplify render tests mutations supports multiple actions pointing to the same value 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, Flex, FlexProps, Text } from \\"@aws-amplify/ui-react\\";

export type ButtonsToggleStateProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ButtonsToggleState(
  props: ButtonsToggleStateProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const [fooBarValueChildren, setFooBarValueChildren] =
    useStateMutationAction(\\"Baz\\");
  const fooButtonOnClick = () => {
    setFooBarValueChildren(\\"Foo\\");
  };
  const barButtonOnClick = () => {
    setFooBarValueChildren(\\"Bar\\");
  };
  return (
    /* @ts-ignore: TS2322 */
    <Flex {...rest} {...getOverrideProps(overrides, \\"ButtonsToggleState\\")}>
      <Text
        children={fooBarValueChildren}
        {...getOverrideProps(overrides, \\"FooBarValue\\")}
      ></Text>
      <Button
        children=\\"Set to Foo\\"
        onClick={() => {
          fooButtonOnClick();
        }}
        {...getOverrideProps(overrides, \\"FooButton\\")}
      ></Button>
      <Button
        children=\\"Set to Bar\\"
        onClick={() => {
          barButtonOnClick();
        }}
        {...getOverrideProps(overrides, \\"BarButton\\")}
      ></Button>
    </Flex>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests mutations supports mutations on synthetic props 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, Flex, FlexProps, Text } from \\"@aws-amplify/ui-react\\";

export type MutationWithSyntheticPropProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function MutationWithSyntheticProp(
  props: MutationWithSyntheticPropProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const [fooBarValueChildren, setFooBarValueChildren] =
    useStateMutationAction(\\"Baz\\");
  const fooButtonOnClick = () => {
    setFooBarValueChildren(\\"Foo\\");
  };
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      {...rest}
      {...getOverrideProps(overrides, \\"MutationWithSyntheticProp\\")}
    >
      <Text
        children={fooBarValueChildren}
        {...getOverrideProps(overrides, \\"FooBarValue\\")}
      ></Text>
      <Button
        children=\\"Set to Foo\\"
        onClick={() => {
          fooButtonOnClick();
        }}
        {...getOverrideProps(overrides, \\"FooButton\\")}
      ></Button>
    </Flex>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests mutations supports mutations on visibility props 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, Card, CardProps, Text } from \\"@aws-amplify/ui-react\\";

export type UpdateVisibilityProps = React.PropsWithChildren<
  Partial<CardProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function UpdateVisibility(
  props: UpdateVisibilityProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const [textDisplayDisplay, setTextDisplayDisplay] =
    useStateMutationAction(\\"block\\");
  const displayBlockButtonOnClick = () => {
    setTextDisplayDisplay(\\"block\\");
  };
  const displayNoneButtonOnClick = () => {
    setTextDisplayDisplay(\\"none\\");
  };
  return (
    /* @ts-ignore: TS2322 */
    <Card {...rest} {...getOverrideProps(overrides, \\"UpdateVisibility\\")}>
      <Text
        display={textDisplayDisplay}
        children=\\"This is a text to display.\\"
        {...getOverrideProps(overrides, \\"TextDisplay\\")}
      ></Text>
      <Button
        children=\\"Show text\\"
        onClick={() => {
          displayBlockButtonOnClick();
        }}
        {...getOverrideProps(overrides, \\"DisplayBlockButton\\")}
      ></Button>
      <Button
        children=\\"Hide text\\"
        onClick={() => {
          displayNoneButtonOnClick();
        }}
        {...getOverrideProps(overrides, \\"DisplayNoneButton\\")}
      ></Button>
    </Card>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests mutations supports mutations with no initial state 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, Card, CardProps, Text } from \\"@aws-amplify/ui-react\\";

export type SetStateWithoutInitialValueProps = React.PropsWithChildren<
  Partial<CardProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function SetStateWithoutInitialValue(
  props: SetStateWithoutInitialValueProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const [textDisplayDisplay, setTextDisplayDisplay] =
    useStateMutationAction(undefined);
  const displayBlockButtonOnClick = () => {
    setTextDisplayDisplay(\\"block\\");
  };
  const displayNoneButtonOnClick = () => {
    setTextDisplayDisplay(\\"none\\");
  };
  return (
    /* @ts-ignore: TS2322 */
    <Card
      {...rest}
      {...getOverrideProps(overrides, \\"SetStateWithoutInitialValue\\")}
    >
      <Text
        children=\\"This is a text to display.\\"
        display={textDisplayDisplay}
        {...getOverrideProps(overrides, \\"TextDisplay\\")}
      ></Text>
      <Button
        children=\\"Show text\\"
        onClick={() => {
          displayBlockButtonOnClick();
        }}
        {...getOverrideProps(overrides, \\"DisplayBlockButton\\")}
      ></Button>
      <Button
        children=\\"Hide text\\"
        onClick={() => {
          displayNoneButtonOnClick();
        }}
        {...getOverrideProps(overrides, \\"DisplayNoneButton\\")}
      ></Button>
    </Card>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests mutations supports names that cant be directly turned into methodnames 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useNavigateAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, Text } from \\"@aws-amplify/ui-react\\";

export type InvalidNameForMethodProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function InvalidNameForMethod(
  props: InvalidNameForMethodProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const loremipsumdolorsitametCommaconsecteturadipiscingelitCommaseddoeiusmodtemporincididuntutlaborePeriodOnClick =
    useNavigateAction({ type: \\"url\\", url: \\"emails\\" });
  return (
    /* @ts-ignore: TS2322 */
    <Flex {...rest} {...getOverrideProps(overrides, \\"InvalidNameForMethod\\")}>
      <Text
        onClick={() => {
          loremipsumdolorsitametCommaconsecteturadipiscingelitCommaseddoeiusmodtemporincididuntutlaborePeriodOnClick();
        }}
        {...getOverrideProps(
          overrides,
          \\"\\\\u201CLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore.\\\\u201D\\"
        )}
      ></Text>
    </Flex>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests mutations supports nested mutation 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, Flex, FlexProps, Text } from \\"@aws-amplify/ui-react\\";

export type NestedMutationProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function NestedMutation(
  props: NestedMutationProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const [stateSourceChildren, setStateSourceChildren] =
    useStateMutationAction(\\"State Value\\");
  const [mutatedValueChildren, setMutatedValueChildren] =
    useStateMutationAction(\\"Default Value\\");
  const statePropertyMutationOnClick = () => {
    setMutatedValueChildren(stateSourceChildren);
  };
  return (
    /* @ts-ignore: TS2322 */
    <Flex {...rest} {...getOverrideProps(overrides, \\"NestedMutation\\")}>
      <Text
        children={mutatedValueChildren}
        {...getOverrideProps(overrides, \\"MutatedValue\\")}
      ></Text>
      <Button
        children=\\"Apply State Property Mutation\\"
        onClick={() => {
          statePropertyMutationOnClick();
        }}
        {...getOverrideProps(overrides, \\"StatePropertyMutation\\")}
      ></Button>
      <Text
        children={stateSourceChildren}
        {...getOverrideProps(overrides, \\"StateSource\\")}
      ></Text>
    </Flex>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests mutations supports two-way data binding on form elements 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useStateMutationAction,
} from \\"@aws-amplify/ui-react/internal\\";
import {
  Button,
  CheckboxField,
  Flex,
  FlexProps,
  Heading,
  PasswordField,
  PhoneNumberField,
  Radio,
  RadioGroupField,
  SearchField,
  SelectField,
  SliderField,
  StepperField,
  SwitchField,
  Text,
  TextAreaField,
  TextField,
} from \\"@aws-amplify/ui-react\\";
import option from \\"./option\\";

export type TwoWayBindingsProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function TwoWayBindings(
  props: TwoWayBindingsProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  const [checkboxFieldInputChecked, setCheckboxFieldInputChecked] =
    useStateMutationAction(false);
  const [passwordFieldInputValue, setPasswordFieldInputValue] =
    useStateMutationAction(\\"\\");
  const [phoneNumberFieldInputValue, setPhoneNumberFieldInputValue] =
    useStateMutationAction(\\"\\");
  const [radioGroupFieldInputValue, setRadioGroupFieldInputValue] =
    useStateMutationAction(\\"html\\");
  const [searchFieldInputValue, setSearchFieldInputValue] =
    useStateMutationAction(\\"\\");
  const [selectFieldInputValue, setSelectFieldInputValue] =
    useStateMutationAction(undefined);
  const [sliderFieldInputValue, setSliderFieldInputValue] =
    useStateMutationAction(50);
  const [stepperFieldInputValue, setStepperFieldInputValue] =
    useStateMutationAction(0);
  const [switchFieldInputIsChecked, setSwitchFieldInputIsChecked] =
    useStateMutationAction(false);
  const [textFieldInputValue, setTextFieldInputValue] =
    useStateMutationAction(\\"\\");
  const [textAreaFieldInputValue, setTextAreaFieldInputValue] =
    useStateMutationAction(\\"\\");
  const setCheckboxFieldValueOnClick = () => {
    setCheckboxFieldInputChecked(false);
  };
  const setPasswordFieldValueOnClick = () => {
    setPasswordFieldInputValue(\\"admin123\\");
  };
  const setPhoneNumberFieldValueOnClick = () => {
    setPhoneNumberFieldInputValue(\\"8675309\\");
  };
  const setRadioGroupFieldValueOnClick = () => {
    setRadioGroupFieldInputValue(\\"javascript\\");
  };
  const setSearchFieldValueOnClick = () => {
    setSearchFieldInputValue(\\"UI Docs\\");
  };
  const setSelectFieldValueOnClick = () => {
    setSelectFieldInputValue(\\"orange\\");
  };
  const setSliderFieldValueOnClick = () => {
    setSliderFieldInputValue(90);
  };
  const setStepperFieldValueOnClick = () => {
    setStepperFieldInputValue(9);
  };
  const setSwitchFieldValueOnClick = () => {
    setSwitchFieldInputIsChecked(true);
  };
  const setTextFieldValueOnClick = () => {
    setTextFieldInputValue(\\"Hardcoded Value\\");
  };
  const setTextAreaFieldValueOnClick = () => {
    setTextAreaFieldInputValue(\\"Hardcoded Value\\");
  };
  return (
    /* @ts-ignore: TS2322 */
    <Flex
      direction=\\"column\\"
      {...rest}
      {...getOverrideProps(overrides, \\"TwoWayBindings\\")}
    >
      <Heading
        level={1}
        children=\\"Two-Way Binding Test\\"
        {...getOverrideProps(overrides, \\"FormHeading\\")}
      ></Heading>
      <Flex
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"CheckboxFieldSection\\")}
      >
        <Heading
          level={5}
          children=\\"CheckboxField\\"
          {...getOverrideProps(overrides, \\"CheckboxFieldHeader\\")}
        ></Heading>
        <CheckboxField
          label=\\"Subscribe\\"
          name=\\"subscribe\\"
          value=\\"yes\\"
          checked={checkboxFieldInputChecked}
          onChange={(event: SyntheticEvent) => {
            setCheckboxFieldInputChecked(event.target.checked);
          }}
          {...getOverrideProps(overrides, \\"CheckboxFieldInput\\")}
        ></CheckboxField>
        <Text
          children={checkboxFieldInputChecked}
          {...getOverrideProps(overrides, \\"CheckboxFieldValue\\")}
        ></Text>
        <Button
          children=\\"Set CheckboxFieldValue\\"
          onClick={() => {
            setCheckboxFieldValueOnClick();
          }}
          {...getOverrideProps(overrides, \\"SetCheckboxFieldValue\\")}
        ></Button>
      </Flex>
      <Flex
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"PasswordFieldSection\\")}
      >
        <Heading
          level={5}
          children=\\"PasswordField\\"
          {...getOverrideProps(overrides, \\"PasswordFieldHeader\\")}
        ></Heading>
        <PasswordField
          label=\\"Password\\"
          name=\\"password\\"
          value={passwordFieldInputValue}
          onChange={(event: SyntheticEvent) => {
            setPasswordFieldInputValue(event.target.value);
          }}
          {...getOverrideProps(overrides, \\"PasswordFieldInput\\")}
        ></PasswordField>
        <Text
          children={passwordFieldInputValue}
          {...getOverrideProps(overrides, \\"PasswordFieldValue\\")}
        ></Text>
        <Button
          children=\\"Set PasswordFieldValue\\"
          onClick={() => {
            setPasswordFieldValueOnClick();
          }}
          {...getOverrideProps(overrides, \\"SetPasswordFieldValue\\")}
        ></Button>
      </Flex>
      <Flex
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"PhoneNumberFieldSection\\")}
      >
        <Heading
          level={5}
          children=\\"PhoneNumberField\\"
          {...getOverrideProps(overrides, \\"PhoneNumberFieldHeader\\")}
        ></Heading>
        <PhoneNumberField
          label=\\"Phone Number\\"
          defaultCountryCode=\\"+1\\"
          value={phoneNumberFieldInputValue}
          onChange={(event: SyntheticEvent) => {
            setPhoneNumberFieldInputValue(event.target.value);
          }}
          {...getOverrideProps(overrides, \\"PhoneNumberFieldInput\\")}
        ></PhoneNumberField>
        <Text
          children={phoneNumberFieldInputValue}
          {...getOverrideProps(overrides, \\"PhoneNumberFieldValue\\")}
        ></Text>
        <Button
          children=\\"Set PhoneNumberFieldValue\\"
          onClick={() => {
            setPhoneNumberFieldValueOnClick();
          }}
          {...getOverrideProps(overrides, \\"SetPhoneNumberFieldValue\\")}
        ></Button>
      </Flex>
      <Flex
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"RadioGroupFieldSection\\")}
      >
        <Heading
          level={5}
          children=\\"RadioGroupField\\"
          {...getOverrideProps(overrides, \\"RadioGroupFieldHeader\\")}
        ></Heading>
        <RadioGroupField
          label=\\"Language\\"
          name=\\"language\\"
          value={radioGroupFieldInputValue}
          onChange={(event: SyntheticEvent) => {
            setRadioGroupFieldInputValue(event.target.value);
          }}
          {...getOverrideProps(overrides, \\"RadioGroupFieldInput\\")}
        >
          <Radio
            value=\\"html\\"
            children=\\"html\\"
            {...getOverrideProps(overrides, \\"RadioGroupFieldInputOption1\\")}
          ></Radio>
          <Radio
            value=\\"css\\"
            children=\\"css\\"
            {...getOverrideProps(overrides, \\"RadioGroupFieldInputOption2\\")}
          ></Radio>
          <Radio
            value=\\"javascript\\"
            children=\\"javascript\\"
            {...getOverrideProps(overrides, \\"RadioGroupFieldInputOption3\\")}
          ></Radio>
        </RadioGroupField>
        <Text
          children={radioGroupFieldInputValue}
          {...getOverrideProps(overrides, \\"RadioGroupFieldValue\\")}
        ></Text>
        <Button
          children=\\"Set RadioGroupFieldValue\\"
          onClick={() => {
            setRadioGroupFieldValueOnClick();
          }}
          {...getOverrideProps(overrides, \\"SetRadioGroupFieldValue\\")}
        ></Button>
      </Flex>
      <Flex
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"SearchFieldSection\\")}
      >
        <Heading
          level={5}
          children=\\"SearchField\\"
          {...getOverrideProps(overrides, \\"SearchFieldHeader\\")}
        ></Heading>
        <SearchField
          label=\\"Search\\"
          value={searchFieldInputValue}
          onChange={(event: SyntheticEvent) => {
            setSearchFieldInputValue(event.target.value);
          }}
          {...getOverrideProps(overrides, \\"SearchFieldInput\\")}
        ></SearchField>
        <Text
          children={searchFieldInputValue}
          {...getOverrideProps(overrides, \\"SearchFieldValue\\")}
        ></Text>
        <Button
          children=\\"Set SearchFieldValue\\"
          onClick={() => {
            setSearchFieldValueOnClick();
          }}
          {...getOverrideProps(overrides, \\"SetSearchFieldValue\\")}
        ></Button>
      </Flex>
      <Flex
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"SelectFieldSection\\")}
      >
        <Heading
          level={5}
          children=\\"SelectField\\"
          {...getOverrideProps(overrides, \\"SelectFieldHeader\\")}
        ></Heading>
        <SelectField
          label=\\"Fruit\\"
          placeholder=\\"Please select a fruit\\"
          labelHidden={true}
          value={selectFieldInputValue}
          onChange={(event: SyntheticEvent) => {
            setSelectFieldInputValue(event.target.value);
          }}
          {...getOverrideProps(overrides, \\"SelectFieldInput\\")}
        >
          <option
            label=\\"Apple\\"
            value=\\"apple\\"
            {...getOverrideProps(overrides, \\"SelectFieldInputOption1\\")}
          ></option>
          <option
            label=\\"Banana\\"
            value=\\"banana\\"
            {...getOverrideProps(overrides, \\"SelectFieldInputOption2\\")}
          ></option>
          <option
            label=\\"Orange\\"
            value=\\"orange\\"
            {...getOverrideProps(overrides, \\"SelectFieldInputOption3\\")}
          ></option>
        </SelectField>
        <Text
          children={selectFieldInputValue}
          {...getOverrideProps(overrides, \\"SelectFieldValue\\")}
        ></Text>
        <Button
          children=\\"Set SelectFieldValue\\"
          onClick={() => {
            setSelectFieldValueOnClick();
          }}
          {...getOverrideProps(overrides, \\"SetSelectFieldValue\\")}
        ></Button>
      </Flex>
      <Flex
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"SliderFieldSection\\")}
      >
        <Heading
          level={5}
          children=\\"SliderField\\"
          {...getOverrideProps(overrides, \\"SliderFieldHeader\\")}
        ></Heading>
        <SliderField
          label=\\"Slider\\"
          min={0}
          max={100}
          step={1}
          labelHidden={true}
          value={sliderFieldInputValue}
          onChange={(value: number) => setSliderFieldInputValue(value)}
          {...getOverrideProps(overrides, \\"SliderFieldInput\\")}
        ></SliderField>
        <Text
          children={sliderFieldInputValue}
          {...getOverrideProps(overrides, \\"SliderFieldValue\\")}
        ></Text>
        <Button
          children=\\"Set SliderFieldValue\\"
          onClick={() => {
            setSliderFieldValueOnClick();
          }}
          {...getOverrideProps(overrides, \\"SetSliderFieldValue\\")}
        ></Button>
      </Flex>
      <Flex
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"StepperFieldSection\\")}
      >
        <Heading
          level={5}
          children=\\"StepperField\\"
          {...getOverrideProps(overrides, \\"StepperFieldHeader\\")}
        ></Heading>
        <StepperField
          label=\\"Stepper\\"
          min={0}
          max={10}
          step={1}
          labelHidden={true}
          value={stepperFieldInputValue}
          onStepChange={(value: number) => setStepperFieldInputValue(value)}
          {...getOverrideProps(overrides, \\"StepperFieldInput\\")}
        ></StepperField>
        <Text
          children={stepperFieldInputValue}
          {...getOverrideProps(overrides, \\"StepperFieldValue\\")}
        ></Text>
        <Button
          children=\\"Set StepperFieldValue\\"
          onClick={() => {
            setStepperFieldValueOnClick();
          }}
          {...getOverrideProps(overrides, \\"SetStepperFieldValue\\")}
        ></Button>
      </Flex>
      <Flex
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"SwitchFieldSection\\")}
      >
        <Heading
          level={5}
          children=\\"SwitchField\\"
          {...getOverrideProps(overrides, \\"SwitchFieldHeader\\")}
        ></Heading>
        <SwitchField
          label=\\"SwitchField\\"
          labelPosition=\\"start\\"
          isDisabled={false}
          isLabelHidden={false}
          isChecked={switchFieldInputIsChecked}
          onChange={() =>
            setSwitchFieldInputIsChecked(!switchFieldInputIsChecked)
          }
          {...getOverrideProps(overrides, \\"SwitchFieldInput\\")}
        ></SwitchField>
        <Text
          children={switchFieldInputIsChecked}
          {...getOverrideProps(overrides, \\"SwitchFieldValue\\")}
        ></Text>
        <Button
          children=\\"Set SwitchFieldValue\\"
          onClick={() => {
            setSwitchFieldValueOnClick();
          }}
          {...getOverrideProps(overrides, \\"SetSwitchFieldValue\\")}
        ></Button>
      </Flex>
      <Flex
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"TextFieldSection\\")}
      >
        <Heading
          level={5}
          children=\\"TextField\\"
          {...getOverrideProps(overrides, \\"TextFieldHeader\\")}
        ></Heading>
        <TextField
          label=\\"Name\\"
          placeholder=\\"Galadriel\\"
          value={textFieldInputValue}
          onChange={(event: SyntheticEvent) => {
            setTextFieldInputValue(event.target.value);
          }}
          {...getOverrideProps(overrides, \\"TextFieldInput\\")}
        ></TextField>
        <Text
          children={textFieldInputValue}
          {...getOverrideProps(overrides, \\"TextFieldValue\\")}
        ></Text>
        <Button
          children=\\"Set TextFieldValue\\"
          onClick={() => {
            setTextFieldValueOnClick();
          }}
          {...getOverrideProps(overrides, \\"SetTextFieldValue\\")}
        ></Button>
      </Flex>
      <Flex
        direction=\\"row\\"
        {...getOverrideProps(overrides, \\"TextAreaFieldSection\\")}
      >
        <Heading
          level={5}
          children=\\"TextAreaField\\"
          {...getOverrideProps(overrides, \\"TextAreaFieldHeader\\")}
        ></Heading>
        <TextAreaField
          label=\\"Name\\"
          placeholder=\\"Galadriel\\"
          value={textAreaFieldInputValue}
          onChange={(event: SyntheticEvent) => {
            setTextAreaFieldInputValue(event.target.value);
          }}
          {...getOverrideProps(overrides, \\"TextAreaFieldInput\\")}
        ></TextAreaField>
        <Text
          children={textAreaFieldInputValue}
          {...getOverrideProps(overrides, \\"TextAreaFieldValue\\")}
        ></Text>
        <Button
          children=\\"Set TextAreaFieldValue\\"
          onClick={() => {
            setTextAreaFieldValueOnClick();
          }}
          {...getOverrideProps(overrides, \\"SetTextAreaFieldValue\\")}
        ></Button>
      </Flex>
    </Flex>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests primitives CheckboxField 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { CheckboxField, CheckboxFieldProps } from \\"@aws-amplify/ui-react\\";

export type CheckBoxFieldPrimitiveProps = React.PropsWithChildren<
  Partial<CheckboxFieldProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function CheckBoxFieldPrimitive(
  props: CheckBoxFieldPrimitiveProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <CheckboxField
      label=\\"Subscribe\\"
      name=\\"subscribe\\"
      value=\\"yes\\"
      {...rest}
      {...getOverrideProps(overrides, \\"CheckBoxFieldPrimitive\\")}
    ></CheckboxField>
  );
}
"
`;

exports[`amplify render tests primitives Expander 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Expander, ExpanderItem, ExpanderProps } from \\"@aws-amplify/ui-react\\";

export type ExpanderPrimitiveProps = React.PropsWithChildren<
  Partial<ExpanderProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ExpanderPrimitive(
  props: ExpanderPrimitiveProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Expander
      type=\\"single\\"
      isCollapsible={true}
      {...rest}
      {...getOverrideProps(overrides, \\"ExpanderPrimitive\\")}
    >
      <ExpanderItem
        title=\\"title1\\"
        value=\\"ExpanderItem1\\"
        children=\\"ExpanderItem1Content\\"
        {...getOverrideProps(overrides, \\"ExpanderItem1\\")}
      ></ExpanderItem>
      <ExpanderItem
        title=\\"title2\\"
        value=\\"ExpanderItem2\\"
        children=\\"ExpanderItem2Content\\"
        {...getOverrideProps(overrides, \\"ExpanderItem2\\")}
      ></ExpanderItem>
    </Expander>
  );
}
"
`;

exports[`amplify render tests primitives ExpanderItem 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { ExpanderItem, ExpanderItemProps } from \\"@aws-amplify/ui-react\\";

export type MyExpanderItemProps = React.PropsWithChildren<
  Partial<ExpanderItemProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function MyExpanderItem(
  props: MyExpanderItemProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <ExpanderItem
      title=\\"title1\\"
      value=\\"ExpanderItem1\\"
      children=\\"ExpanderItem1Content\\"
      {...rest}
      {...getOverrideProps(overrides, \\"MyExpanderItem\\")}
    ></ExpanderItem>
  );
}
"
`;

exports[`amplify render tests primitives Icon 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Icon, IconProps } from \\"@aws-amplify/ui-react\\";

export type IconPrimitiveProps = React.PropsWithChildren<
  Partial<IconProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function IconPrimitive(
  props: IconPrimitiveProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Icon
      ariaLabel=\\"Favorite\\"
      viewBox={{ width: 24, height: 24 }}
      paths={[
        {
          d: \\"M18 6V4h2V2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h14v-2h-4.03c1.23-.91 2.03-2.36 2.03-4v-5H8v5c0 1.64.81 3.09 2.03 4H6V4h2v2c0 .55.45 1 1 1h8c.55 0 1-.45 1-1z\\",
          fill: \\"black\\",
        },
      ]}
      {...rest}
      {...getOverrideProps(overrides, \\"IconPrimitive\\")}
    ></Icon>
  );
}
"
`;

exports[`amplify render tests primitives Menu 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Menu, MenuItem, MenuProps } from \\"@aws-amplify/ui-react\\";

export type MenuPrimitiveProps = React.PropsWithChildren<
  Partial<MenuProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function MenuPrimitive(
  props: MenuPrimitiveProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Menu {...rest} {...getOverrideProps(overrides, \\"MenuPrimitive\\")}>
      <MenuItem
        children=\\"Item\\"
        {...getOverrideProps(overrides, \\"MyMenuItem\\")}
      ></MenuItem>
    </Menu>
  );
}
"
`;

exports[`amplify render tests primitives MenuButton 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { ButtonProps, MenuButton } from \\"@aws-amplify/ui-react\\";

export type MenuButtonPrimitiveProps = React.PropsWithChildren<
  Partial<ButtonProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function MenuButtonPrimitive(
  props: MenuButtonPrimitiveProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <MenuButton
      children=\\"Menu Button\\"
      {...rest}
      {...getOverrideProps(overrides, \\"MenuButtonPrimitive\\")}
    ></MenuButton>
  );
}
"
`;

exports[`amplify render tests primitives SliderField 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { SliderField, SliderFieldProps } from \\"@aws-amplify/ui-react\\";

export type SliderFieldPrimitiveProps = React.PropsWithChildren<
  Partial<SliderFieldProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function SliderFieldPrimitive(
  props: SliderFieldPrimitiveProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <SliderField
      name=\\"slider\\"
      label=\\"Slider\\"
      defaultValue={50}
      min={0}
      max={100}
      step={1}
      {...rest}
      {...getOverrideProps(overrides, \\"SliderFieldPrimitive\\")}
    ></SliderField>
  );
}
"
`;

exports[`amplify render tests primitives Table 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import {
  Table,
  TableBody,
  TableCell,
  TableFoot,
  TableHead,
  TableProps,
  TableRow,
} from \\"@aws-amplify/ui-react\\";

export type TablePrimitiveProps = React.PropsWithChildren<
  Partial<TableProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function TablePrimitive(
  props: TablePrimitiveProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Table
      caption=\\"Some fruits\\"
      highlightOnHover={true}
      size=\\"small\\"
      variation=\\"striped\\"
      {...rest}
      {...getOverrideProps(overrides, \\"TablePrimitive\\")}
    >
      <TableHead {...getOverrideProps(overrides, \\"MyTableHead\\")}>
        <TableRow {...getOverrideProps(overrides, \\"MyTableRow\\")}>
          <TableCell
            as=\\"th\\"
            children=\\"Citrus\\"
            {...getOverrideProps(overrides, \\"MyTableCellCitrus\\")}
          ></TableCell>
          <TableCell
            as=\\"th\\"
            children=\\"Stone Fruit\\"
            {...getOverrideProps(overrides, \\"MyTableCellStoneFruit\\")}
          ></TableCell>
          <TableCell
            as=\\"th\\"
            children=\\"Berry\\"
            {...getOverrideProps(overrides, \\"MyTableCellBerry\\")}
          ></TableCell>
        </TableRow>
      </TableHead>
      <TableBody {...getOverrideProps(overrides, \\"MyTableBody\\")}>
        <TableRow {...getOverrideProps(overrides, \\"TableRow1\\")}>
          <TableCell
            children=\\"Orange\\"
            {...getOverrideProps(overrides, \\"TableCell11\\")}
          ></TableCell>
          <TableCell
            children=\\"Nectarine\\"
            {...getOverrideProps(overrides, \\"TableCell12\\")}
          ></TableCell>
          <TableCell
            children=\\"Raspberry\\"
            {...getOverrideProps(overrides, \\"TableCell13\\")}
          ></TableCell>
        </TableRow>
        <TableRow {...getOverrideProps(overrides, \\"TableRow2\\")}>
          <TableCell
            children=\\"Grapefruit\\"
            {...getOverrideProps(overrides, \\"TableCell21\\")}
          ></TableCell>
          <TableCell
            children=\\"Apricot\\"
            {...getOverrideProps(overrides, \\"TableCell22\\")}
          ></TableCell>
          <TableCell
            children=\\"Blueberry\\"
            {...getOverrideProps(overrides, \\"TableCell23\\")}
          ></TableCell>
        </TableRow>
        <TableRow {...getOverrideProps(overrides, \\"TableRow3\\")}>
          <TableCell
            children=\\"Lime\\"
            {...getOverrideProps(overrides, \\"TableCell31\\")}
          ></TableCell>
          <TableCell
            children=\\"Peach\\"
            {...getOverrideProps(overrides, \\"TableCell32\\")}
          ></TableCell>
          <TableCell
            children=\\"Strawberry\\"
            {...getOverrideProps(overrides, \\"TableCell33\\")}
          ></TableCell>
        </TableRow>
      </TableBody>
      <TableFoot {...getOverrideProps(overrides, \\"MyTableFoot\\")}>
        <TableRow {...getOverrideProps(overrides, \\"TableRowFoot\\")}>
          <TableCell
            as=\\"th\\"
            children=\\"Citrus\\"
            {...getOverrideProps(overrides, \\"TableCellFoot1\\")}
          ></TableCell>
          <TableCell
            as=\\"th\\"
            children=\\"Stone Fruit\\"
            {...getOverrideProps(overrides, \\"TableCellFoot2\\")}
          ></TableCell>
          <TableCell
            as=\\"th\\"
            children=\\"Berry\\"
            {...getOverrideProps(overrides, \\"TableCellFoot3\\")}
          ></TableCell>
        </TableRow>
      </TableFoot>
    </Table>
  );
}
"
`;

exports[`amplify render tests primitives TextAreaField 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { TextAreaField, TextAreaFieldProps } from \\"@aws-amplify/ui-react\\";

export type TextAreaFieldPrimitiveProps = React.PropsWithChildren<
  Partial<TextAreaFieldProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function TextAreaFieldPrimitive(
  props: TextAreaFieldPrimitiveProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <TextAreaField
      label=\\"Name\\"
      placeholder=\\"Holden\\"
      descriptiveText=\\"Please enter valid name\\"
      {...rest}
      {...getOverrideProps(overrides, \\"TextAreaFieldPrimitive\\")}
    ></TextAreaField>
  );
}
"
`;

exports[`amplify render tests primitives TextField 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { TextField, TextFieldProps } from \\"@aws-amplify/ui-react\\";

export type TextFieldPrimitiveProps<Multiline extends boolean> =
  React.PropsWithChildren<
    Partial<TextFieldProps<Multiline>> & {
      overrides?: EscapeHatchProps | undefined | null;
    }
  >;
export default function TextFieldPrimitive<Multiline extends boolean>(
  props: TextFieldPrimitiveProps<Multiline>
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <TextField
      label=\\"Name\\"
      placeholder=\\"Holden\\"
      descriptiveText=\\"Please enter valid name\\"
      {...rest}
      {...getOverrideProps(overrides, \\"TextFieldPrimitive\\")}
    ></TextField>
  );
}
"
`;

exports[`amplify render tests sample code snippet tests should generate a sample code snippet for components 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import CustomButton from \\"./CustomButton\\";
import { View, ViewProps } from \\"@aws-amplify/ui-react\\";

export type ViewWithButtonProps = React.PropsWithChildren<
  Partial<ViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ViewWithButton(
  props: ViewWithButtonProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <View
      padding-left
      {...rest}
      {...getOverrideProps(overrides, \\"ViewWithButton\\")}
    >
      <CustomButton
        color=\\"#ff0000\\"
        width=\\"20px\\"
        buttonText=\\"Click Me\\"
        {...getOverrideProps(overrides, \\"MyCustomButton\\")}
      ></CustomButton>
    </View>
  );
}
"
`;

exports[`amplify render tests should render events 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import { Flex, FlexProps, Text, TextField } from \\"@aws-amplify/ui-react\\";
import { SyntheticEvent } from \\"react\\";

export type EventsProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    onClick?: (event: SyntheticEvent) => void;
    onDoubleClick?: (event: SyntheticEvent) => void;
    onMouseDown?: (event: SyntheticEvent) => void;
    onMouseEnter?: (event: SyntheticEvent) => void;
    onMouseLeave?: (event: SyntheticEvent) => void;
    onMouseMove?: (event: SyntheticEvent) => void;
    onMouseOut?: (event: SyntheticEvent) => void;
    onMouseOver?: (event: SyntheticEvent) => void;
    onMouseUp?: (event: SyntheticEvent) => void;
    onChange?: (event: SyntheticEvent) => void;
    onInput?: (event: SyntheticEvent) => void;
    onFocus?: (event: SyntheticEvent) => void;
    onBlur?: (event: SyntheticEvent) => void;
    onKeyDown?: (event: SyntheticEvent) => void;
    onKeyPress?: (event: SyntheticEvent) => void;
    onKeyUp?: (event: SyntheticEvent) => void;
  } & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function Events(props: EventsProps): React.ReactElement {
  const {
    onClick,
    onDoubleClick,
    onMouseDown,
    onMouseEnter,
    onMouseLeave,
    onMouseMove,
    onMouseOut,
    onMouseOver,
    onMouseUp,
    onChange,
    onInput,
    onFocus,
    onBlur,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    overrides,
    ...rest
  } = props;
  return (
    /* @ts-ignore: TS2322 */
    <Flex {...rest} {...getOverrideProps(overrides, \\"Events\\")}>
      <Flex {...getOverrideProps(overrides, \\"GenericEvents\\")}>
        <Text
          children=\\"onClick\\"
          onClick={onClick}
          {...getOverrideProps(overrides, \\"onClick\\")}
        ></Text>
        <Text
          children=\\"onDoubleClick\\"
          onDoubleClick={onDoubleClick}
          {...getOverrideProps(overrides, \\"onDoubleClick\\")}
        ></Text>
        <Text
          children=\\"onMouseDown\\"
          onMouseDown={onMouseDown}
          {...getOverrideProps(overrides, \\"onMouseDown\\")}
        ></Text>
        <Text
          children=\\"onMouseEnter\\"
          onMouseEnter={onMouseEnter}
          {...getOverrideProps(overrides, \\"onMouseEnter\\")}
        ></Text>
        <Text
          children=\\"onMouseLeave\\"
          onMouseLeave={onMouseLeave}
          {...getOverrideProps(overrides, \\"onMouseLeave\\")}
        ></Text>
        <Text
          children=\\"mousemove\\"
          onMouseMove={mousemove}
          {...getOverrideProps(overrides, \\"onMouseMove\\")}
        ></Text>
        <Text
          children=\\"onMouseOut\\"
          onMouseOut={onMouseOut}
          {...getOverrideProps(overrides, \\"onMouseOut\\")}
        ></Text>
        <Text
          children=\\"onMouseOver\\"
          onMouseOver={onMouseOver}
          {...getOverrideProps(overrides, \\"onMouseOver\\")}
        ></Text>
        <Text
          children=\\"onMouseUp\\"
          onMouseUp={onMouseUp}
          {...getOverrideProps(overrides, \\"onMouseUp\\")}
        ></Text>
      </Flex>
      <Flex {...getOverrideProps(overrides, \\"FieldEvents\\")}>
        <TextField
          defaultValue=\\"onChange\\"
          onChange={onChange}
          {...getOverrideProps(overrides, \\"onChange\\")}
        ></TextField>
        <TextField
          defaultValue=\\"onInput\\"
          onInput={onInput}
          {...getOverrideProps(overrides, \\"onInput\\")}
        ></TextField>
        <TextField
          defaultValue=\\"onFocus\\"
          onFocus={onFocus}
          {...getOverrideProps(overrides, \\"onFocus\\")}
        ></TextField>
        <TextField
          defaultValue=\\"onBlur\\"
          onBlur={onBlur}
          {...getOverrideProps(overrides, \\"onBlur\\")}
        ></TextField>
        <TextField
          defaultValue=\\"onKeyDown\\"
          onKeyDown={onKeyDown}
          {...getOverrideProps(overrides, \\"onKeyDown\\")}
        ></TextField>
        <TextField
          defaultValue=\\"onKeyPress\\"
          onKeyPress={onKeyPress}
          {...getOverrideProps(overrides, \\"onKeyPress\\")}
        ></TextField>
        <TextField
          defaultValue=\\"onKeyUp\\"
          onKeyUp={onKeyUp}
          {...getOverrideProps(overrides, \\"onKeyUp\\")}
        ></TextField>
      </Flex>
    </Flex>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests should render parsed fixed values 1`] = `
Object {
  "componentText": "/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
} from \\"@aws-amplify/ui-react/internal\\";
import Input from \\"./Input\\";
import { View, ViewProps } from \\"@aws-amplify/ui-react\\";

export type ParsedFixedValuesProps = React.PropsWithChildren<
  Partial<ViewProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function ParsedFixedValues(
  props: ParsedFixedValuesProps
): React.ReactElement {
  const { overrides, ...rest } = props;
  return (
    /* @ts-ignore: TS2322 */
    <View
      id=\\"parsed-fixed-values\\"
      {...rest}
      {...getOverrideProps(overrides, \\"ParsedFixedValues\\")}
    >
      <Input
        id=\\"string-value\\"
        value=\\"raw string value\\"
        {...getOverrideProps(overrides, \\"MyInputString\\")}
      ></Input>
      <Input
        id=\\"number-value\\"
        value=\\"67548\\"
        {...getOverrideProps(overrides, \\"MyInputNumber\\")}
      ></Input>
      <Input
        id=\\"parsed-number-value\\"
        value={67548}
        {...getOverrideProps(overrides, \\"MyInputParsedNumber\\")}
      ></Input>
      <Input
        id=\\"boolean-value\\"
        value=\\"true\\"
        {...getOverrideProps(overrides, \\"MyInputBoolean\\")}
      ></Input>
      <Input
        id=\\"parsed-boolean-value\\"
        value={true}
        {...getOverrideProps(overrides, \\"MyInputPrasedBoolean\\")}
      ></Input>
      <Input
        id=\\"json-value\\"
        value='{\\"foo\\": \\"bar\\"}'
        {...getOverrideProps(overrides, \\"MyInputJson\\")}
      ></Input>
      <Input
        id=\\"parsed-json-value\\"
        value={{ foo: \\"bar\\" }}
        {...getOverrideProps(overrides, \\"MyInputParsedJson\\")}
      ></Input>
      <Input
        id=\\"array-value\\"
        value=\\"[1,2,3]\\"
        {...getOverrideProps(overrides, \\"MyInputArray\\")}
      ></Input>
      <Input
        id=\\"parsed-array-value\\"
        value={[1, 2, 3]}
        {...getOverrideProps(overrides, \\"MyInputParsedArray\\")}
      ></Input>
      <Input
        id=\\"null-value\\"
        value=\\"null\\"
        {...getOverrideProps(overrides, \\"MyInputNull\\")}
      ></Input>
      <Input
        id=\\"parsed-null-value\\"
        value={null}
        {...getOverrideProps(overrides, \\"MyInputParsedNull\\")}
      ></Input>
    </View>
  );
}
",
  "declaration": undefined,
  "renderComponentToFilesystem": [Function],
}
`;

exports[`amplify render tests source maps should render inline source maps 1`] = `
"var __rest =
  (this && this.__rest) ||
  function (s, e) {
    var t = {};
    for (var p in s)
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
        if (
          e.indexOf(p[i]) < 0 &&
          Object.prototype.propertyIsEnumerable.call(s, p[i])
        )
          t[p[i]] = s[p[i]];
      }
    return t;
  };
/* eslint-disable */
import React from \\"react\\";
import { getOverrideProps, useAuth } from \\"@aws-amplify/ui-react/internal\\";
import { Button, Flex, Image } from \\"@aws-amplify/ui-react\\";
export default function Profile(props) {
  var _a, _b;
  const { overrides } = props,
    rest = __rest(props, [\\"overrides\\"]);
  const authAttributes =
    (_b =
      (_a = useAuth().user) === null || _a === void 0
        ? void 0
        : _a.attributes) !== null && _b !== void 0
      ? _b
      : {};
  return React.createElement(
    Flex,
    Object.assign({}, rest, getOverrideProps(overrides, \\"Profile\\")),
    React.createElement(
      Image,
      Object.assign(
        { src: authAttributes[\\"username\\"] },
        getOverrideProps(overrides, \\"child1\\")
      )
    ),
    React.createElement(
      Button,
      Object.assign(
        { children: authAttributes[\\"picture\\"] },
        getOverrideProps(overrides, \\"child2\\")
      )
    ),
    React.createElement(
      Button,
      Object.assign(
        { children: authAttributes[\\"custom:favorite_icecream\\"] },
        getOverrideProps(overrides, \\"child3\\")
      )
    )
  );
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kdWxlLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLG9CQUFvQjtBQUNwQixPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDMUIsT0FBTyxFQUFvQixnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM3RixPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBYSxLQUFLLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUt2RSxNQUFNLENBQUMsT0FBTyxVQUFVLE9BQU8sQ0FBQyxLQUFtQjs7SUFDL0MsTUFBTSxFQUFFLFNBQVMsS0FBYyxLQUFLLEVBQWQsSUFBSSxVQUFLLEtBQUssRUFBOUIsYUFBc0IsQ0FBUSxDQUFDO0lBQ3JDLE1BQU0sY0FBYyxHQUFHLE1BQUEsTUFBQSxPQUFPLEVBQUUsQ0FBQyxJQUFJLDBDQUFFLFVBQVUsbUNBQUksRUFBRSxDQUFDO0lBQ3hELE9BQU8sQ0FBQyxvQkFBQyxJQUFJLG9CQUFLLElBQUksRUFBTSxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDO1FBQUUsb0JBQUMsS0FBSyxrQkFBQyxHQUFHLEVBQUUsY0FBYyxDQUFDLFVBQVUsQ0FBQyxJQUFNLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsRUFBVTtRQUFBLG9CQUFDLE1BQU0sa0JBQUMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxTQUFTLENBQUMsSUFBTSxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLEVBQVc7UUFBQSxvQkFBQyxNQUFNLGtCQUFDLFFBQVEsRUFBRSxjQUFjLENBQUMsMEJBQTBCLENBQUMsSUFBTSxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLEVBQVcsQ0FBTyxDQUFDLENBQUM7QUFDL1gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBFc2NhcGVIYXRjaFByb3BzLCBnZXRPdmVycmlkZVByb3BzLCB1c2VBdXRoIH0gZnJvbSBcIkBhd3MtYW1wbGlmeS91aS1yZWFjdC9pbnRlcm5hbFwiO1xuaW1wb3J0IHsgQnV0dG9uLCBGbGV4LCBGbGV4UHJvcHMsIEltYWdlIH0gZnJvbSBcIkBhd3MtYW1wbGlmeS91aS1yZWFjdFwiO1xuXG5leHBvcnQgdHlwZSBQcm9maWxlUHJvcHMgPSBSZWFjdC5Qcm9wc1dpdGhDaGlsZHJlbjxQYXJ0aWFsPEZsZXhQcm9wcz4gJiB7XG4gICAgb3ZlcnJpZGVzPzogRXNjYXBlSGF0Y2hQcm9wcyB8IHVuZGVmaW5lZCB8IG51bGw7XG59PjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFByb2ZpbGUocHJvcHM6IFByb2ZpbGVQcm9wcyk6IFJlYWN0LlJlYWN0RWxlbWVudCB7XG4gICAgY29uc3QgeyBvdmVycmlkZXMsIC4uLnJlc3QgfSA9IHByb3BzO1xuICAgIGNvbnN0IGF1dGhBdHRyaWJ1dGVzID0gdXNlQXV0aCgpLnVzZXI/LmF0dHJpYnV0ZXMgPz8ge307XG4gICAgcmV0dXJuICg8RmxleCB7Li4ucmVzdH0gey4uLmdldE92ZXJyaWRlUHJvcHMob3ZlcnJpZGVzLCBcIlByb2ZpbGVcIil9PjxJbWFnZSBzcmM9e2F1dGhBdHRyaWJ1dGVzW1widXNlcm5hbWVcIl19IHsuLi5nZXRPdmVycmlkZVByb3BzKG92ZXJyaWRlcywgXCJjaGlsZDFcIil9PjwvSW1hZ2U+PEJ1dHRvbiBjaGlsZHJlbj17YXV0aEF0dHJpYnV0ZXNbXCJwaWN0dXJlXCJdfSB7Li4uZ2V0T3ZlcnJpZGVQcm9wcyhvdmVycmlkZXMsIFwiY2hpbGQyXCIpfT48L0J1dHRvbj48QnV0dG9uIGNoaWxkcmVuPXthdXRoQXR0cmlidXRlc1tcImN1c3RvbTpmYXZvcml0ZV9pY2VjcmVhbVwiXX0gey4uLmdldE92ZXJyaWRlUHJvcHMob3ZlcnJpZGVzLCBcImNoaWxkM1wiKX0+PC9CdXR0b24+PC9GbGV4Pik7XG59Il19
"
`;

exports[`amplify render tests user specific attributes should render user specific attributes 1`] = `
"/* eslint-disable */
import React from \\"react\\";
import {
  EscapeHatchProps,
  getOverrideProps,
  useAuth,
} from \\"@aws-amplify/ui-react/internal\\";
import { Button, Flex, FlexProps, Image } from \\"@aws-amplify/ui-react\\";

export type ProfileProps = React.PropsWithChildren<
  Partial<FlexProps> & {
    overrides?: EscapeHatchProps | undefined | null;
  }
>;
export default function Profile(props: ProfileProps): React.ReactElement {
  const { overrides, ...rest } = props;
  const authAttributes = useAuth().user?.attributes ?? {};
  return (
    /* @ts-ignore: TS2322 */
    <Flex {...rest} {...getOverrideProps(overrides, \\"Profile\\")}>
      <Image
        src={authAttributes[\\"username\\"]}
        {...getOverrideProps(overrides, \\"child1\\")}
      ></Image>
      <Button
        children={authAttributes[\\"picture\\"]}
        {...getOverrideProps(overrides, \\"child2\\")}
      ></Button>
      <Button
        children={authAttributes[\\"custom:favorite_icecream\\"]}
        {...getOverrideProps(overrides, \\"child3\\")}
      ></Button>
    </Flex>
  );
}
"
`;
