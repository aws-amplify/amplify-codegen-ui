/*
  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

  Licensed under the Apache License, Version 2.0 (the "License").
  You may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 */
import ts, { factory } from 'typescript';

/* eslint-disable max-len */
// AST-viewer does not escape backslashes, so it generates the wrong regex
const EscapedRegexLiterals = {
  emailAddress:
    "/^[-!#$%&'*+\\/0-9=?A-Z^_a-z`{|}~](\\.?[-!#$%&'*+\\/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\\.?[a-zA-Z0-9])*\\.[a-zA-Z](-?[a-zA-Z0-9])+$/",
  ipv4: '/^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$/',
  ipv6: '/^(?:(?:[a-fA-F\\d]{1,4}:){7}(?:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|:[a-fA-F\\d]{1,4}|:)|(?:[a-fA-F\\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,2}|:)|(?:[a-fA-F\\d]{1,4}:){4}(?:(?::[a-fA-F\\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,3}|:)|(?:[a-fA-F\\d]{1,4}:){3}(?:(?::[a-fA-F\\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,4}|:)|(?:[a-fA-F\\d]{1,4}:){2}(?:(?::[a-fA-F\\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,5}|:)|(?:[a-fA-F\\d]{1,4}:){1}(?:(?::[a-fA-F\\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}|(?::[a-fA-F\\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$/',
  phone: '/^\\+?\\d[\\d\\s-]+$/',
};

export const validationResponseDeclaration = () =>
  factory.createTypeAliasDeclaration(
    undefined,
    undefined,
    factory.createIdentifier('ValidationResponse'),
    undefined,
    factory.createTypeLiteralNode([
      factory.createPropertySignature(
        undefined,
        factory.createIdentifier('hasError'),
        undefined,
        factory.createKeywordTypeNode(ts.SyntaxKind.BooleanKeyword),
      ),
      factory.createPropertySignature(
        undefined,
        factory.createIdentifier('errorMessage'),
        factory.createToken(ts.SyntaxKind.QuestionToken),
        factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
      ),
    ]),
  );

export const fieldValidationConfigurationDeclaration = () =>
  factory.createTypeAliasDeclaration(
    undefined,
    undefined,
    factory.createIdentifier('FieldValidationConfiguration'),
    undefined,
    factory.createTypeLiteralNode([
      factory.createPropertySignature(
        undefined,
        factory.createIdentifier('type'),
        undefined,
        factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
      ),
      factory.createPropertySignature(
        undefined,
        factory.createIdentifier('strValues'),
        factory.createToken(ts.SyntaxKind.QuestionToken),
        factory.createArrayTypeNode(factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword)),
      ),
      factory.createPropertySignature(
        undefined,
        factory.createIdentifier('numValues'),
        factory.createToken(ts.SyntaxKind.QuestionToken),
        factory.createArrayTypeNode(factory.createKeywordTypeNode(ts.SyntaxKind.NumberKeyword)),
      ),
      factory.createPropertySignature(
        undefined,
        factory.createIdentifier('validationMessage'),
        factory.createToken(ts.SyntaxKind.QuestionToken),
        factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
      ),
    ]),
  );

export const generateValidateFieldFunction = () =>
  factory.createVariableStatement(
    [factory.createModifier(ts.SyntaxKind.ExportKeyword)],
    factory.createVariableDeclarationList(
      [
        factory.createVariableDeclaration(
          factory.createIdentifier('validateField'),
          undefined,
          undefined,
          factory.createArrowFunction(
            undefined,
            undefined,
            [
              factory.createParameterDeclaration(
                undefined,
                undefined,
                undefined,
                factory.createIdentifier('value'),
                undefined,
                factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword),
                undefined,
              ),
              factory.createParameterDeclaration(
                undefined,
                undefined,
                undefined,
                factory.createIdentifier('validations'),
                undefined,
                factory.createArrayTypeNode(
                  factory.createTypeReferenceNode(factory.createIdentifier('FieldValidationConfiguration'), undefined),
                ),
                undefined,
              ),
            ],
            factory.createTypeReferenceNode(factory.createIdentifier('ValidationResponse'), undefined),
            factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
            factory.createBlock(
              [
                factory.createForOfStatement(
                  undefined,
                  factory.createVariableDeclarationList(
                    [
                      factory.createVariableDeclaration(
                        factory.createIdentifier('validation'),
                        undefined,
                        undefined,
                        undefined,
                      ),
                    ],
                    ts.NodeFlags.Const,
                  ),
                  factory.createIdentifier('validations'),
                  factory.createBlock(
                    [
                      factory.createIfStatement(
                        factory.createBinaryExpression(
                          factory.createBinaryExpression(
                            factory.createBinaryExpression(
                              factory.createIdentifier('value'),
                              factory.createToken(ts.SyntaxKind.EqualsEqualsEqualsToken),
                              factory.createIdentifier('undefined'),
                            ),
                            factory.createToken(ts.SyntaxKind.BarBarToken),
                            factory.createBinaryExpression(
                              factory.createIdentifier('value'),
                              factory.createToken(ts.SyntaxKind.EqualsEqualsEqualsToken),
                              factory.createStringLiteral(''),
                            ),
                          ),
                          factory.createToken(ts.SyntaxKind.BarBarToken),
                          factory.createBinaryExpression(
                            factory.createIdentifier('value'),
                            factory.createToken(ts.SyntaxKind.EqualsEqualsEqualsToken),
                            factory.createNull(),
                          ),
                        ),
                        factory.createBlock(
                          [
                            factory.createIfStatement(
                              factory.createBinaryExpression(
                                factory.createPropertyAccessExpression(
                                  factory.createIdentifier('validation'),
                                  factory.createIdentifier('type'),
                                ),
                                factory.createToken(ts.SyntaxKind.EqualsEqualsEqualsToken),
                                factory.createStringLiteral('Required'),
                              ),
                              factory.createBlock(
                                [
                                  factory.createReturnStatement(
                                    factory.createObjectLiteralExpression(
                                      [
                                        factory.createPropertyAssignment(
                                          factory.createIdentifier('hasError'),
                                          factory.createTrue(),
                                        ),
                                        factory.createPropertyAssignment(
                                          factory.createIdentifier('errorMessage'),
                                          factory.createBinaryExpression(
                                            factory.createPropertyAccessExpression(
                                              factory.createIdentifier('validation'),
                                              factory.createIdentifier('validationMessage'),
                                            ),
                                            factory.createToken(ts.SyntaxKind.BarBarToken),
                                            factory.createStringLiteral('The value is required'),
                                          ),
                                        ),
                                      ],
                                      true,
                                    ),
                                  ),
                                ],
                                true,
                              ),
                              factory.createBlock(
                                [
                                  factory.createReturnStatement(
                                    factory.createObjectLiteralExpression(
                                      [
                                        factory.createPropertyAssignment(
                                          factory.createIdentifier('hasError'),
                                          factory.createFalse(),
                                        ),
                                      ],
                                      true,
                                    ),
                                  ),
                                ],
                                true,
                              ),
                            ),
                          ],
                          true,
                        ),
                        undefined,
                      ),
                      factory.createVariableStatement(
                        undefined,
                        factory.createVariableDeclarationList(
                          [
                            factory.createVariableDeclaration(
                              factory.createIdentifier('validationResult'),
                              undefined,
                              undefined,
                              factory.createCallExpression(factory.createIdentifier('checkValidation'), undefined, [
                                factory.createIdentifier('value'),
                                factory.createIdentifier('validation'),
                              ]),
                            ),
                          ],
                          ts.NodeFlags.Const,
                        ),
                      ),
                      factory.createIfStatement(
                        factory.createPropertyAccessChain(
                          factory.createIdentifier('validationResult'),
                          factory.createToken(ts.SyntaxKind.QuestionDotToken),
                          factory.createIdentifier('hasError'),
                        ),
                        factory.createBlock(
                          [factory.createReturnStatement(factory.createIdentifier('validationResult'))],
                          true,
                        ),
                        undefined,
                      ),
                    ],
                    true,
                  ),
                ),
                factory.createReturnStatement(
                  factory.createObjectLiteralExpression(
                    [factory.createPropertyAssignment(factory.createIdentifier('hasError'), factory.createFalse())],
                    false,
                  ),
                ),
              ],
              true,
            ),
          ),
        ),
      ],
      ts.NodeFlags.Const,
    ),
  );

export const generateParseDateValidatorFunction = () =>
  factory.createVariableStatement(
    [factory.createToken(ts.SyntaxKind.ExportKeyword)],
    factory.createVariableDeclarationList(
      [
        factory.createVariableDeclaration(
          factory.createIdentifier('parseDateValidator'),
          undefined,
          undefined,
          factory.createArrowFunction(
            undefined,
            undefined,
            [
              factory.createParameterDeclaration(
                undefined,
                undefined,
                undefined,
                factory.createIdentifier('dateValidator'),
                undefined,
                factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),
                undefined,
              ),
            ],
            undefined,
            factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
            factory.createBlock(
              [
                factory.createVariableStatement(
                  undefined,
                  factory.createVariableDeclarationList(
                    [
                      factory.createVariableDeclaration(
                        factory.createIdentifier('isTimestamp'),
                        undefined,
                        undefined,
                        factory.createBinaryExpression(
                          factory.createPropertyAccessExpression(
                            factory.createTemplateExpression(factory.createTemplateHead('', ''), [
                              factory.createTemplateSpan(
                                factory.createCallExpression(factory.createIdentifier('parseInt'), undefined, [
                                  factory.createIdentifier('dateValidator'),
                                ]),
                                factory.createTemplateTail('', ''),
                              ),
                            ]),
                            factory.createIdentifier('length'),
                          ),
                          factory.createToken(ts.SyntaxKind.EqualsEqualsEqualsToken),
                          factory.createPropertyAccessExpression(
                            factory.createIdentifier('dateValidator'),
                            factory.createIdentifier('length'),
                          ),
                        ),
                      ),
                    ],
                    ts.NodeFlags.Const,
                  ),
                ),
                factory.createReturnStatement(
                  factory.createConditionalExpression(
                    factory.createIdentifier('isTimestamp'),
                    factory.createToken(ts.SyntaxKind.QuestionToken),
                    factory.createCallExpression(factory.createIdentifier('parseInt'), undefined, [
                      factory.createIdentifier('dateValidator'),
                    ]),
                    factory.createToken(ts.SyntaxKind.ColonToken),
                    factory.createIdentifier('dateValidator'),
                  ),
                ),
              ],
              true,
            ),
          ),
        ),
      ],
      ts.NodeFlags.Const,
    ),
  );

const numValuesSwitchStatement = () =>
  factory.createSwitchStatement(
    factory.createPropertyAccessExpression(factory.createIdentifier('validation'), factory.createIdentifier('type')),
    factory.createCaseBlock([
      factory.createCaseClause(factory.createStringLiteral('LessThanChar'), [
        factory.createReturnStatement(
          factory.createObjectLiteralExpression(
            [
              factory.createPropertyAssignment(
                factory.createIdentifier('hasError'),
                factory.createPrefixUnaryExpression(
                  ts.SyntaxKind.ExclamationToken,
                  factory.createParenthesizedExpression(
                    factory.createBinaryExpression(
                      factory.createPropertyAccessExpression(
                        factory.createIdentifier('value'),
                        factory.createIdentifier('length'),
                      ),
                      factory.createToken(ts.SyntaxKind.LessThanEqualsToken),
                      factory.createElementAccessExpression(
                        factory.createPropertyAccessExpression(
                          factory.createIdentifier('validation'),
                          factory.createIdentifier('numValues'),
                        ),
                        factory.createNumericLiteral('0'),
                      ),
                    ),
                  ),
                ),
              ),
              factory.createPropertyAssignment(
                factory.createIdentifier('errorMessage'),
                factory.createBinaryExpression(
                  factory.createPropertyAccessExpression(
                    factory.createIdentifier('validation'),
                    factory.createIdentifier('validationMessage'),
                  ),
                  factory.createToken(ts.SyntaxKind.BarBarToken),
                  factory.createTemplateExpression(
                    factory.createTemplateHead('The value must be shorter than ', 'The value must be shorter than '),
                    [
                      factory.createTemplateSpan(
                        factory.createElementAccessExpression(
                          factory.createPropertyAccessExpression(
                            factory.createIdentifier('validation'),
                            factory.createIdentifier('numValues'),
                          ),
                          factory.createNumericLiteral('0'),
                        ),
                        factory.createTemplateTail('', ''),
                      ),
                    ],
                  ),
                ),
              ),
            ],
            true,
          ),
        ),
      ]),
      factory.createCaseClause(factory.createStringLiteral('GreaterThanChar'), [
        factory.createReturnStatement(
          factory.createObjectLiteralExpression(
            [
              factory.createPropertyAssignment(
                factory.createIdentifier('hasError'),
                factory.createPrefixUnaryExpression(
                  ts.SyntaxKind.ExclamationToken,
                  factory.createParenthesizedExpression(
                    factory.createBinaryExpression(
                      factory.createPropertyAccessExpression(
                        factory.createIdentifier('value'),
                        factory.createIdentifier('length'),
                      ),
                      factory.createToken(ts.SyntaxKind.GreaterThanToken),
                      factory.createElementAccessExpression(
                        factory.createPropertyAccessExpression(
                          factory.createIdentifier('validation'),
                          factory.createIdentifier('numValues'),
                        ),
                        factory.createNumericLiteral('0'),
                      ),
                    ),
                  ),
                ),
              ),
              factory.createPropertyAssignment(
                factory.createIdentifier('errorMessage'),
                factory.createBinaryExpression(
                  factory.createPropertyAccessExpression(
                    factory.createIdentifier('validation'),
                    factory.createIdentifier('validationMessage'),
                  ),
                  factory.createToken(ts.SyntaxKind.BarBarToken),
                  factory.createTemplateExpression(
                    factory.createTemplateHead('The value must be longer than ', 'The value must be longer than '),
                    [
                      factory.createTemplateSpan(
                        factory.createElementAccessExpression(
                          factory.createPropertyAccessExpression(
                            factory.createIdentifier('validation'),
                            factory.createIdentifier('numValues'),
                          ),
                          factory.createNumericLiteral('0'),
                        ),
                        factory.createTemplateTail('', ''),
                      ),
                    ],
                  ),
                ),
              ),
            ],
            true,
          ),
        ),
      ]),
      factory.createCaseClause(factory.createStringLiteral('LessThanNum'), [
        factory.createReturnStatement(
          factory.createObjectLiteralExpression(
            [
              factory.createPropertyAssignment(
                factory.createIdentifier('hasError'),
                factory.createPrefixUnaryExpression(
                  ts.SyntaxKind.ExclamationToken,
                  factory.createParenthesizedExpression(
                    factory.createBinaryExpression(
                      factory.createIdentifier('value'),
                      factory.createToken(ts.SyntaxKind.LessThanToken),
                      factory.createElementAccessExpression(
                        factory.createPropertyAccessExpression(
                          factory.createIdentifier('validation'),
                          factory.createIdentifier('numValues'),
                        ),
                        factory.createNumericLiteral('0'),
                      ),
                    ),
                  ),
                ),
              ),
              factory.createPropertyAssignment(
                factory.createIdentifier('errorMessage'),
                factory.createBinaryExpression(
                  factory.createPropertyAccessExpression(
                    factory.createIdentifier('validation'),
                    factory.createIdentifier('validationMessage'),
                  ),
                  factory.createToken(ts.SyntaxKind.BarBarToken),
                  factory.createTemplateExpression(
                    factory.createTemplateHead('The value must be less than ', 'The value must be less than '),
                    [
                      factory.createTemplateSpan(
                        factory.createElementAccessExpression(
                          factory.createPropertyAccessExpression(
                            factory.createIdentifier('validation'),
                            factory.createIdentifier('numValues'),
                          ),
                          factory.createNumericLiteral('0'),
                        ),
                        factory.createTemplateTail('', ''),
                      ),
                    ],
                  ),
                ),
              ),
            ],
            true,
          ),
        ),
      ]),
      factory.createCaseClause(factory.createStringLiteral('GreaterThanNum'), [
        factory.createReturnStatement(
          factory.createObjectLiteralExpression(
            [
              factory.createPropertyAssignment(
                factory.createIdentifier('hasError'),
                factory.createPrefixUnaryExpression(
                  ts.SyntaxKind.ExclamationToken,
                  factory.createParenthesizedExpression(
                    factory.createBinaryExpression(
                      factory.createIdentifier('value'),
                      factory.createToken(ts.SyntaxKind.GreaterThanToken),
                      factory.createElementAccessExpression(
                        factory.createPropertyAccessExpression(
                          factory.createIdentifier('validation'),
                          factory.createIdentifier('numValues'),
                        ),
                        factory.createNumericLiteral('0'),
                      ),
                    ),
                  ),
                ),
              ),
              factory.createPropertyAssignment(
                factory.createIdentifier('errorMessage'),
                factory.createBinaryExpression(
                  factory.createPropertyAccessExpression(
                    factory.createIdentifier('validation'),
                    factory.createIdentifier('validationMessage'),
                  ),
                  factory.createToken(ts.SyntaxKind.BarBarToken),
                  factory.createTemplateExpression(
                    factory.createTemplateHead('The value must be greater than ', 'The value must be greater than '),
                    [
                      factory.createTemplateSpan(
                        factory.createElementAccessExpression(
                          factory.createPropertyAccessExpression(
                            factory.createIdentifier('validation'),
                            factory.createIdentifier('numValues'),
                          ),
                          factory.createNumericLiteral('0'),
                        ),
                        factory.createTemplateTail('', ''),
                      ),
                    ],
                  ),
                ),
              ),
            ],
            true,
          ),
        ),
      ]),
      factory.createCaseClause(factory.createStringLiteral('EqualTo'), [
        factory.createReturnStatement(
          factory.createObjectLiteralExpression(
            [
              factory.createPropertyAssignment(
                factory.createIdentifier('hasError'),
                factory.createPrefixUnaryExpression(
                  ts.SyntaxKind.ExclamationToken,
                  factory.createCallExpression(
                    factory.createPropertyAccessExpression(
                      factory.createPropertyAccessExpression(
                        factory.createIdentifier('validation'),
                        factory.createIdentifier('numValues'),
                      ),
                      factory.createIdentifier('some'),
                    ),
                    undefined,
                    [
                      factory.createArrowFunction(
                        undefined,
                        undefined,
                        [
                          factory.createParameterDeclaration(
                            undefined,
                            undefined,
                            undefined,
                            factory.createIdentifier('el'),
                            undefined,
                            undefined,
                            undefined,
                          ),
                        ],
                        undefined,
                        factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                        factory.createBinaryExpression(
                          factory.createIdentifier('el'),
                          factory.createToken(ts.SyntaxKind.EqualsEqualsEqualsToken),
                          factory.createIdentifier('value'),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              factory.createPropertyAssignment(
                factory.createIdentifier('errorMessage'),
                factory.createBinaryExpression(
                  factory.createPropertyAccessExpression(
                    factory.createIdentifier('validation'),
                    factory.createIdentifier('validationMessage'),
                  ),
                  factory.createToken(ts.SyntaxKind.BarBarToken),
                  factory.createTemplateExpression(
                    factory.createTemplateHead('The value must be equal to ', 'The value must be equal to '),
                    [
                      factory.createTemplateSpan(
                        factory.createCallExpression(
                          factory.createPropertyAccessExpression(
                            factory.createPropertyAccessExpression(
                              factory.createIdentifier('validation'),
                              factory.createIdentifier('numValues'),
                            ),
                            factory.createIdentifier('join'),
                          ),
                          undefined,
                          [factory.createStringLiteral(' or ')],
                        ),
                        factory.createTemplateTail('', ''),
                      ),
                    ],
                  ),
                ),
              ),
            ],
            true,
          ),
        ),
      ]),
      factory.createDefaultClause([]),
    ]),
  );

const strValuesSwitchStatement = () =>
  factory.createSwitchStatement(
    factory.createPropertyAccessExpression(factory.createIdentifier('validation'), factory.createIdentifier('type')),
    factory.createCaseBlock([
      factory.createCaseClause(factory.createStringLiteral('StartWith'), [
        factory.createReturnStatement(
          factory.createObjectLiteralExpression(
            [
              factory.createPropertyAssignment(
                factory.createIdentifier('hasError'),
                factory.createPrefixUnaryExpression(
                  ts.SyntaxKind.ExclamationToken,
                  factory.createCallExpression(
                    factory.createPropertyAccessExpression(
                      factory.createPropertyAccessExpression(
                        factory.createIdentifier('validation'),
                        factory.createIdentifier('strValues'),
                      ),
                      factory.createIdentifier('some'),
                    ),
                    undefined,
                    [
                      factory.createArrowFunction(
                        undefined,
                        undefined,
                        [
                          factory.createParameterDeclaration(
                            undefined,
                            undefined,
                            undefined,
                            factory.createIdentifier('el'),
                            undefined,
                            factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword),
                            undefined,
                          ),
                        ],
                        undefined,
                        factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                        factory.createCallExpression(
                          factory.createPropertyAccessExpression(
                            factory.createIdentifier('value'),
                            factory.createIdentifier('startsWith'),
                          ),
                          undefined,
                          [factory.createIdentifier('el')],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              factory.createPropertyAssignment(
                factory.createIdentifier('errorMessage'),
                factory.createBinaryExpression(
                  factory.createPropertyAccessExpression(
                    factory.createIdentifier('validation'),
                    factory.createIdentifier('validationMessage'),
                  ),
                  factory.createToken(ts.SyntaxKind.BarBarToken),
                  factory.createTemplateExpression(
                    factory.createTemplateHead('The value must start with ', 'The value must start with '),
                    [
                      factory.createTemplateSpan(
                        factory.createCallExpression(
                          factory.createPropertyAccessExpression(
                            factory.createPropertyAccessExpression(
                              factory.createIdentifier('validation'),
                              factory.createIdentifier('strValues'),
                            ),
                            factory.createIdentifier('join'),
                          ),
                          undefined,
                          [factory.createStringLiteral(', ')],
                        ),
                        factory.createTemplateTail('', ''),
                      ),
                    ],
                  ),
                ),
              ),
            ],
            true,
          ),
        ),
      ]),
      factory.createCaseClause(factory.createStringLiteral('EndWith'), [
        factory.createReturnStatement(
          factory.createObjectLiteralExpression(
            [
              factory.createPropertyAssignment(
                factory.createIdentifier('hasError'),
                factory.createPrefixUnaryExpression(
                  ts.SyntaxKind.ExclamationToken,
                  factory.createCallExpression(
                    factory.createPropertyAccessExpression(
                      factory.createPropertyAccessExpression(
                        factory.createIdentifier('validation'),
                        factory.createIdentifier('strValues'),
                      ),
                      factory.createIdentifier('some'),
                    ),
                    undefined,
                    [
                      factory.createArrowFunction(
                        undefined,
                        undefined,
                        [
                          factory.createParameterDeclaration(
                            undefined,
                            undefined,
                            undefined,
                            factory.createIdentifier('el'),
                            undefined,
                            factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword),
                            undefined,
                          ),
                        ],
                        undefined,
                        factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                        factory.createCallExpression(
                          factory.createPropertyAccessExpression(
                            factory.createIdentifier('value'),
                            factory.createIdentifier('endsWith'),
                          ),
                          undefined,
                          [factory.createIdentifier('el')],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              factory.createPropertyAssignment(
                factory.createIdentifier('errorMessage'),
                factory.createBinaryExpression(
                  factory.createPropertyAccessExpression(
                    factory.createIdentifier('validation'),
                    factory.createIdentifier('validationMessage'),
                  ),
                  factory.createToken(ts.SyntaxKind.BarBarToken),
                  factory.createTemplateExpression(
                    factory.createTemplateHead('The value must end with ', 'The value must end with '),
                    [
                      factory.createTemplateSpan(
                        factory.createCallExpression(
                          factory.createPropertyAccessExpression(
                            factory.createPropertyAccessExpression(
                              factory.createIdentifier('validation'),
                              factory.createIdentifier('strValues'),
                            ),
                            factory.createIdentifier('join'),
                          ),
                          undefined,
                          [factory.createStringLiteral(', ')],
                        ),
                        factory.createTemplateTail('', ''),
                      ),
                    ],
                  ),
                ),
              ),
            ],
            true,
          ),
        ),
      ]),
      factory.createCaseClause(factory.createStringLiteral('Contains'), [
        factory.createReturnStatement(
          factory.createObjectLiteralExpression(
            [
              factory.createPropertyAssignment(
                factory.createIdentifier('hasError'),
                factory.createPrefixUnaryExpression(
                  ts.SyntaxKind.ExclamationToken,
                  factory.createCallExpression(
                    factory.createPropertyAccessExpression(
                      factory.createPropertyAccessExpression(
                        factory.createIdentifier('validation'),
                        factory.createIdentifier('strValues'),
                      ),
                      factory.createIdentifier('some'),
                    ),
                    undefined,
                    [
                      factory.createArrowFunction(
                        undefined,
                        undefined,
                        [
                          factory.createParameterDeclaration(
                            undefined,
                            undefined,
                            undefined,
                            factory.createIdentifier('el'),
                            undefined,
                            factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword),
                            undefined,
                          ),
                        ],
                        undefined,
                        factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                        factory.createCallExpression(
                          factory.createPropertyAccessExpression(
                            factory.createIdentifier('value'),
                            factory.createIdentifier('includes'),
                          ),
                          undefined,
                          [factory.createIdentifier('el')],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              factory.createPropertyAssignment(
                factory.createIdentifier('errorMessage'),
                factory.createBinaryExpression(
                  factory.createPropertyAccessExpression(
                    factory.createIdentifier('validation'),
                    factory.createIdentifier('validationMessage'),
                  ),
                  factory.createToken(ts.SyntaxKind.BarBarToken),
                  factory.createTemplateExpression(
                    factory.createTemplateHead('The value must contain ', 'The value must contain '),
                    [
                      factory.createTemplateSpan(
                        factory.createCallExpression(
                          factory.createPropertyAccessExpression(
                            factory.createPropertyAccessExpression(
                              factory.createIdentifier('validation'),
                              factory.createIdentifier('strValues'),
                            ),
                            factory.createIdentifier('join'),
                          ),
                          undefined,
                          [factory.createStringLiteral(', ')],
                        ),
                        factory.createTemplateTail('', ''),
                      ),
                    ],
                  ),
                ),
              ),
            ],
            true,
          ),
        ),
      ]),
      factory.createCaseClause(factory.createStringLiteral('NotContains'), [
        factory.createReturnStatement(
          factory.createObjectLiteralExpression(
            [
              factory.createPropertyAssignment(
                factory.createIdentifier('hasError'),
                factory.createPrefixUnaryExpression(
                  ts.SyntaxKind.ExclamationToken,
                  factory.createCallExpression(
                    factory.createPropertyAccessExpression(
                      factory.createPropertyAccessExpression(
                        factory.createIdentifier('validation'),
                        factory.createIdentifier('strValues'),
                      ),
                      factory.createIdentifier('every'),
                    ),
                    undefined,
                    [
                      factory.createArrowFunction(
                        undefined,
                        undefined,
                        [
                          factory.createParameterDeclaration(
                            undefined,
                            undefined,
                            undefined,
                            factory.createIdentifier('el'),
                            undefined,
                            factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword),
                            undefined,
                          ),
                        ],
                        undefined,
                        factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
                        factory.createPrefixUnaryExpression(
                          ts.SyntaxKind.ExclamationToken,
                          factory.createCallExpression(
                            factory.createPropertyAccessExpression(
                              factory.createIdentifier('value'),
                              factory.createIdentifier('includes'),
                            ),
                            undefined,
                            [factory.createIdentifier('el')],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              factory.createPropertyAssignment(
                factory.createIdentifier('errorMessage'),
                factory.createBinaryExpression(
                  factory.createPropertyAccessExpression(
                    factory.createIdentifier('validation'),
                    factory.createIdentifier('validationMessage'),
                  ),
                  factory.createToken(ts.SyntaxKind.BarBarToken),
                  factory.createTemplateExpression(
                    factory.createTemplateHead('The value must not contain ', 'The value must not contain '),
                    [
                      factory.createTemplateSpan(
                        factory.createCallExpression(
                          factory.createPropertyAccessExpression(
                            factory.createPropertyAccessExpression(
                              factory.createIdentifier('validation'),
                              factory.createIdentifier('strValues'),
                            ),
                            factory.createIdentifier('join'),
                          ),
                          undefined,
                          [factory.createStringLiteral(', ')],
                        ),
                        factory.createTemplateTail('', ''),
                      ),
                    ],
                  ),
                ),
              ),
            ],
            true,
          ),
        ),
      ]),
      factory.createCaseClause(factory.createStringLiteral('BeAfter'), [
        factory.createReturnStatement(
          factory.createObjectLiteralExpression(
            [
              factory.createPropertyAssignment(
                factory.createIdentifier('hasError'),
                factory.createPrefixUnaryExpression(
                  ts.SyntaxKind.ExclamationToken,
                  factory.createParenthesizedExpression(
                    factory.createBinaryExpression(
                      factory.createNewExpression(factory.createIdentifier('Date'), undefined, [
                        factory.createIdentifier('value'),
                      ]),
                      factory.createToken(ts.SyntaxKind.GreaterThanToken),
                      factory.createNewExpression(factory.createIdentifier('Date'), undefined, [
                        factory.createCallExpression(factory.createIdentifier('parseDateValidator'), undefined, [
                          factory.createElementAccessExpression(
                            factory.createPropertyAccessExpression(
                              factory.createIdentifier('validation'),
                              factory.createIdentifier('strValues'),
                            ),
                            factory.createNumericLiteral('0'),
                          ),
                        ]),
                      ]),
                    ),
                  ),
                ),
              ),
              factory.createPropertyAssignment(
                factory.createIdentifier('errorMessage'),
                factory.createBinaryExpression(
                  factory.createPropertyAccessExpression(
                    factory.createIdentifier('validation'),
                    factory.createIdentifier('validationMessage'),
                  ),
                  factory.createToken(ts.SyntaxKind.BarBarToken),
                  factory.createTemplateExpression(
                    factory.createTemplateHead('The value must be after ', 'The value must be after '),
                    [
                      factory.createTemplateSpan(
                        factory.createElementAccessExpression(
                          factory.createPropertyAccessExpression(
                            factory.createIdentifier('validation'),
                            factory.createIdentifier('strValues'),
                          ),
                          factory.createNumericLiteral('0'),
                        ),
                        factory.createTemplateTail('', ''),
                      ),
                    ],
                  ),
                ),
              ),
            ],
            true,
          ),
        ),
      ]),
      factory.createCaseClause(factory.createStringLiteral('BeBefore'), [
        factory.createReturnStatement(
          factory.createObjectLiteralExpression(
            [
              factory.createPropertyAssignment(
                factory.createIdentifier('hasError'),
                factory.createPrefixUnaryExpression(
                  ts.SyntaxKind.ExclamationToken,
                  factory.createParenthesizedExpression(
                    factory.createBinaryExpression(
                      factory.createNewExpression(factory.createIdentifier('Date'), undefined, [
                        factory.createIdentifier('value'),
                      ]),
                      factory.createToken(ts.SyntaxKind.LessThanToken),
                      factory.createNewExpression(factory.createIdentifier('Date'), undefined, [
                        factory.createCallExpression(factory.createIdentifier('parseDateValidator'), undefined, [
                          factory.createElementAccessExpression(
                            factory.createPropertyAccessExpression(
                              factory.createIdentifier('validation'),
                              factory.createIdentifier('strValues'),
                            ),
                            factory.createNumericLiteral('0'),
                          ),
                        ]),
                      ]),
                    ),
                  ),
                ),
              ),
              factory.createPropertyAssignment(
                factory.createIdentifier('errorMessage'),
                factory.createBinaryExpression(
                  factory.createPropertyAccessExpression(
                    factory.createIdentifier('validation'),
                    factory.createIdentifier('validationMessage'),
                  ),
                  factory.createToken(ts.SyntaxKind.BarBarToken),
                  factory.createTemplateExpression(
                    factory.createTemplateHead('The value must be before ', 'The value must be before '),
                    [
                      factory.createTemplateSpan(
                        factory.createElementAccessExpression(
                          factory.createPropertyAccessExpression(
                            factory.createIdentifier('validation'),
                            factory.createIdentifier('strValues'),
                          ),
                          factory.createNumericLiteral('0'),
                        ),
                        factory.createTemplateTail('', ''),
                      ),
                    ],
                  ),
                ),
              ),
            ],
            true,
          ),
        ),
      ]),
    ]),
  );

const unqiueScalarSwitchStatement = () =>
  factory.createSwitchStatement(
    factory.createPropertyAccessExpression(factory.createIdentifier('validation'), factory.createIdentifier('type')),
    factory.createCaseBlock([
      factory.createCaseClause(factory.createStringLiteral('Email'), [
        factory.createVariableStatement(
          undefined,
          factory.createVariableDeclarationList(
            [
              factory.createVariableDeclaration(
                factory.createIdentifier('EMAIL_ADDRESS_REGEX'),
                undefined,
                undefined,
                factory.createRegularExpressionLiteral(EscapedRegexLiterals.emailAddress),
              ),
            ],
            ts.NodeFlags.Const,
          ),
        ),
        factory.createReturnStatement(
          factory.createObjectLiteralExpression(
            [
              factory.createPropertyAssignment(
                factory.createIdentifier('hasError'),
                factory.createPrefixUnaryExpression(
                  ts.SyntaxKind.ExclamationToken,
                  factory.createCallExpression(
                    factory.createPropertyAccessExpression(
                      factory.createIdentifier('EMAIL_ADDRESS_REGEX'),
                      factory.createIdentifier('test'),
                    ),
                    undefined,
                    [factory.createIdentifier('value')],
                  ),
                ),
              ),
              factory.createPropertyAssignment(
                factory.createIdentifier('errorMessage'),
                factory.createBinaryExpression(
                  factory.createPropertyAccessExpression(
                    factory.createIdentifier('validation'),
                    factory.createIdentifier('validationMessage'),
                  ),
                  factory.createToken(ts.SyntaxKind.BarBarToken),
                  factory.createStringLiteral('The value must be a valid email address'),
                ),
              ),
            ],
            true,
          ),
        ),
      ]),
      factory.createCaseClause(factory.createStringLiteral('JSON'), [
        factory.createVariableStatement(
          undefined,
          factory.createVariableDeclarationList(
            [
              factory.createVariableDeclaration(
                factory.createIdentifier('isInvalidJSON'),
                undefined,
                undefined,
                factory.createFalse(),
              ),
            ],
            ts.NodeFlags.Let,
          ),
        ),
        factory.createTryStatement(
          factory.createBlock(
            [
              factory.createExpressionStatement(
                factory.createCallExpression(
                  factory.createPropertyAccessExpression(
                    factory.createIdentifier('JSON'),
                    factory.createIdentifier('parse'),
                  ),
                  undefined,
                  [factory.createIdentifier('value')],
                ),
              ),
            ],
            true,
          ),
          factory.createCatchClause(
            factory.createVariableDeclaration(factory.createIdentifier('e'), undefined, undefined, undefined),
            factory.createBlock(
              [
                factory.createExpressionStatement(
                  factory.createBinaryExpression(
                    factory.createIdentifier('isInvalidJSON'),
                    factory.createToken(ts.SyntaxKind.EqualsToken),
                    factory.createTrue(),
                  ),
                ),
              ],
              true,
            ),
          ),
          undefined,
        ),
        factory.createReturnStatement(
          factory.createObjectLiteralExpression(
            [
              factory.createPropertyAssignment(
                factory.createIdentifier('hasError'),
                factory.createIdentifier('isInvalidJSON'),
              ),
              factory.createPropertyAssignment(
                factory.createIdentifier('errorMessage'),
                factory.createBinaryExpression(
                  factory.createPropertyAccessExpression(
                    factory.createIdentifier('validation'),
                    factory.createIdentifier('validationMessage'),
                  ),
                  factory.createToken(ts.SyntaxKind.BarBarToken),
                  factory.createStringLiteral('The value must be in a correct JSON format'),
                ),
              ),
            ],
            true,
          ),
        ),
      ]),
      factory.createCaseClause(factory.createStringLiteral('IpAddress'), [
        factory.createVariableStatement(
          undefined,
          factory.createVariableDeclarationList(
            [
              factory.createVariableDeclaration(
                factory.createIdentifier('IPV_4'),
                undefined,
                undefined,
                factory.createRegularExpressionLiteral(EscapedRegexLiterals.ipv4),
              ),
            ],
            ts.NodeFlags.Const,
          ),
        ),
        factory.createVariableStatement(
          undefined,
          factory.createVariableDeclarationList(
            [
              factory.createVariableDeclaration(
                factory.createIdentifier('IPV_6'),
                undefined,
                undefined,
                factory.createRegularExpressionLiteral(EscapedRegexLiterals.ipv6),
              ),
            ],
            ts.NodeFlags.Const,
          ),
        ),
        factory.createReturnStatement(
          factory.createObjectLiteralExpression(
            [
              factory.createPropertyAssignment(
                factory.createIdentifier('hasError'),
                factory.createPrefixUnaryExpression(
                  ts.SyntaxKind.ExclamationToken,
                  factory.createParenthesizedExpression(
                    factory.createBinaryExpression(
                      factory.createCallExpression(
                        factory.createPropertyAccessExpression(
                          factory.createIdentifier('IPV_4'),
                          factory.createIdentifier('test'),
                        ),
                        undefined,
                        [factory.createIdentifier('value')],
                      ),
                      factory.createToken(ts.SyntaxKind.BarBarToken),
                      factory.createCallExpression(
                        factory.createPropertyAccessExpression(
                          factory.createIdentifier('IPV_6'),
                          factory.createIdentifier('test'),
                        ),
                        undefined,
                        [factory.createIdentifier('value')],
                      ),
                    ),
                  ),
                ),
              ),
              factory.createPropertyAssignment(
                factory.createIdentifier('errorMessage'),
                factory.createBinaryExpression(
                  factory.createPropertyAccessExpression(
                    factory.createIdentifier('validation'),
                    factory.createIdentifier('validationMessage'),
                  ),
                  factory.createToken(ts.SyntaxKind.BarBarToken),
                  factory.createStringLiteral('The value must be an IPv4 or IPv6 address'),
                ),
              ),
            ],
            true,
          ),
        ),
      ]),
      factory.createCaseClause(factory.createStringLiteral('URL'), [
        factory.createVariableStatement(
          undefined,
          factory.createVariableDeclarationList(
            [
              factory.createVariableDeclaration(
                factory.createIdentifier('isInvalidUrl'),
                undefined,
                undefined,
                factory.createFalse(),
              ),
            ],
            ts.NodeFlags.Let,
          ),
        ),
        factory.createTryStatement(
          factory.createBlock(
            [
              factory.createExpressionStatement(
                factory.createNewExpression(factory.createIdentifier('URL'), undefined, [
                  factory.createIdentifier('value'),
                ]),
              ),
            ],
            true,
          ),
          factory.createCatchClause(
            factory.createVariableDeclaration(factory.createIdentifier('e'), undefined, undefined, undefined),
            factory.createBlock(
              [
                factory.createExpressionStatement(
                  factory.createBinaryExpression(
                    factory.createIdentifier('isInvalidUrl'),
                    factory.createToken(ts.SyntaxKind.EqualsToken),
                    factory.createTrue(),
                  ),
                ),
              ],
              true,
            ),
          ),
          undefined,
        ),
        factory.createReturnStatement(
          factory.createObjectLiteralExpression(
            [
              factory.createPropertyAssignment(
                factory.createIdentifier('hasError'),
                factory.createIdentifier('isInvalidUrl'),
              ),
              factory.createPropertyAssignment(
                factory.createIdentifier('errorMessage'),
                factory.createBinaryExpression(
                  factory.createPropertyAccessExpression(
                    factory.createIdentifier('validation'),
                    factory.createIdentifier('validationMessage'),
                  ),
                  factory.createToken(ts.SyntaxKind.BarBarToken),
                  factory.createStringLiteral(
                    'The value must be a valid URL that begins with a schema (i.e. http:// or mailto:)',
                  ),
                ),
              ),
            ],
            true,
          ),
        ),
      ]),
      factory.createCaseClause(factory.createStringLiteral('Phone'), [
        factory.createVariableStatement(
          undefined,
          factory.createVariableDeclarationList(
            [
              factory.createVariableDeclaration(
                factory.createIdentifier('PHONE'),
                undefined,
                undefined,
                factory.createRegularExpressionLiteral(EscapedRegexLiterals.phone),
              ),
            ],
            ts.NodeFlags.Const,
          ),
        ),
        factory.createReturnStatement(
          factory.createObjectLiteralExpression(
            [
              factory.createPropertyAssignment(
                factory.createIdentifier('hasError'),
                factory.createPrefixUnaryExpression(
                  ts.SyntaxKind.ExclamationToken,
                  factory.createCallExpression(
                    factory.createPropertyAccessExpression(
                      factory.createIdentifier('PHONE'),
                      factory.createIdentifier('test'),
                    ),
                    undefined,
                    [factory.createIdentifier('value')],
                  ),
                ),
              ),
              factory.createPropertyAssignment(
                factory.createIdentifier('errorMessage'),
                factory.createBinaryExpression(
                  factory.createPropertyAccessExpression(
                    factory.createIdentifier('validation'),
                    factory.createIdentifier('validationMessage'),
                  ),
                  factory.createToken(ts.SyntaxKind.BarBarToken),
                  factory.createStringLiteral('The value must be a valid phone number'),
                ),
              ),
            ],
            true,
          ),
        ),
      ]),
      factory.createDefaultClause([]),
    ]),
  );

export const generateCheckValidationFunction = () =>
  factory.createVariableStatement(
    undefined,
    factory.createVariableDeclarationList(
      [
        factory.createVariableDeclaration(
          factory.createIdentifier('checkValidation'),
          undefined,
          undefined,
          factory.createArrowFunction(
            undefined,
            undefined,
            [
              factory.createParameterDeclaration(
                undefined,
                undefined,
                undefined,
                factory.createIdentifier('value'),
                undefined,
                factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword),
                undefined,
              ),
              factory.createParameterDeclaration(
                undefined,
                undefined,
                undefined,
                factory.createIdentifier('validation'),
                undefined,
                factory.createTypeReferenceNode(factory.createIdentifier('FieldValidationConfiguration'), undefined),
                undefined,
              ),
            ],
            undefined,
            factory.createToken(ts.SyntaxKind.EqualsGreaterThanToken),
            factory.createBlock(
              [
                factory.createIfStatement(
                  factory.createPropertyAccessChain(
                    factory.createPropertyAccessExpression(
                      factory.createIdentifier('validation'),
                      factory.createIdentifier('numValues'),
                    ),
                    factory.createToken(ts.SyntaxKind.QuestionDotToken),
                    factory.createIdentifier('length'),
                  ),
                  factory.createBlock([numValuesSwitchStatement()], true),
                  factory.createIfStatement(
                    factory.createPropertyAccessChain(
                      factory.createPropertyAccessExpression(
                        factory.createIdentifier('validation'),
                        factory.createIdentifier('strValues'),
                      ),
                      factory.createToken(ts.SyntaxKind.QuestionDotToken),
                      factory.createIdentifier('length'),
                    ),
                    factory.createBlock([strValuesSwitchStatement()], true),
                    undefined,
                  ),
                ),
                unqiueScalarSwitchStatement(),
              ],
              true,
            ),
          ),
        ),
      ],
      ts.NodeFlags.Const,
    ),
  );
